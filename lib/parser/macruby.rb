# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class MacRuby < Parser::Base

module_eval(<<'...end macruby.y/module_eval...', 'macruby.y', 2164)

  def version
    19 # closest released match: v1_9_0_2
  end

  def default_encoding
    Encoding::BINARY
  end
...end macruby.y/module_eval...
##### State transition tables begin ###

clist = [
'-533,566,-94,535,-97,535,255,-533,-533,-533,669,203,204,-533,-533,556',
'-533,547,467,203,204,548,577,-94,206,-533,-80,255,-95,535,103,503,-66',
'566,505,102,-533,-533,74,-533,-533,-533,-533,-533,535,-99,-455,75,-468',
'-96,-97,-95,-93,-455,661,535,937,76,670,-96,755,207,568,567,569,-98',
'-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,-533',
'686,-100,-533,-533,-533,576,595,203,204,669,-533,250,254,-533,568,567',
'578,-93,-533,207,-533,207,-533,-533,-533,-533,-533,-533,-533,207,-533',
'-533,-533,254,-529,-87,-94,103,-97,103,555,-94,102,-97,102,-455,-533',
'-533,-86,-88,-530,-533,-455,-455,-455,-96,-529,-455,-455,-455,103,-455',
'-95,103,686,102,801,-95,102,-455,-91,-455,-455,-455,-88,-89,-87,-85',
'103,660,255,-455,-455,102,-455,-455,-455,-455,-455,103,-90,203,204,-96',
'102,-89,609,103,-96,506,103,-87,102,375,686,102,-92,418,377,376,490',
'-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455,-455',
'652,609,-455,-455,-455,608,-455,-455,566,609,-455,-468,-87,-455,-455',
'-87,-455,669,-455,250,-455,-87,-455,-455,-455,-455,-455,-455,-455,800',
'-455,-100,-455,566,-99,608,-89,566,652,103,541,254,787,608,102,-533',
'-455,-455,-455,-455,-458,-455,818,-455,-85,-455,207,-458,-458,-458,-93',
'738,-458,-458,-458,832,-458,203,204,568,567,571,-89,609,-458,-89,-458',
'-458,-458,103,103,-89,207,-533,102,102,-458,-458,750,-458,-458,-458',
'-458,-458,568,567,499,-533,568,567,564,-94,566,718,-533,498,103,608',
'-458,-529,-95,102,739,-533,-399,-458,-458,-458,-458,-458,-458,-458,-458',
'-458,-458,-458,-458,-458,-458,-458,226,-533,-458,-458,-458,-533,-458',
'-458,203,204,-458,726,-533,-458,-458,-527,-458,-529,-458,507,-458,-533',
'-458,-458,-458,-458,-458,-458,-458,492,-458,-97,-458,568,567,573,-399',
'103,503,-533,773,505,102,-399,-526,589,-458,-458,-458,-458,-286,-458',
'-399,-458,-86,-458,590,-286,-286,-286,-94,202,-286,-286,-286,551,-286',
'-458,481,207,-399,491,927,-465,-458,482,-286,-286,-286,-527,-465,552',
'503,-458,480,502,-286,-286,-87,-286,-286,-286,-286,-286,-95,-286,-455',
'503,490,-89,505,-527,-286,-455,-92,-97,-461,-530,-526,103,-100,-286',
'-455,-461,102,-266,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286',
'-286,-286,-286,-286,-526,809,-286,-286,-286,-467,741,-286,226,467,-286',
'-91,-467,-286,-286,769,-286,-99,-286,226,-286,-467,-286,-286,-286,-286',
'-286,-286,-286,487,-286,226,-286,751,-460,518,517,516,522,519,223,-460',
'796,652,225,224,-286,-286,-286,-286,-533,-286,250,-286,-464,-98,-268',
'-533,-533,-533,207,-464,-533,-533,-533,-466,-533,543,103,259,524,645',
'-466,102,544,-533,-533,-533,-533,528,527,531,530,542,300,301,-533,-533',
'247,-533,-533,-533,-533,-533,483,248,677,250,518,517,516,522,519,541',
'677,561,518,517,516,522,519,476,562,750,796,652,-533,-533,-533,-533',
'-533,-533,-533,-533,-533,-533,-533,-533,-533,-533,475,-463,-533,-533',
'-533,-286,740,-533,-463,207,-533,-65,-286,-533,-533,250,-533,-530,-533',
'367,-533,-286,-533,-533,-533,-533,-533,-533,-533,-286,-533,-533,-533',
'-462,-329,207,-286,-286,-286,820,-462,-329,-286,-286,792,-286,-533,-533',
'-533,-533,-329,-533,906,-533,677,-96,518,517,516,522,519,203,204,485',
'486,-286,-286,822,-286,-286,-286,-286,-286,825,826,750,645,677,-287',
'518,517,516,522,519,677,-287,518,517,516,522,519,673,545,833,-287,-286',
'-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,-286,467',
'465,-286,-286,-286,524,594,207,839,840,-286,463,673,-286,645,452,531',
'530,-286,206,-286,863,-286,-286,-286,-286,-286,-286,-286,420,-286,226',
'-286,419,751,849,518,517,516,522,519,106,107,108,109,110,-286,-286,850',
'-90,207,-286,852,855,857,-98,275,64,65,66,9,52,859,223,859,58,59,225',
'224,207,62,524,60,61,63,28,29,67,68,546,528,527,531,530,27,26,25,91',
'90,92,93,864,677,18,518,517,516,522,519,8,42,467,10,95,94,96,85,51,87',
'86,88,866,89,97,98,762,83,84,39,40,38,677,868,518,517,516,522,519,677',
'673,518,517,516,522,519,493,417,200,676,207,37,465,494,31,201,378,53',
'54,743,365,55,416,33,199,874,207,41,677,673,518,517,516,522,519,19,524',
'876,676,207,82,74,77,78,879,79,80,531,530,-269,75,81,275,64,65,66,9',
'52,57,452,76,58,59,207,452,524,62,727,60,61,63,28,29,67,68,579,531,530',
'582,886,27,26,25,91,90,92,93,712,713,18,887,714,97,98,583,8,42,299,10',
'95,94,96,85,51,87,86,88,890,89,97,98,892,83,84,39,40,38,226,230,235',
'236,237,232,234,242,243,238,239,-287,219,220,-467,465,240,241,-287,37',
'895,-467,31,-267,585,53,54,-287,-266,55,-467,33,223,900,229,41,225,224',
'221,222,233,231,227,19,228,720,207,717,82,74,77,78,250,79,80,599,298',
'-280,75,81,226,244,-534,-233,-280,908,57,226,76,-534,-534,-534,910,-280',
'-534,-534,-534,521,-534,518,517,516,522,519,-286,911,226,-534,-534,-534',
'-534,-286,916,689,918,921,-530,923,-534,-534,-286,-534,-534,-534,-534',
'-534,830,859,518,517,516,859,519,677,524,518,517,516,522,519,541,226',
'928,528,527,531,530,245,-534,-534,-534,-534,-534,-534,-534,-534,-534',
'-534,-534,-534,-534,-534,682,226,-534,-534,-534,551,498,-534,673,680',
'-534,679,550,-534,-534,671,-534,668,-534,790,-534,552,-534,-534,-534',
'-534,-534,-534,-534,-280,-534,-534,-534,223,898,859,-280,225,224,221',
'222,899,859,859,941,-280,-534,-534,-534,-534,897,-534,665,-534,275,64',
'65,66,9,52,908,663,414,58,59,198,197,196,62,415,60,61,63,28,29,67,68',
'207,416,652,645,195,27,26,25,91,90,92,93,465,677,18,518,517,516,522',
'519,8,42,207,10,95,94,96,85,51,87,86,88,111,89,97,98,496,83,84,39,40',
'38,677,207,518,517,516,522,519,677,673,518,517,516,522,519,-287,207',
'634,-80,908,37,207,-287,31,957,958,53,54,960,859,55,-287,33,859,859',
'-530,41,677,673,518,517,516,522,519,19,524,-529,99,859,82,74,77,78,908',
'79,80,531,530,207,75,81,275,64,65,66,9,52,57,859,76,58,59,,,524,62,',
'60,61,63,28,29,67,68,,531,530,,,27,26,25,91,90,92,93,,677,18,518,517',
'516,522,519,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,830,,518,517,516,,519,677,673,518,517,516,522,519,106,107,108,109',
'110,37,,,31,,,53,54,,,55,,33,,,,41,677,,518,517,516,522,519,19,524,',
',,82,74,77,78,,79,80,531,530,,75,81,275,64,65,66,9,52,57,,76,58,59,',
',524,62,,60,61,63,28,29,67,68,,531,530,,,27,26,25,91,90,92,93,,,18,',
',,,583,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226',
'230,235,236,237,232,234,242,243,238,239,,219,220,,,240,241,,37,,,31',
',,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228,,,,82',
'74,77,78,,79,80,,,,75,81,,244,-535,,,,57,,76,-535,-535,-535,,,-535,-535',
'-535,521,-535,518,517,516,522,519,,,,-535,-535,-535,-535,106,107,108',
'109,110,,,-535,-535,,-535,-535,-535,-535,-535,106,107,108,109,110,,',
',524,,,,,,,,,528,527,531,530,,-535,-535,-535,-535,-535,-535,-535,-535',
'-535,-535,-535,-535,-535,-535,,226,-535,-535,-535,,,-535,,,-535,,,-535',
'-535,,-535,,-535,,-535,,-535,-535,-535,-535,-535,-535,-535,,-535,-535',
'-535,223,,,,225,224,221,222,,,,,,-535,-535,-535,-535,,-535,,-535,275',
'64,65,66,9,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,677,,518,517,516,522,519,,,,,,37,,,31,,,53,54,,,55,',
'33,,,,41,677,,518,517,516,522,519,19,524,,,,82,74,77,78,,79,80,531,530',
',75,81,275,64,65,66,9,52,57,,76,58,59,,,524,62,,60,61,63,28,29,67,68',
',531,530,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243',
'238,239,,-552,-552,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225',
'224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64',
'65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,226,-552,-552,-552,-552,232,234,,,-552,-552,,,,,,240,241,,37',
',,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228',
',,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,,,238,239,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225',
'224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64',
'65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,226,-552,-552,-552,-552,232,234,,,-552,-552,,,,,,240,241,,37',
',,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228',
',,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,242,,238,239,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41',
'225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,5',
'64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87,86,88,,89,97,98,,83',
'84,39,40,38,226,-552,-552,-552,-552,232,234,,,-552,-552,,,,,,240,241',
',37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19',
'228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,',
',62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,',
'10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,',
',,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,,',
'227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8',
'42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,-552,-552',
'-552,-552,232,234,,,-552,-552,,,,,,240,241,,37,,,31,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,277,,,53',
'54,,,55,,33,223,,229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78',
',79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,277',
',,53,54,,,55,,33,223,,229,41,225,224,221,222,,,227,19,228,,,,82,74,77',
'78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,226,-552,-552,-552,-552,232,234,',
',-552,-552,,,,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225,224',
'221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,275,64,65',
'66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,226,-552,-552,-552,-552,232,234,,,-552,-552,,,,,,240,241,,37,',
',31,,,53,54,,,55,,33,223,,229,41,225,224,221,222,233,231,227,19,228',
',,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,242,243,238,239,,-552,-552,,,240,241,,37,,,277,,,53,54,,,55,,33',
'223,,229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54',
',,55,,33,223,,229,41,225,224,221,222,,,227,19,228,,,,82,74,77,78,,79',
'80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53',
'54,,,55,,33,223,,229,41,225,224,221,222,,,,19,,,,,82,74,77,78,,79,80',
',,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54',
',,55,,33,223,,229,41,225,224,221,222,,,,19,,,,,82,74,77,78,,79,80,,',
',75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,',
',,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,',
'89,97,98,,83,84,39,40,38,226,,,,,,,,,,,,,,,,240,241,,37,,,31,,,53,54',
',,55,,33,223,,,41,225,224,221,222,,,,19,,,,,82,74,77,78,,79,80,,,,75',
'81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27',
'26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41',
',,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8',
'42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79',
'80,,,,75,81,5,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68',
',,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33',
',,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18',
',,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54',
',,55,,33,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,275,64,65,66',
'9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92',
'93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,275,64,65,66,9,52,57,,76,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,586,8,42,,10,95,94',
'96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55,,33,223',
',229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,',
'75,81,,244,-281,,,,57,,76,-281,-281,-281,,,-281,-281,-281,521,-281,518',
'517,516,522,519,,,,,-281,-281,-281,,,,,,,,-281,-281,,-281,-281,-281',
'-281,-281,,,,,,,,,524,707,,,,,,,,528,527,531,530,,-281,-281,-281,-281',
'-281,-281,-281,-281,-281,-281,-281,-281,-281,-281,,,-281,-281,-281,',
',-281,,,-281,,,-281,-281,,-281,,-281,,-281,,-281,-281,-281,-281,-281',
'-281,-281,,-281,521,-281,518,517,516,522,519,,,,,,,,,-281,-281,-281',
'-281,,-281,,-281,64,65,66,,52,,,,58,59,,,,62,524,60,61,63,291,292,67',
'68,,528,527,531,530,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,',
',,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94',
'96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,268,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75',
'81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287',
'288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,',
',,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,266,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54',
',,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,',
',,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243,238',
'239,,219,220,,,240,241,,211,,-233,217,,,53,54,,,55,,,223,,229,41,225',
'224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,103,244',
',-233,,102,57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,,521,295,518,517,516,522,519,,,,,,,,,,,,,,,330,',
',31,,,53,54,,,55,,33,,,,524,510,,,,,,,,528,527,531,530,82,74,77,78,',
'79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,335,51,87',
'86,336,,89,97,98,,83,84,,751,295,518,517,516,522,519,,,,,,,,,,,,342',
',,337,,,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,335,51,87',
'86,336,,89,97,98,,83,84,,521,295,518,517,516,522,519,,,,,,,,,,,,,,,337',
',,217,,,53,54,,,55,,,,,,524,,,,,,,,,528,527,531,530,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,9,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94',
'96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55,,33,223',
',229,41,225,224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,',
'75,81,,244,,,,367,57,,76,64,65,66,9,52,,,,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,39,40,38,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,,240,241,,37,,,31,,,53,54,,,55,,33,223,,229,41,225',
'224,221,222,233,231,227,19,228,,,,82,74,77,78,,79,80,,,,75,81,,244,',
',,367,57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41',
',,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,',
',,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41',
',,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,',
',,75,81,,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,91,90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,',
',41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88',
'270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,266,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,751,295',
'518,517,516,522,519,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,524,,',
',,,,,,528,527,531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,',
'76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,521,295',
'518,517,516,522,519,,,,,,,,,,,,,,,889,,,217,,,53,54,,,55,,,,,,524,707',
',,,,,,,528,527,531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,384,,,,41,,,,,,,,216,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29',
'67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,384,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,',
'52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87',
'86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53',
'54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,521,295,518,517,516',
'522,519,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,524,,,,,,,,,528,527',
'531,530,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62',
',60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53',
'54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,207,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,,,41,,,,,,,,216',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98',
',83,84,,,295,226,230,235,236,237,232,234,242,243,238,239,,219,220,,',
'240,241,,285,,,217,,,53,54,,,55,,,223,,229,,225,224,221,222,233,231',
'227,,228,,,,82,74,77,78,,79,80,,,,75,81,,244,,297,,,57,,76,64,65,66',
',52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,',
',18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,',
',,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77',
'78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292',
'67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51',
'87,86,88,,89,97,98,,83,84,,,295,,,,,,,,,,,,,,,,,,,,846,,,217,,,53,54',
',,55,,,,,,,,,,,,,,,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
',,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55,,281,,,,,,,,,,,,,,,',
',82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,384,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,',
'64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98',
',83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,',
',,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67',
'68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
'270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,457,54,',
',55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,,,,',
',216,,,,,82,74,77,78,,79,80,,,,75,81,207,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,',
',,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54',
',,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,',
',,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,',
',,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68',
',,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,,,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,,55',
',,,,,,,,,,,,,,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82',
'74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63',
'291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,8,42,,10,95,94,96,85,51,87,86,88,,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,,,41,,,,,,,,19',
',,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95',
'94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211',
',,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25',
'91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83',
'84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,',
',,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,',
',,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,',
'79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86',
'88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,',
'55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52',
'57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92',
'93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,,,41,,,,,,,,216,,,,',
'82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94',
'96,85,51,87,86,88,,89,97,98,,83,84,,,295,226,230,235,236,237,232,234',
'242,243,238,239,,219,220,,,240,241,,285,,,217,,,53,54,,,55,,,223,,229',
',225,224,221,222,233,231,227,,228,,,,82,74,77,78,,79,80,,,,75,81,,244',
',478,,,57,,76,64,65,66,,52,,,,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268',
',266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28',
'29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87',
'86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53',
'54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84',
'39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,268,,266,,41,,,',
',,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,',
',,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,',
',95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,',
',,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,',
',75,81,,64,65,66,9,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,91,90,92,93,,,18,,,,,,8,42,7,10,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,37,,,31,,,53,54,,,55,,33,,',
',41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,289,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,,,295,,,,,,,,,',
',,,,,,,,,,285,,,282,,,53,54,,,55,,,,,,,,,,,,,,,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,',
',,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74',
'77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291',
'292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,',
',53,54,,,55,,724,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64',
'65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91',
'90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39',
'40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,',
',,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94',
'96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,',
',217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,496,,53,54,,,55,,,,,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,',
',,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,',
'27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,',
',27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97',
'98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41',
',,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59',
',,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42',
',,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,',
',,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80',
',,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,',
',,,287,288,294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88',
',89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55',
',,,,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57',
',76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93',
',,218,,,,,,,42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38',
',,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,,41,,,,,,,,216,',
',,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60',
'61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96',
'85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65',
'66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90',
'92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40',
'38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,',
'82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61',
'63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85',
'51,87,86,88,270,89,97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217',
',,53,54,,,55,,268,,266,,41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81',
',64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288',
'294,91,90,92,93,,,218,,,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,',
'83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,629,,266,',
'41,,,,,,,,216,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,291,292,67,68,,,,,,287,288,294,91,90,92,93,,,218',
',,,,,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,',
',,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,216,,,,,82,74,77,78',
',79,80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,291,292,67',
'68,,,,,,287,288,294,91,90,92,93,,,218,,,,,,,289,,,95,94,96,85,51,87',
'86,88,,89,97,98,,83,84,,,295,,,,,,,,,,,,,,,,,,,,285,,,282,,,53,54,,',
'55,,,,,,,,,,,,,,,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76',
'58,59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,18,,,',
',,,42,,,95,94,96,85,51,87,86,88,,89,97,98,,83,84,39,40,38,,,,,,,,,,',
',,,,,,,,,211,,,217,,,53,54,,,55,,,,,,41,,,,,,,,19,,,,,82,74,77,78,,79',
'80,,,,75,81,,64,65,66,,52,57,,76,58,59,,,,62,,60,61,63,28,29,67,68,',
',,,,27,26,25,91,90,92,93,,,18,,,,,,,42,,,95,94,96,85,51,87,86,88,,89',
'97,98,,83,84,39,40,38,,,,,,,,,,,,,,,,,,,,211,,,217,,,53,54,,,55,,,,',
',41,,,,,,,,19,,,,,82,74,77,78,,79,80,,,,75,81,,64,65,66,,52,57,,76,58',
'59,,,,62,,60,61,63,28,29,67,68,,,,,,27,26,25,91,90,92,93,,,218,,,,,',
',42,,,95,94,96,85,51,87,86,88,270,89,97,98,,83,84,39,40,38,226,230,235',
'236,237,232,234,242,243,238,239,,219,220,,,240,241,,211,,,217,,,53,54',
',,55,,268,223,266,229,41,225,224,221,222,233,231,227,216,228,,,,82,74',
'77,78,,79,80,,,,75,81,207,244,-293,,,,57,,76,-293,-293,-293,,,-293,-293',
'-293,,-293,,,,,,,,,,-293,-293,,,,,,,,,-293,-293,,-293,-293,-293,-293',
'-293,,,,,,,,,,,,,,,,,,,,,,,-293,-293,-293,-293,-293,-293,-293,-293,-293',
'-293,-293,-293,-293,-293,,,-293,-293,-293,,,-293,,259,-293,,,-293,-293',
',-293,,-293,,-293,,-293,-293,-293,-293,-293,-293,-293,-239,-293,,-293',
',,,-239,-239,-239,,,-239,-239,-239,,-239,-293,-293,,-293,,-293,,,,-239',
',,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,,,,,,,,,,,,-239,,,,,,,-239',
'-239,-239,,,-239,-239,-239,,-239,,,,,,-239,,,,-239,,,-239,,,,,250,-239',
'-239,-239,,-239,-239,-239,-239,-239,,,,,,,,,,,,,,-239,,,,,,,,,-239,',
',,,-239,,-239,-239,-239,-239,-239,-239,-239,-239,,-239,,-239,,,,,250',
'-239,-239,-239,-239,,,,,,,,,-239,-239,,-239,-239,-239,-239,-239,,,-239',
',,,,,,,,,,,,,-239,,,,,-239,-239,-239,-239,-239,-239,-239,-239,-239,-239',
'-239,-239,-239,-239,-239,,,-239,-239,-239,,,-239,,250,-239,,,-239,-239',
',-239,,-239,,-239,,-239,-239,-239,-239,-239,-239,-239,-398,-239,-239',
'-239,,,,-398,-398,-398,,,-398,-398,-398,,-398,-239,-239,,-239,,-239',
',,-398,-398,-398,,,,,,,,,-398,-398,,-398,-398,-398,-398,-398,,,,,,,',
',,,,,,,,,,,,,,,-398,-398,-398,-398,-398,-398,-398,-398,-398,-398,-398',
'-398,-398,-398,,,-398,-398,-398,,,-398,,250,-398,,,-398,-398,,-398,',
'-398,,-398,,-398,-398,-398,-398,-398,-398,-398,,-398,-398,-398,,,,,',
',,,,,,,,-398,-398,,-398,,-398,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
'113,,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190',
'184,167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183',
'182,175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116',
',,115,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184',
'167,166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182',
'175,185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
',,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184,167',
'166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,182,175',
'185,170,158,177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115,',
',,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
',,151,82,,,,,,,,,,,81,162,173,163,186,159,179,169,168,189,190,184,167',
'166,161,187,191,192,171,160,174,178,180,172,165,,,,181,188,183,352,351',
'353,350,158,177,176,,,,,,157,164,155,156,347,348,349,345,116,87,86,346',
',89,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,357,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145',
'124,,,151,162,173,163,186,159,179,169,168,189,190,184,167,166,161,187',
'191,192,171,160,174,178,180,172,165,,,,181,188,183,182,175,185,170,158',
'177,176,,,,,,157,164,155,156,152,153,154,114,116,,,115,,,,,,,,147,148',
',144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,,,,,',
',,,141,140,,125,146,143,142,138,139,133,131,123,145,124,600,397,151',
',601,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,694,404,151,,695,,,,,,,,147,148,,144,126,127,128,135,132,134',
',,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142',
'138,139,133,131,123,145,124,602,404,151,,603,,,,,,,,147,148,,144,126',
'127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141',
'140,,125,146,143,142,138,139,133,131,123,145,124,951,404,151,,950,,',
',,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137',
',,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
'697,404,151,,698,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130',
',,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139',
'133,131,123,145,124,393,397,151,,394,,,,,,,,147,148,,144,126,127,128',
'135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125',
'146,143,142,138,139,133,131,123,145,124,449,397,151,,450,,,,,,,,147',
'148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250',
',,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,638,397',
'151,,639,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149',
'150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131',
'123,145,124,641,404,151,,642,,,,,,,,147,148,,144,126,127,128,135,132',
'134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143',
'142,138,139,133,131,123,145,124,692,397,151,,693,,,,,,,,147,148,,144',
'126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,',
',141,140,,125,146,143,142,138,139,133,131,123,145,124,449,397,151,,450',
',,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150,136',
'137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124',
'449,397,151,,450,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130',
',,,149,150,136,137,,,,,,,,,,,,,,141,140,,125,146,143,142,138,139,133',
'131,123,145,124,400,404,151,,399,,,,,,,,147,148,,144,126,127,128,135',
'132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146',
'143,142,138,139,133,131,123,145,124,602,404,151,,603,,,,,,,,147,148',
',144,126,127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,',
',,,,,,141,140,,125,146,143,142,138,139,133,131,123,145,124,600,397,151',
',601,,,,,,,,147,148,,144,126,127,128,135,132,134,,,129,130,,,,149,150',
'136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142,138,139,133,131,123',
'145,124,932,397,151,,933,,,,,,,,147,148,,144,126,127,128,135,132,134',
',,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141,140,,125,146,143,142',
'138,139,133,131,123,145,124,934,404,151,,935,,,,,,,,147,148,,144,126',
'127,128,135,132,134,,,129,130,,,,149,150,136,137,,,,,,250,,,,,,,,141',
'140,,125,146,143,142,138,139,133,131,123,145,124,,,151,226,230,235,236',
'237,232,234,242,243,238,239,,219,220,,,240,241,,,,,,,,,,,,,,,223,,229',
',225,224,221,222,233,231,227,,228,,226,230,235,236,237,232,234,242,243',
'238,239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222',
'233,231,227,,228,,226,230,235,236,237,232,234,242,243,238,239,,219,220',
',244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228',
',226,230,235,236,237,232,234,242,243,238,239,,219,220,,244,240,241,',
',,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228,,226,230,235',
'236,237,232,234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,',
'223,,229,,225,224,221,222,233,231,227,,228,,226,230,235,236,237,232',
'234,242,243,238,239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225',
'224,221,222,233,231,227,,228,,226,230,235,236,237,232,234,242,243,238',
'239,,219,220,,244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233',
'231,227,,228,,226,230,235,236,237,232,234,242,243,238,239,,219,220,',
'244,240,241,,,,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228',
',226,230,235,236,237,232,234,242,243,238,239,,219,220,,244,240,241,',
',,,,,,,,,,,,,223,,229,,225,224,221,222,233,231,227,,228,,,,,,,,,,,,',
',,,,244' ]
        racc_action_table = arr = ::Array.new(23600, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'400,360,953,321,933,772,56,400,400,400,521,411,411,400,400,341,400,337',
'618,649,649,337,363,803,18,400,633,24,932,690,702,312,633,364,312,702',
'400,400,72,400,400,400,400,400,322,545,345,72,210,694,693,692,328,345',
'509,867,901,72,521,934,618,18,360,360,360,695,400,400,400,400,400,400',
'400,400,400,400,400,400,400,400,804,331,400,400,400,363,400,557,557',
'677,400,24,56,400,364,364,364,210,400,678,400,411,400,400,400,400,400',
'400,400,649,400,400,400,24,694,638,953,321,933,772,341,953,321,933,772',
'85,400,400,803,400,695,400,85,85,85,400,934,85,85,85,341,85,932,690',
'537,341,690,932,690,85,545,85,85,85,694,693,692,328,322,509,290,85,85',
'322,85,85,85,85,85,867,695,563,563,934,867,639,459,557,934,313,804,638',
'557,113,538,804,331,212,113,113,417,85,85,85,85,85,85,85,85,85,85,85',
'85,85,85,683,447,85,85,85,459,85,85,361,615,85,36,638,85,85,638,85,751',
'85,290,85,638,85,85,85,85,85,85,85,688,85,212,85,574,417,447,639,359',
'872,537,872,290,669,615,537,641,85,85,85,85,88,85,742,85,36,85,563,88',
'88,88,36,600,88,88,88,751,88,16,16,361,361,361,639,458,88,639,88,88',
'88,538,273,639,691,697,538,273,88,88,662,88,88,88,88,88,574,574,308',
'641,359,359,359,742,362,574,641,307,3,458,346,641,600,3,601,641,765',
'346,88,88,88,88,88,88,88,88,88,88,88,88,88,88,304,641,88,88,88,697,88',
'88,309,309,88,587,697,88,88,336,88,697,88,314,88,697,88,88,88,88,88',
'88,88,301,88,601,88,362,362,362,765,708,658,697,654,658,708,765,335',
'393,88,88,88,88,603,88,765,88,587,88,394,603,603,603,587,15,603,603',
'603,888,603,336,284,700,765,300,888,347,336,284,603,603,603,336,347',
'888,311,336,284,311,603,603,393,603,603,603,603,603,393,642,335,315',
'299,394,315,336,642,335,15,394,352,642,335,556,15,642,335,352,556,653',
'603,603,603,603,603,603,603,603,603,603,603,603,603,603,335,705,603',
'603,603,283,603,603,423,316,603,299,283,603,603,650,603,299,603,648',
'603,283,603,603,603,603,603,603,603,296,603,647,603,608,351,608,608',
'608,608,608,423,351,943,943,423,423,603,603,603,603,602,603,294,603',
'348,603,723,602,602,602,289,348,602,602,602,349,602,329,325,288,608',
'644,349,325,329,602,602,602,602,608,608,608,608,329,38,38,602,602,23',
'602,602,602,602,602,285,23,676,643,676,676,676,676,676,326,863,355,863',
'863,863,863,863,280,355,608,681,681,602,602,602,602,602,602,602,602',
'602,602,602,602,602,602,279,350,602,602,602,698,602,602,350,278,602',
'276,698,602,602,640,602,698,602,327,602,698,602,602,602,602,602,602',
'602,399,602,602,602,353,43,637,399,399,399,744,353,43,399,399,676,399',
'602,602,602,602,43,602,863,602,864,602,864,864,864,864,864,320,320,295',
'295,399,399,745,399,399,399,399,399,746,748,749,635,960,548,960,960',
'960,960,960,790,548,790,790,790,790,790,864,330,753,548,399,399,399',
'399,399,399,399,399,399,399,399,399,399,399,267,264,399,399,399,960',
'399,758,759,760,399,263,790,399,764,249,960,960,399,218,399,790,399',
'399,399,399,399,399,399,214,399,424,399,213,822,776,822,822,822,822',
'822,6,6,6,6,6,399,399,777,399,778,399,779,780,783,399,701,701,701,701',
'701,701,784,424,786,701,701,424,424,789,701,822,701,701,701,701,701',
'701,701,332,822,822,822,822,701,701,701,701,701,701,701,791,524,701',
'524,524,524,524,524,701,701,628,701,701,701,701,701,701,701,701,701',
'794,701,701,701,626,701,701,701,701,701,673,797,673,673,673,673,673',
'668,524,668,668,668,668,668,302,211,14,524,621,701,619,302,701,14,193',
'701,701,606,99,701,302,701,14,806,604,701,937,673,937,937,937,937,937',
'701,668,810,673,811,701,701,701,701,814,701,701,668,668,815,701,701',
'558,558,558,558,558,558,701,596,701,558,558,42,591,937,558,588,558,558',
'558,558,558,558,558,373,937,937,379,827,558,558,558,558,558,558,558',
'567,567,558,828,567,567,567,382,558,558,37,558,558,558,558,558,558,558',
'558,558,834,558,558,558,835,558,558,558,558,558,382,382,382,382,382',
'382,382,382,382,382,382,483,382,382,844,837,382,382,483,558,841,844',
'558,584,385,558,558,483,387,558,844,558,382,846,382,558,382,382,382',
'382,382,382,382,558,382,577,391,571,558,558,558,558,401,558,558,413',
'35,286,558,558,425,382,404,382,286,865,558,426,558,404,404,404,869,286',
'404,404,404,852,404,852,852,852,852,852,935,870,427,404,404,404,404',
'935,875,540,880,881,935,882,404,404,935,404,404,404,404,404,887,883',
'887,887,887,885,887,908,852,908,908,908,908,908,539,428,889,852,852',
'852,852,21,404,404,404,404,404,404,404,404,404,404,404,404,404,404,534',
'443,404,404,404,339,896,404,908,532,404,529,339,404,404,522,404,514',
'404,675,404,339,404,404,404,404,404,404,404,847,404,404,404,443,845',
'902,847,443,443,443,443,845,903,904,905,847,404,404,404,404,845,404',
'513,404,917,917,917,917,917,917,907,512,209,917,917,13,12,11,917,209',
'917,917,917,917,917,917,917,500,209,497,488,10,917,917,917,917,917,917',
'917,929,792,917,792,792,792,792,792,917,917,931,917,917,917,917,917',
'917,917,917,917,7,917,917,917,484,917,917,917,917,917,941,479,941,941',
'941,941,941,855,792,855,855,855,855,855,900,454,477,474,942,917,473',
'900,917,944,945,917,917,946,947,917,900,917,948,949,950,917,923,941',
'923,923,923,923,923,917,855,951,1,954,917,917,917,917,955,917,917,855',
'855,460,917,917,915,915,915,915,915,915,917,965,917,915,915,,,923,915',
',915,915,915,915,915,915,915,,923,923,,,915,915,915,915,915,915,915',
',906,915,906,906,906,906,906,915,915,,915,915,915,915,915,915,915,915',
'915,,915,915,915,,915,915,915,915,915,750,,750,750,750,,750,857,906',
'857,857,857,857,857,472,472,472,472,472,915,,,915,,,915,915,,,915,,915',
',,,915,859,,859,859,859,859,859,915,857,,,,915,915,915,915,,915,915',
'857,857,,915,915,909,909,909,909,909,909,915,,915,909,909,,,859,909',
',909,909,909,909,909,909,909,,859,859,,,909,909,909,909,909,909,909',
',,909,,,,,605,909,909,,909,909,909,909,909,909,909,909,909,,909,909',
'909,,909,909,909,909,909,605,605,605,605,605,605,605,605,605,605,605',
',605,605,,,605,605,,909,,,909,,,909,909,,,909,,909,605,,605,909,605',
'605,605,605,605,605,605,909,605,,,,909,909,909,909,,909,909,,,,909,909',
',605,405,,,,909,,909,405,405,405,,,405,405,405,665,405,665,665,665,665',
'665,,,,405,405,405,405,274,274,274,274,274,,,405,405,,405,405,405,405',
'405,632,632,632,632,632,,,,665,,,,,,,,,665,665,665,665,,405,405,405',
'405,405,405,405,405,405,405,405,405,405,405,,442,405,405,405,,,405,',
',405,,,405,405,,405,,405,,405,,405,405,405,405,405,405,405,,405,405',
'405,442,,,,442,442,442,442,,,,,,405,405,405,405,,405,,405,610,610,610',
'610,610,610,,,,610,610,,,,610,,610,610,610,610,610,610,610,,,,,,610',
'610,610,610,610,610,610,,,610,,,,,,610,610,,610,610,610,610,610,610',
'610,610,610,,610,610,610,,610,610,610,610,610,,,,,,,,921,,921,921,921',
'921,921,,,,,,610,,,610,,,610,610,,,610,,610,,,,610,825,,825,825,825',
'825,825,610,921,,,,610,610,610,610,,610,610,921,921,,610,610,623,623',
'623,623,623,623,610,,610,623,623,,,825,623,,623,623,623,623,623,623',
'623,,825,825,,,623,623,623,623,623,623,623,,,623,,,,,,623,623,,623,623',
'623,623,623,623,623,623,623,,623,623,623,,623,623,623,623,623,421,421',
'421,421,421,421,421,421,421,421,421,,421,421,,,421,421,,623,,,623,,',
'623,623,,,623,,623,421,,421,623,421,421,421,421,421,421,421,623,421',
',,,623,623,623,623,,623,623,,,,623,623,624,624,624,624,624,624,623,',
'623,624,624,,,,624,,624,624,624,624,624,624,624,,,,,,624,624,624,624',
'624,624,624,,,624,,,,,,624,624,,624,624,624,624,624,624,624,624,624',
',624,624,624,,624,624,624,624,624,439,439,439,439,439,439,439,,,439',
'439,,,,,,439,439,,624,,,624,,,624,624,,,624,,624,439,,439,624,439,439',
'439,439,439,439,439,624,439,,,,624,624,624,624,,624,624,,,,624,624,652',
'652,652,652,652,652,624,,624,652,652,,,,652,,652,652,652,652,652,652',
'652,,,,,,652,652,652,652,652,652,652,,,652,,,,,,652,652,,652,652,652',
'652,652,652,652,652,652,,652,652,652,,652,652,652,652,652,444,444,444',
'444,444,444,444,,,444,444,,,,,,444,444,,652,,,652,,,652,652,,,652,,652',
'444,,444,652,444,444,444,444,444,444,444,652,444,,,,652,652,652,652',
',652,652,,,,652,652,660,660,660,660,660,660,652,,652,660,660,,,,660',
',660,660,660,660,660,660,660,,,,,,660,660,660,660,660,660,660,,,660',
',,,,,660,660,,660,660,660,660,660,660,660,660,660,,660,660,660,,660',
'660,660,660,660,438,438,438,438,438,438,438,,,438,438,,,,,,438,438,',
'660,,,660,,,660,660,,,660,,660,438,,438,660,438,438,438,438,438,438',
'438,660,438,,,,660,660,660,660,,660,660,,,,660,660,661,661,661,661,661',
'661,660,,660,661,661,,,,661,,661,661,661,661,661,661,661,,,,,,661,661',
'661,661,661,661,661,,,661,,,,,,661,661,,661,661,661,661,661,661,661',
'661,661,,661,661,661,,661,661,661,661,661,445,445,445,445,445,445,445',
'445,,445,445,,,,,,445,445,,661,,,661,,,661,661,,,661,,661,445,,445,661',
'445,445,445,445,445,445,445,661,445,,,,661,661,661,661,,661,661,,,,661',
'661,0,0,0,0,0,0,661,,661,0,0,,,,0,,0,0,0,0,0,0,0,,,,,,0,0,0,0,0,0,0',
',,0,,,,,,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0,0,0,0,432,432,432,432,432',
'432,432,,,432,432,,,,,,432,432,,0,,,0,,,0,0,,,0,,0,432,,432,0,432,432',
'432,432,432,432,432,0,432,,,,0,0,0,0,,0,0,,,,0,0,706,706,706,706,706',
'706,0,,0,706,706,,,,706,,706,706,706,706,706,706,706,,,,,,706,706,706',
'706,706,706,706,,,706,,,,,,706,706,,706,706,706,706,706,706,706,706',
'706,,706,706,706,,706,706,706,706,706,433,,,,,,,,,,,,,,,,433,433,,706',
',,706,,,706,706,,,706,,706,433,,433,706,433,433,433,433,,,433,706,433',
',,,706,706,706,706,,706,706,,,,706,706,716,716,716,716,716,716,706,',
'706,716,716,,,,716,,716,716,716,716,716,716,716,,,,,,716,716,716,716',
'716,716,716,,,716,,,,,,716,716,,716,716,716,716,716,716,716,716,716',
',716,716,716,,716,716,716,716,716,437,437,437,437,437,437,437,,,437',
'437,,,,,,437,437,,716,,,716,,,716,716,,,716,,716,437,,437,716,437,437',
'437,437,437,437,437,716,437,,,,716,716,716,716,,716,716,,,,716,716,282',
'282,282,282,282,282,716,,716,282,282,,,,282,,282,282,282,282,282,282',
'282,,,,,,282,282,282,282,282,282,282,,,282,,,,,,282,282,,282,282,282',
'282,282,282,282,282,282,,282,282,282,,282,282,282,282,282,435,,,,,,',
',,,,,,,,,435,435,,282,,,282,,,282,282,,,282,,282,435,,435,282,435,435',
'435,435,,,435,282,435,,,,282,282,282,282,,282,282,,,,282,282,277,277',
'277,277,277,277,282,,282,277,277,,,,277,,277,277,277,277,277,277,277',
',,,,,277,277,277,277,277,277,277,,,277,,,,,,277,277,,277,277,277,277',
'277,277,277,277,277,,277,277,277,,277,277,277,277,277,436,,,,,,,,,,',
',,,,,436,436,,277,,,277,,,277,277,,,277,,277,436,,436,277,436,436,436',
'436,,,436,277,436,,,,277,277,277,277,,277,277,,,,277,277,754,754,754',
'754,754,754,277,,277,754,754,,,,754,,754,754,754,754,754,754,754,,,',
',,754,754,754,754,754,754,754,,,754,,,,,,754,754,,754,754,754,754,754',
'754,754,754,754,,754,754,754,,754,754,754,754,754,440,440,440,440,440',
'440,440,,,440,440,,,,,,440,440,,754,,,754,,,754,754,,,754,,754,440,',
'440,754,440,440,440,440,440,440,440,754,440,,,,754,754,754,754,,754',
'754,,,,754,754,769,769,769,769,769,769,754,,754,769,769,,,,769,,769',
'769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769,,,769,,,,,',
'769,769,,769,769,769,769,769,769,769,769,769,,769,769,769,,769,769,769',
'769,769,441,441,441,441,441,441,441,,,441,441,,,,,,441,441,,769,,,769',
',,769,769,,,769,,769,441,,441,769,441,441,441,441,441,441,441,769,441',
',,,769,769,769,769,,769,769,,,,769,769,31,31,31,31,31,31,769,,769,31',
'31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31,31,,,31,,,,,,31',
'31,,31,31,31,31,31,31,31,31,31,,31,31,31,,31,31,31,31,31,422,422,422',
'422,422,422,422,422,422,422,422,,422,422,,,422,422,,31,,,31,,,31,31',
',,31,,31,422,,422,31,422,422,422,422,422,422,422,31,422,,,,31,31,31',
'31,,31,31,,,,31,31,217,217,217,217,217,217,31,,31,217,217,,,,217,,217',
'217,217,217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,',
'217,217,,217,217,217,217,217,217,217,217,217,,217,217,217,,217,217,217',
'217,217,434,,,,,,,,,,,,,,,,434,434,,217,,,217,,,217,217,,,217,,217,434',
',434,217,434,434,434,434,,,434,217,434,,,,217,217,217,217,,217,217,',
',,217,217,798,798,798,798,798,798,217,,217,798,798,,,,798,,798,798,798',
'798,798,798,798,,,,,,798,798,798,798,798,798,798,,,798,,,,,,798,798',
',798,798,798,798,798,798,798,798,798,,798,798,798,,798,798,798,798,798',
'430,,,,,,,,,,,,,,,,430,430,,798,,,798,,,798,798,,,798,,798,430,,430',
'798,430,430,430,430,,,,798,,,,,798,798,798,798,,798,798,,,,798,798,799',
'799,799,799,799,799,798,,798,799,799,,,,799,,799,799,799,799,799,799',
'799,,,,,,799,799,799,799,799,799,799,,,799,,,,,,799,799,,799,799,799',
'799,799,799,799,799,799,,799,799,799,,799,799,799,799,799,429,,,,,,',
',,,,,,,,,429,429,,799,,,799,,,799,799,,,799,,799,429,,429,799,429,429',
'429,429,,,,799,,,,,799,799,799,799,,799,799,,,,799,799,843,843,843,843',
'843,843,799,,799,843,843,,,,843,,843,843,843,843,843,843,843,,,,,,843',
'843,843,843,843,843,843,,,843,,,,,,843,843,,843,843,843,843,843,843',
'843,843,843,,843,843,843,,843,843,843,843,843,431,,,,,,,,,,,,,,,,431',
'431,,843,,,843,,,843,843,,,843,,843,431,,,843,431,431,431,431,,,,843',
',,,,843,843,843,843,,843,843,,,,843,843,195,195,195,195,195,195,843',
',843,195,195,,,,195,,195,195,195,195,195,195,195,,,,,,195,195,195,195',
'195,195,195,,,195,,,,,,195,195,,195,195,195,195,195,195,195,195,195',
',195,195,195,,195,195,195,195,195,,,,,,,,,,,,,,,,,,,,195,,,195,,,195',
'195,,,195,,195,,,,195,,,,,,,,195,,,,,195,195,195,195,,195,195,,,,195',
'195,802,802,802,802,802,802,195,,195,802,802,,,,802,,802,802,802,802',
'802,802,802,,,,,,802,802,802,802,802,802,802,,,802,,,,,,802,802,,802',
'802,802,802,802,802,802,802,802,,802,802,802,,802,802,802,802,802,,',
',,,,,,,,,,,,,,,,,802,,,802,,,802,802,,,802,,802,,,,802,,,,,,,,802,,',
',,802,802,802,802,,802,802,,,,802,802,111,111,111,111,111,111,802,,802',
'111,111,,,,111,,111,111,111,111,111,111,111,,,,,,111,111,111,111,111',
'111,111,,,111,,,,,,111,111,111,111,111,111,111,111,111,111,111,111,',
'111,111,111,,111,111,111,111,111,,,,,,,,,,,,,,,,,,,,111,,,111,,,111',
'111,,,111,,111,,,,111,,,,,,,,111,,,,,111,111,111,111,,111,111,,,,111',
'111,536,536,536,536,536,536,111,,111,536,536,,,,536,,536,536,536,536',
'536,536,536,,,,,,536,536,536,536,536,536,536,,,536,,,,,,536,536,,536',
'536,536,536,536,536,536,536,536,,536,536,536,,536,536,536,536,536,,',
',,,,,,,,,,,,,,,,,536,,,536,,,536,536,,,536,,536,,,,536,,,,,,,,536,,',
',,536,536,536,536,,536,536,,,,536,536,533,533,533,533,533,533,536,,536',
'533,533,,,,533,,533,533,533,533,533,533,533,,,,,,533,533,533,533,533',
'533,533,,,533,,,,,,533,533,,533,533,533,533,533,533,533,533,533,,533',
'533,533,,533,533,533,533,533,,,,,,,,,,,,,,,,,,,,533,,,533,,,533,533',
',,533,,533,,,,533,,,,,,,,533,,,,,533,533,533,533,,533,533,,,,533,533',
'808,808,808,808,808,808,533,,533,808,808,,,,808,,808,808,808,808,808',
'808,808,,,,,,808,808,808,808,808,808,808,,,808,,,,,,808,808,,808,808',
'808,808,808,808,808,808,808,,808,808,808,,808,808,808,808,808,,,,,,',
',,,,,,,,,,,,,808,,,808,,,808,808,,,808,,808,,,,808,,,,,,,,808,,,,,808',
'808,808,808,,808,808,,,,808,808,52,52,52,52,52,52,808,,808,52,52,,,',
'52,,52,52,52,52,52,52,52,,,,,,52,52,52,52,52,52,52,,,52,,,,,390,52,52',
',52,52,52,52,52,52,52,52,52,,52,52,52,,52,52,52,52,52,390,390,390,390',
'390,390,390,390,390,390,390,,390,390,,,390,390,,52,,,52,,,52,52,,,52',
',52,390,,390,52,390,390,390,390,390,390,390,52,390,,,,52,52,52,52,,52',
'52,,,,52,52,,390,51,,,,52,,52,51,51,51,,,51,51,51,559,51,559,559,559',
'559,559,,,,,51,51,51,,,,,,,,51,51,,51,51,51,51,51,,,,,,,,,559,559,,',
',,,,,559,559,559,559,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,,,51',
'51,51,,,51,,,51,,,51,51,,51,,51,,51,,51,51,51,51,51,51,51,,51,663,51',
'663,663,663,663,663,,,,,,,,,51,51,51,51,,51,,51,230,230,230,,230,,,',
'230,230,,,,230,663,230,230,230,230,230,230,230,,663,663,663,663,230',
'230,230,230,230,230,230,,,230,,,,,,,230,,,230,230,230,230,230,230,230',
'230,,230,230,230,,230,230,230,230,230,,,,,,,,,,,,,,,,,,,,230,,,230,',
',230,230,,,230,,,,,,230,,,,,,,,230,,,,,230,230,230,230,,230,230,,,,230',
'230,,53,53,53,,53,230,,230,53,53,,,,53,,53,53,53,53,53,53,53,,,,,,53',
'53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53,53,,53,53,53',
',53,53,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,,53,,,,,,53,,,,',
',,,53,,,,,53,53,53,53,,53,53,,,,53,53,,54,54,54,,54,53,,53,54,54,,,',
'54,,54,54,54,54,54,54,54,,,,,,54,54,54,54,54,54,54,,,54,,,,,,,54,,,54',
'54,54,54,54,54,54,54,54,54,54,54,,54,54,54,54,54,,,,,,,,,,,,,,,,,,,',
'54,,,54,,,54,54,,,54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,,54,54,,,,54',
'54,,55,55,55,,55,54,,54,55,55,,,,55,,55,55,55,55,55,55,55,,,,,,55,55',
'55,55,55,55,55,,,55,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,55,55,',
'55,55,55,55,55,,,,,,,,,,,,,,,,,,,,55,,,55,,,55,55,,,55,,,,,,55,,,,,',
',,55,,,,,55,55,55,55,,55,55,,,,55,55,,465,465,465,,465,55,,55,465,465',
',,,465,,465,465,465,465,465,465,465,,,,,,465,465,465,465,465,465,465',
',,465,,,,,,,465,,,465,465,465,465,465,465,465,465,465,465,465,465,,465',
'465,465,465,465,,,,,,,,,,,,,,,,,,,,465,,,465,,,465,465,,,465,,,,465',
',465,,,,,,,,465,,,,,465,465,465,465,,465,465,,,,465,465,,58,58,58,,58',
'465,,465,58,58,,,,58,,58,58,58,58,58,58,58,,,,,,58,58,58,58,58,58,58',
',,58,,,,,,,58,,,58,58,58,58,58,58,58,58,,58,58,58,,58,58,58,58,58,,',
',,,,,,,,,,,,,,,,,58,,,58,,,58,58,,,58,,,,,,58,,,,,,,,58,,,,,58,58,58',
'58,,58,58,,,,58,58,,59,59,59,,59,58,,58,59,59,,,,59,,59,59,59,59,59',
'59,59,,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59',
'59,,59,59,59,,59,59,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59',
',,,,,59,,,,,,,,59,,,,,59,59,59,59,,59,59,,,,59,59,,62,62,62,,62,59,',
'59,62,62,,,,62,,62,62,62,62,62,62,62,,,,,,62,62,62,62,62,62,62,,,62',
',,,,,,62,,,62,62,62,62,62,62,62,62,,62,62,62,,62,62,62,62,62,617,617',
'617,617,617,617,617,617,617,617,617,,617,617,,,617,617,,62,,617,62,',
',62,62,,,62,,,617,,617,62,617,617,617,617,617,617,617,62,617,,,,62,62',
'62,62,,62,62,,,,62,62,62,617,,617,,62,62,,62,63,63,63,,63,,,,63,63,',
',,63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,',
',63,63,63,63,63,63,63,63,,63,63,63,,63,63,,319,63,319,319,319,319,319',
',,,,,,,,,,,,,,63,,,63,,,63,63,,,63,,63,,,,319,319,,,,,,,,319,319,319',
'319,63,63,63,63,,63,63,,,,63,63,,64,64,64,,64,63,,63,64,64,,,,64,,64',
'64,64,64,64,64,64,,,,,,64,64,64,64,64,64,64,,,64,,,,,,,64,,,64,64,64',
'64,64,64,64,64,,64,64,64,,64,64,,820,64,820,820,820,820,820,,,,,,,,',
',,,64,,,64,,,64,,,64,64,,,64,,,,,,820,,,,,,,,,820,820,820,820,64,64',
'64,64,,64,64,,,,64,64,,65,65,65,,65,64,,64,65,65,,,,65,,65,65,65,65',
'65,65,65,,,,,,65,65,65,65,65,65,65,,,65,,,,,,,65,,,65,65,65,65,65,65',
'65,65,,65,65,65,,65,65,,707,65,707,707,707,707,707,,,,,,,,,,,,,,,65',
',,65,,,65,65,,,65,,,,,,707,,,,,,,,,707,707,707,707,65,65,65,65,,65,65',
',,,65,65,,467,467,467,,467,65,,65,467,467,,,,467,,467,467,467,467,467',
'467,467,,,,,,467,467,467,467,467,467,467,,,467,,,,,,,467,,,467,467,467',
'467,467,467,467,467,,467,467,467,,467,467,467,467,467,,,,,,,,,,,,,,',
',,,,,467,,,467,,,467,467,,,467,,,,,,467,,,,,,,,467,,,,,467,467,467,467',
',467,467,,,,467,467,,818,818,818,,818,467,,467,818,818,,,,818,,818,818',
'818,818,818,818,818,,,,,,818,818,818,818,818,818,818,,,818,,,,,,,818',
',,818,818,818,818,818,818,818,818,,818,818,818,,818,818,818,818,818',
',,,,,,,,,,,,,,,,,,,818,,,818,,,818,818,,,818,,,,,,818,,,,,,,,818,,,',
',818,818,818,818,,818,818,,,,818,818,,41,41,41,,41,818,,818,41,41,,',
',41,,41,41,41,41,41,41,41,,,,,,41,41,41,41,41,41,41,,,41,,,,,,,41,,',
'41,41,41,41,41,41,41,41,,41,41,41,,41,41,41,41,41,,,,,,,,,,,,,,,,,,',
',41,,,41,,,41,41,,,41,,,,,,41,,,,,,,,41,,,,,41,41,41,41,,41,41,,,,41',
'41,,40,40,40,,40,41,,41,40,40,,,,40,,40,40,40,40,40,40,40,,,,,,40,40',
'40,40,40,40,40,,,40,,,,,,,40,,,40,40,40,40,40,40,40,40,,40,40,40,,40',
'40,40,40,40,,,,,,,,,,,,,,,,,,,,40,,,40,,,40,40,,,40,,,,,,40,,,,,,,,40',
',,,,40,40,40,40,,40,40,,,,40,40,,471,471,471,471,471,40,,40,471,471',
',,,471,,471,471,471,471,471,471,471,,,,,,471,471,471,471,471,471,471',
',,471,,,,,,471,471,,471,471,471,471,471,471,471,471,471,,471,471,471',
',471,471,471,471,471,731,731,731,731,731,731,731,731,731,731,731,,731',
'731,,,731,731,,471,,,471,,,471,471,,,471,,471,731,,731,471,731,731,731',
'731,731,731,731,471,731,,,,471,471,471,471,,471,471,,,,471,471,,731',
',,,471,471,,471,101,101,101,101,101,,,,101,101,,,,101,,101,101,101,101',
'101,101,101,,,,,,101,101,101,101,101,101,101,,,101,,,,,,101,101,101',
'101,101,101,101,101,101,101,101,101,,101,101,101,,101,101,101,101,101',
'495,495,495,495,495,495,495,495,495,495,495,,495,495,,,495,495,,101',
',,101,,,101,101,,,101,,101,495,,495,101,495,495,495,495,495,495,495',
'101,495,,,,101,101,101,101,,101,101,,,,101,101,,495,,,,101,101,,101',
'106,106,106,,106,,,,106,106,,,,106,,106,106,106,106,106,106,106,,,,',
',106,106,106,106,106,106,106,,,106,,,,,,,106,,,106,106,106,106,106,106',
'106,106,,106,106,106,,106,106,106,106,106,,,,,,,,,,,,,,,,,,,,106,,,106',
',,106,106,,,106,,,,,,106,,,,,,,,106,,,,,106,106,106,106,,106,106,,,',
'106,106,,107,107,107,,107,106,,106,107,107,,,,107,,107,107,107,107,107',
'107,107,,,,,,107,107,107,107,107,107,107,,,107,,,,,,,107,,,107,107,107',
'107,107,107,107,107,,107,107,107,,107,107,107,107,107,,,,,,,,,,,,,,',
',,,,,107,,,107,,,107,107,,,107,,,,,,107,,,,,,,,107,,,,,107,107,107,107',
',107,107,,,,107,107,,108,108,108,,108,107,,107,108,108,,,,108,,108,108',
'108,108,108,108,108,,,,,,108,108,108,108,108,108,108,,,108,,,,,,,108',
',,108,108,108,108,108,108,108,108,,108,108,108,,108,108,108,108,108',
',,,,,,,,,,,,,,,,,,,108,,,108,,,108,108,,,108,,,,,,108,,,,,,,,108,,,',
',108,108,108,108,,108,108,,,,108,108,,109,109,109,,109,108,,108,109',
'109,,,,109,,109,109,109,109,109,109,109,,,,,,109,109,109,109,109,109',
'109,,,109,,,,,,,109,,,109,109,109,109,109,109,109,109,,109,109,109,',
'109,109,109,109,109,,,,,,,,,,,,,,,,,,,,109,,,109,,,109,109,,,109,,,',
',,109,,,,,,,,109,,,,,109,109,109,109,,109,109,,,,109,109,,110,110,110',
'110,110,109,,109,110,110,,,,110,,110,110,110,110,110,110,110,,,,,,110',
'110,110,110,110,110,110,,,110,,,,,,110,110,,110,110,110,110,110,110',
'110,110,110,,110,110,110,,110,110,110,110,110,,,,,,,,,,,,,,,,,,,,110',
',,110,,,110,110,,,110,,110,,,,110,,,,,,,,110,,,,,110,110,110,110,,110',
'110,,,,110,110,,39,39,39,,39,110,,110,39,39,,,,39,,39,39,39,39,39,39',
'39,,,,,,39,39,39,39,39,39,39,,,39,,,,,,,39,,,39,39,39,39,39,39,39,39',
',39,39,39,,39,39,39,39,39,,,,,,,,,,,,,,,,,,,,39,,,39,,,39,39,,,39,,',
',,,39,,,,,,,,39,,,,,39,39,39,39,,39,39,,,,39,39,,457,457,457,,457,39',
',39,457,457,,,,457,,457,457,457,457,457,457,457,,,,,,457,457,457,457',
'457,457,457,,,457,,,,,,,457,,,457,457,457,457,457,457,457,457,457,457',
'457,457,,457,457,457,457,457,,,,,,,,,,,,,,,,,,,,457,,,457,,,457,457',
',,457,,,,457,,457,,,,,,,,457,,,,,457,457,457,457,,457,457,,,,457,457',
',478,478,478,,478,457,,457,478,478,,,,478,,478,478,478,478,478,478,478',
',,,,,478,478,478,478,478,478,478,,,478,,,,,,,478,,,478,478,478,478,478',
'478,478,478,,478,478,478,,478,478,,918,478,918,918,918,918,918,,,,,',
',,,,,,,,,478,,,478,,,478,478,,,478,,,,,,918,,,,,,,,,918,918,918,918',
'478,478,478,478,,478,478,,,,478,478,,832,832,832,,832,478,,478,832,832',
',,,832,,832,832,832,832,832,832,832,,,,,,832,832,832,832,832,832,832',
',,832,,,,,,,832,,,832,832,832,832,832,832,832,832,,832,832,832,,832',
'832,,878,832,878,878,878,878,878,,,,,,,,,,,,,,,832,,,832,,,832,832,',
',832,,,,,,878,878,,,,,,,,878,878,878,878,832,832,832,832,,832,832,,',
',832,832,,196,196,196,,196,832,,832,196,196,,,,196,,196,196,196,196',
'196,196,196,,,,,,196,196,196,196,196,196,196,,,196,,,,,,,196,,,196,196',
'196,196,196,196,196,196,,196,196,196,,196,196,196,196,196,,,,,,,,,,',
',,,,,,,,,196,,,196,,,196,196,,,196,,196,,,,196,,,,,,,,196,,,,,196,196',
'196,196,,196,196,,,,196,196,,197,197,197,,197,196,,196,197,197,,,,197',
',197,197,197,197,197,197,197,,,,,,197,197,197,197,197,197,197,,,197',
',,,,,,197,,,197,197,197,197,197,197,197,197,,197,197,197,,197,197,197',
'197,197,,,,,,,,,,,,,,,,,,,,197,,,197,,,197,197,,,197,,197,,,,197,,,',
',,,,197,,,,,197,197,197,197,,197,197,,,,197,197,,198,198,198,,198,197',
',197,198,198,,,,198,,198,198,198,198,198,198,198,,,,,,198,198,198,198',
'198,198,198,,,198,,,,,,,198,,,198,198,198,198,198,198,198,198,,198,198',
'198,,198,198,198,198,198,,,,,,,,,,,,,,,,,,,,198,,,198,,,198,198,,,198',
',,,,,198,,,,,,,,198,,,,,198,198,198,198,,198,198,,,,198,198,,199,199',
'199,,199,198,,198,199,199,,,,199,,199,199,199,199,199,199,199,,,,,,199',
'199,199,199,199,199,199,,,199,,,,,,,199,,,199,199,199,199,199,199,199',
'199,199,199,199,199,,199,199,199,199,199,,,,,,,,,,,,,,,,,,,,199,,,199',
',,199,199,,,199,,199,,199,,199,,,,,,,,199,,,,,199,199,199,199,,199,199',
',,,199,199,,480,480,480,,480,199,,199,480,480,,,,480,,480,480,480,480',
'480,480,480,,,,,,480,480,480,480,480,480,480,,,480,,,,,,,480,,,480,480',
'480,480,480,480,480,480,480,480,480,480,,480,480,480,480,480,,,,,,,',
',,,,,,,,,,,,480,,,480,,,480,480,,,480,,480,,480,,480,,,,,,,,480,,,,',
'480,480,480,480,,480,480,,,,480,480,,487,487,487,,487,480,,480,487,487',
',,,487,,487,487,487,487,487,487,487,,,,,,487,487,487,487,487,487,487',
',,487,,,,,,,487,,,487,487,487,487,487,487,487,487,,487,487,487,,487',
'487,,510,487,510,510,510,510,510,,,,,,,,,,,,,,,487,,,487,,,487,487,',
',487,,,,,,510,,,,,,,,,510,510,510,510,487,487,487,487,,487,487,,,,487',
'487,,202,202,202,,202,487,,487,202,202,,,,202,,202,202,202,202,202,202',
'202,,,,,,202,202,202,202,202,202,202,,,202,,,,,,,202,,,202,202,202,202',
'202,202,202,202,,202,202,202,,202,202,202,202,202,,,,,,,,,,,,,,,,,,',
',202,,,202,,,202,202,,,202,,,,,,202,,,,,,,,202,,,,,202,202,202,202,',
'202,202,,,,202,202,,203,203,203,,203,202,,202,203,203,,,,203,,203,203',
'203,203,203,203,203,,,,,,203,203,203,203,203,203,203,,,203,,,,,,,203',
',,203,203,203,203,203,203,203,203,,203,203,203,,203,203,203,203,203',
',,,,,,,,,,,,,,,,,,,203,,,203,,,203,203,,,203,,,,,,203,,,,,,,,203,,,',
',203,203,203,203,,203,203,,,,203,203,,204,204,204,,204,203,,203,204',
'204,,,,204,,204,204,204,204,204,204,204,,,,,,204,204,204,204,204,204',
'204,,,204,,,,,,,204,,,204,204,204,204,204,204,204,204,,204,204,204,',
'204,204,204,204,204,,,,,,,,,,,,,,,,,,,,204,,,204,,,204,204,,,204,,,',
',,204,,,,,,,,204,,,,,204,204,204,204,,204,204,,,,204,204,,205,205,205',
',205,204,,204,205,205,,,,205,,205,205,205,205,205,205,205,,,,,,205,205',
'205,205,205,205,205,,,205,,,,,,,205,,,205,205,205,205,205,205,205,205',
',205,205,205,,205,205,205,205,205,,,,,,,,,,,,,,,,,,,,205,,,205,,,205',
'205,,,205,,,,,,205,,,,,,,,205,,,,,205,205,205,205,,205,205,,,,205,205',
',206,206,206,,206,205,,205,206,206,,,,206,,206,206,206,206,206,206,206',
',,,,,206,206,206,206,206,206,206,,,206,,,,,,,206,,,206,206,206,206,206',
'206,206,206,,206,206,206,,206,206,206,206,206,,,,,,,,,,,,,,,,,,,,206',
',,206,,,206,206,,,206,,,,,,206,,,,,,,,206,,,,,206,206,206,206,,206,206',
',,,206,206,206,801,801,801,,801,206,,206,801,801,,,,801,,801,801,801',
'801,801,801,801,,,,,,801,801,801,801,801,801,801,,,801,,,,,,,801,,,801',
'801,801,801,801,801,801,801,,801,801,801,,801,801,801,801,801,,,,,,',
',,,,,,,,,,,,,801,,,801,,,801,801,,,801,,801,,,,801,,,,,,,,801,,,,,801',
'801,801,801,,801,801,,,,801,801,,490,490,490,,490,801,,801,490,490,',
',,490,,490,490,490,490,490,490,490,,,,,,490,490,490,490,490,490,490',
',,490,,,,,,,490,,,490,490,490,490,490,490,490,490,,490,490,490,,490',
'490,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,,,490,490,,,490,,,,,,490',
',,,,,,,490,,,,,490,490,490,490,,490,490,,,,490,490,,33,33,33,,33,490',
',490,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,,33,,,33,33,33,33,33,33,33,33,,33,33,33,,33,33,,,33,261,261,261',
'261,261,261,261,261,261,261,261,,261,261,,,261,261,,33,,,33,,,33,33',
',,33,,,261,,261,,261,261,261,261,261,261,261,,261,,,,33,33,33,33,,33',
'33,,,,33,33,,261,,33,,,33,,33,796,796,796,,796,,,,796,796,,,,796,,796',
'796,796,796,796,796,796,,,,,,796,796,796,796,796,796,796,,,796,,,,,',
',796,,,796,796,796,796,796,796,796,796,,796,796,796,,796,796,796,796',
'796,,,,,,,,,,,,,,,,,,,,796,,,796,,,796,796,,,796,,,,,,796,,,,,,,,796',
',,,,796,796,796,796,,796,796,,,,796,796,,773,773,773,,773,796,,796,773',
'773,,,,773,,773,773,773,773,773,773,773,,,,,,773,773,773,773,773,773',
'773,,,773,,,,,,,773,,,773,773,773,773,773,773,773,773,,773,773,773,',
'773,773,,,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,,773,,,,,,,,,',
',,,,,,,,,773,773,773,773,,773,773,,,,773,773,,491,491,491,,491,773,',
'773,491,491,,,,491,,491,491,491,491,491,491,491,,,,,,491,491,491,491',
'491,491,491,,,491,,,,,,,491,,,491,491,491,491,491,491,491,491,,491,491',
'491,,491,491,491,491,491,,,,,,,,,,,,,,,,,,,,491,,,491,,,491,491,,,491',
',,,,,491,,,,,,,,491,,,,,491,491,491,491,,491,491,,,,491,491,,216,216',
'216,,216,491,,491,216,216,,,,216,,216,216,216,216,216,216,216,,,,,,216',
'216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216,216,216,216,216',
'216,,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,,,,,,,216,,,216,',
',216,216,,,216,,,,,,216,,,,,,,,216,,,,,216,216,216,216,,216,216,,,,216',
'216,,32,32,32,,32,216,,216,32,32,,,,32,,32,32,32,32,32,32,32,,,,,,32',
'32,32,32,32,32,32,,,32,,,,,,,32,,,32,32,32,32,32,32,32,32,,32,32,32',
',32,32,,,32,,,,,,,,,,,,,,,,,,,,32,,,32,,,32,32,,,32,,32,,,,,,,,,,,,',
',,,,32,32,32,32,,32,32,,,,32,32,,29,29,29,,29,32,,32,29,29,,,,29,,29',
'29,29,29,29,29,29,,,,,,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29',
'29,29,29,29,29,29,29,29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29',
',,29,29,,,29,,29,,29,,29,,,,,,,,29,,,,,29,29,29,29,,29,29,,,,29,29,',
'219,219,219,,219,29,,29,219,219,,,,219,,219,219,219,219,219,219,219',
',,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219,219,219,219,219',
'219,219,219,,219,219,219,,219,219,219,219,219,,,,,,,,,,,,,,,,,,,,219',
',,219,,,219,219,,,219,,,,,,219,,,,,,,,219,,,,,219,219,219,219,,219,219',
',,,219,219,,220,220,220,,220,219,,219,220,220,,,,220,,220,220,220,220',
'220,220,220,,,,,,220,220,220,220,220,220,220,,,220,,,,,,,220,,,220,220',
'220,220,220,220,220,220,,220,220,220,,220,220,220,220,220,,,,,,,,,,',
',,,,,,,,,220,,,220,,,220,220,,,220,,,,,,220,,,,,,,,220,,,,,220,220,220',
'220,,220,220,,,,220,220,,221,221,221,,221,220,,220,221,221,,,,221,,221',
'221,221,221,221,221,221,,,,,,221,221,221,221,221,221,221,,,221,,,,,',
',221,,,221,221,221,221,221,221,221,221,,221,221,221,,221,221,221,221',
'221,,,,,,,,,,,,,,,,,,,,221,,,221,,,221,221,,,221,,,,,,221,,,,,,,,221',
',,,,221,221,221,221,,221,221,,,,221,221,,222,222,222,,222,221,,221,222',
'222,,,,222,,222,222,222,222,222,222,222,,,,,,222,222,222,222,222,222',
'222,,,222,,,,,,,222,,,222,222,222,222,222,222,222,222,,222,222,222,',
'222,222,222,222,222,,,,,,,,,,,,,,,,,,,,222,,,222,,,222,222,,,222,,,',
',,222,,,,,,,,222,,,,,222,222,222,222,,222,222,,,,222,222,,223,223,223',
',223,222,,222,223,223,,,,223,,223,223,223,223,223,223,223,,,,,,223,223',
'223,223,223,223,223,,,223,,,,,,,223,,,223,223,223,223,223,223,223,223',
',223,223,223,,223,223,223,223,223,,,,,,,,,,,,,,,,,,,,223,,,223,,,223',
'223,,,223,,,,,,223,,,,,,,,223,,,,,223,223,223,223,,223,223,,,,223,223',
',224,224,224,,224,223,,223,224,224,,,,224,,224,224,224,224,224,224,224',
',,,,,224,224,224,224,224,224,224,,,224,,,,,,,224,,,224,224,224,224,224',
'224,224,224,,224,224,224,,224,224,224,224,224,,,,,,,,,,,,,,,,,,,,224',
',,224,,,224,224,,,224,,,,,,224,,,,,,,,224,,,,,224,224,224,224,,224,224',
',,,224,224,,225,225,225,,225,224,,224,225,225,,,,225,,225,225,225,225',
'225,225,225,,,,,,225,225,225,225,225,225,225,,,225,,,,,,,225,,,225,225',
'225,225,225,225,225,225,,225,225,225,,225,225,225,225,225,,,,,,,,,,',
',,,,,,,,,225,,,225,,,225,225,,,225,,,,,,225,,,,,,,,225,,,,,225,225,225',
'225,,225,225,,,,225,225,,226,226,226,,226,225,,225,226,226,,,,226,,226',
'226,226,226,226,226,226,,,,,,226,226,226,226,226,226,226,,,226,,,,,',
',226,,,226,226,226,226,226,226,226,226,,226,226,226,,226,226,226,226',
'226,,,,,,,,,,,,,,,,,,,,226,,,226,,,226,226,,,226,,,,,,226,,,,,,,,226',
',,,,226,226,226,226,,226,226,,,,226,226,,227,227,227,,227,226,,226,227',
'227,,,,227,,227,227,227,227,227,227,227,,,,,,227,227,227,227,227,227',
'227,,,227,,,,,,,227,,,227,227,227,227,227,227,227,227,,227,227,227,',
'227,227,227,227,227,,,,,,,,,,,,,,,,,,,,227,,,227,,,227,227,,,227,,,',
',,227,,,,,,,,227,,,,,227,227,227,227,,227,227,,,,227,227,,228,228,228',
',228,227,,227,228,228,,,,228,,228,228,228,228,228,228,228,,,,,,228,228',
'228,228,228,228,228,,,228,,,,,,,228,,,228,228,228,228,228,228,228,228',
',228,228,228,,228,228,228,228,228,,,,,,,,,,,,,,,,,,,,228,,,228,,,228',
'228,,,228,,,,,,228,,,,,,,,228,,,,,228,228,228,228,,228,228,,,,228,228',
',229,229,229,,229,228,,228,229,229,,,,229,,229,229,229,229,229,229,229',
',,,,,229,229,229,229,229,229,229,,,229,,,,,,,229,,,229,229,229,229,229',
'229,229,229,,229,229,229,,229,229,229,229,229,,,,,,,,,,,,,,,,,,,,229',
',,229,,,229,229,,,229,,,,,,229,,,,,,,,229,,,,,229,229,229,229,,229,229',
',,,229,229,,492,492,492,,492,229,,229,492,492,,,,492,,492,492,492,492',
'492,492,492,,,,,,492,492,492,492,492,492,492,,,492,,,,,,,492,,,492,492',
'492,492,492,492,492,492,,492,492,492,,492,492,492,492,492,,,,,,,,,,',
',,,,,,,,,492,,,492,,,492,492,,,492,,,,,,492,,,,,,,,492,,,,,492,492,492',
'492,,492,492,,,,492,492,,231,231,231,,231,492,,492,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,',
',231,,,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,,,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,,231,,,,,,231,,,,,,,,231',
',,,,231,231,231,231,,231,231,,,,231,231,,232,232,232,,232,231,,231,232',
'232,,,,232,,232,232,232,232,232,232,232,,,,,,232,232,232,232,232,232',
'232,,,232,,,,,,,232,,,232,232,232,232,232,232,232,232,,232,232,232,',
'232,232,232,232,232,,,,,,,,,,,,,,,,,,,,232,,,232,,,232,232,,,232,,,',
',,232,,,,,,,,232,,,,,232,232,232,232,,232,232,,,,232,232,,233,233,233',
',233,232,,232,233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233',
'233,233,233,233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233',
',233,233,233,,233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233',
'233,,,233,,,,,,233,,,,,,,,233,,,,,233,233,233,233,,233,233,,,,233,233',
',234,234,234,,234,233,,233,234,234,,,,234,,234,234,234,234,234,234,234',
',,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234,234,234',
'234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,,,,,,,234',
',,234,,,234,234,,,234,,,,,,234,,,,,,,,234,,,,,234,234,234,234,,234,234',
',,,234,234,,235,235,235,,235,234,,234,235,235,,,,235,,235,235,235,235',
'235,235,235,,,,,,235,235,235,235,235,235,235,,,235,,,,,,,235,,,235,235',
'235,235,235,235,235,235,,235,235,235,,235,235,235,235,235,,,,,,,,,,',
',,,,,,,,,235,,,235,,,235,235,,,235,,,,,,235,,,,,,,,235,,,,,235,235,235',
'235,,235,235,,,,235,235,,236,236,236,,236,235,,235,236,236,,,,236,,236',
'236,236,236,236,236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,',
',236,,,236,236,236,236,236,236,236,236,,236,236,236,,236,236,236,236',
'236,,,,,,,,,,,,,,,,,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,236',
',,,,236,236,236,236,,236,236,,,,236,236,,237,237,237,,237,236,,236,237',
'237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237,237',
'237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237,',
'237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,,',
',,237,,,,,,,,237,,,,,237,237,237,237,,237,237,,,,237,237,,238,238,238',
',238,237,,237,238,238,,,,238,,238,238,238,238,238,238,238,,,,,,238,238',
'238,238,238,238,238,,,238,,,,,,,238,,,238,238,238,238,238,238,238,238',
',238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,,,,,,,238,,,238,,,238',
'238,,,238,,,,,,238,,,,,,,,238,,,,,238,238,238,238,,238,238,,,,238,238',
',239,239,239,,239,238,,238,239,239,,,,239,,239,239,239,239,239,239,239',
',,,,,239,239,239,239,239,239,239,,,239,,,,,,,239,,,239,239,239,239,239',
'239,239,239,,239,239,239,,239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239',
',,239,,,239,239,,,239,,,,,,239,,,,,,,,239,,,,,239,239,239,239,,239,239',
',,,239,239,,240,240,240,,240,239,,239,240,240,,,,240,,240,240,240,240',
'240,240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240',
'240,240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,',
',,,,,,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,240,,,,,240,240,240',
'240,,240,240,,,,240,240,,241,241,241,,241,240,,240,241,241,,,,241,,241',
'241,241,241,241,241,241,,,,,,241,241,241,241,241,241,241,,,241,,,,,',
',241,,,241,241,241,241,241,241,241,241,,241,241,241,,241,241,241,241',
'241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,,,,,241,,,,,,,,241',
',,,,241,241,241,241,,241,241,,,,241,241,,242,242,242,,242,241,,241,242',
'242,,,,242,,242,242,242,242,242,242,242,,,,,,242,242,242,242,242,242',
'242,,,242,,,,,,,242,,,242,242,242,242,242,242,242,242,,242,242,242,',
'242,242,242,242,242,,,,,,,,,,,,,,,,,,,,242,,,242,,,242,242,,,242,,,',
',,242,,,,,,,,242,,,,,242,242,242,242,,242,242,,,,242,242,,243,243,243',
',243,242,,242,243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243',
'243,243,243,243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243',
',243,243,243,,243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243',
'243,,,243,,,,,,243,,,,,,,,243,,,,,243,243,243,243,,243,243,,,,243,243',
',244,244,244,,244,243,,243,244,244,,,,244,,244,244,244,244,244,244,244',
',,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244,244,244',
'244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,,,,,,,244',
',,244,,,244,244,,,244,,,,,,244,,,,,,,,244,,,,,244,244,244,244,,244,244',
',,,244,244,,496,496,496,,496,244,,244,496,496,,,,496,,496,496,496,496',
'496,496,496,,,,,,496,496,496,496,496,496,496,,,496,,,,,,,496,,,496,496',
'496,496,496,496,496,496,,496,496,496,,496,496,496,496,496,,,,,,,,,,',
',,,,,,,,,496,,,496,,,496,496,,,496,,,,,,496,,,,,,,,496,,,,,496,496,496',
'496,,496,496,,,,496,496,,498,498,498,,498,496,,496,498,498,,,,498,,498',
'498,498,498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498,,,,,',
',498,,,498,498,498,498,498,498,498,498,,498,498,498,,498,498,498,498',
'498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498,,498,,,,498,,,,,,,',
'498,,,,,498,498,498,498,,498,498,,,,498,498,,502,502,502,,502,498,,498',
'502,502,,,,502,,502,502,502,502,502,502,502,,,,,,502,502,502,502,502',
'502,502,,,502,,,,,,,502,,,502,502,502,502,502,502,502,502,502,502,502',
'502,,502,502,502,502,502,,,,,,,,,,,,,,,,,,,,502,,,502,,,502,502,,,502',
',502,,,,502,,,,,,,,502,,,,,502,502,502,502,,502,502,,,,502,502,,250',
'250,250,,250,502,,502,250,250,,,,250,,250,250,250,250,250,250,250,,',
',,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250,250,250',
'250,250,250,250,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,,,,,,',
'250,,,250,,,250,250,,,250,,250,,250,,250,,,,,,,,250,,,,,250,250,250',
'250,,250,250,,,,250,250,,251,251,251,,251,250,,250,251,251,,,,251,,251',
'251,251,251,251,251,251,,,,,,251,251,251,251,251,251,251,,,251,,,,,',
',251,,,251,251,251,251,251,251,251,251,251,251,251,251,,251,251,251',
'251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,251,,251,,251',
',,,,,,,251,,,,,251,251,251,251,,251,251,,,,251,251,,259,259,259,,259',
'251,,251,259,259,,,,259,,259,259,259,259,259,259,259,,,,,,259,259,259',
'259,259,259,259,,,259,,,,,,,259,,,259,259,259,259,259,259,259,259,259',
'259,259,259,,259,259,259,259,259,,,,,,,,,,,,,,,,,,,,259,,,259,,,259',
'259,,,259,,259,,259,,259,,,,,,,,259,,,,,259,259,259,259,,259,259,,,',
'259,259,259,505,505,505,,505,259,,259,505,505,,,,505,,505,505,505,505',
'505,505,505,,,,,,505,505,505,505,505,505,505,,,505,,,,,,,505,,,505,505',
'505,505,505,505,505,505,505,505,505,505,,505,505,505,505,505,,,,,,,',
',,,,,,,,,,,,505,,,505,,,505,505,,,505,,,,,,505,,,,,,,,505,,,,,505,505',
'505,505,,505,505,,,,505,505,,762,762,762,,762,505,,505,762,762,,,,762',
',762,762,762,762,762,762,762,,,,,,762,762,762,762,762,762,762,,,762',
',,,,,,762,,,762,762,762,762,762,762,762,762,762,762,762,762,,762,762',
'762,762,762,,,,,,,,,,,,,,,,,,,,762,,,762,,,762,762,,,762,,762,,762,',
'762,,,,,,,,762,,,,,762,762,762,762,,762,762,,,,762,762,,755,755,755',
',755,762,,762,755,755,,,,755,,755,755,755,755,755,755,755,,,,,,755,755',
'755,755,755,755,755,,,755,,,,,,,755,,,755,755,755,755,755,755,755,755',
'755,755,755,755,,755,755,755,755,755,,,,,,,,,,,,,,,,,,,,755,,,755,,',
'755,755,,,755,,755,,755,,755,,,,,,,,755,,,,,755,755,755,755,,755,755',
',,,755,755,,266,266,266,,266,755,,755,266,266,,,,266,,266,266,266,266',
'266,266,266,,,,,,266,266,266,266,266,266,266,,,266,,,,,,,266,,,266,266',
'266,266,266,266,266,266,,266,266,266,,266,266,266,266,266,,,,,,,,,,',
',,,,,,,,,266,,,266,,,266,266,,,266,,,,,,266,,,,,,,,266,,,,,266,266,266',
'266,,266,266,,,,266,266,,645,645,645,,645,266,,266,645,645,,,,645,,645',
'645,645,645,645,645,645,,,,,,645,645,645,645,645,645,645,,,645,,,,,',
',645,,,645,645,645,645,645,645,645,645,,645,645,645,,645,645,,,645,',
',,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,,645,,,,,,,,,,,,,,,,,,,645,645',
'645,645,,645,645,,,,645,645,,268,268,268,,268,645,,645,268,268,,,,268',
',268,268,268,268,268,268,268,,,,,,268,268,268,268,268,268,268,,,268',
',,,,,,268,,,268,268,268,268,268,268,268,268,,268,268,268,,268,268,268',
'268,268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,,268,,,,,,268,,,,,,',
',268,,,,,268,268,268,268,,268,268,,,,268,268,,270,270,270,,270,268,',
'268,270,270,,,,270,,270,270,270,270,270,270,270,,,,,,270,270,270,270',
'270,270,270,,,270,,,,,,,270,,,270,270,270,270,270,270,270,270,,270,270',
'270,,270,270,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,,270',
',,,,,270,,,,,,,,270,,,,,270,270,270,270,,270,270,,,,270,270,,743,743',
'743,,743,270,,270,743,743,,,,743,,743,743,743,743,743,743,743,,,,,,743',
'743,743,743,743,743,743,,,743,,,,,,,743,,,743,743,743,743,743,743,743',
'743,,743,743,743,,743,743,743,743,743,,,,,,,,,,,,,,,,,,,,743,,,743,',
',743,743,,,743,,,,,,743,,,,,,,,743,,,,,743,743,743,743,,743,743,,,,743',
'743,,741,741,741,,741,743,,743,741,741,,,,741,,741,741,741,741,741,741',
'741,,,,,,741,741,741,741,741,741,741,,,741,,,,,,,741,,,741,741,741,741',
'741,741,741,741,,741,741,741,,741,741,741,741,741,,,,,,,,,,,,,,,,,,',
',741,,,741,,,741,741,,,741,,,,,,741,,,,,,,,741,,,,,741,741,741,741,',
'741,741,,,,741,741,,275,275,275,275,275,741,,741,275,275,,,,275,,275',
'275,275,275,275,275,275,,,,,,275,275,275,275,275,275,275,,,275,,,,,',
'275,275,,275,275,275,275,275,275,275,275,275,,275,275,275,,275,275,275',
'275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,,275,,275,,,,275,,,',
',,,,275,,,,,275,275,275,275,,275,275,,,,275,275,,740,740,740,,740,275',
',275,740,740,,,,740,,740,740,740,740,740,740,740,,,,,,740,740,740,740',
'740,740,740,,,740,,,,,,,740,,,740,740,740,740,740,740,740,740,,740,740',
'740,,740,740,740,740,740,,,,,,,,,,,,,,,,,,,,740,,,740,,,740,740,,,740',
',,,,,740,,,,,,,,740,,,,,740,740,740,740,,740,740,,,,740,740,,27,27,27',
',27,740,,740,27,27,,,,27,,27,27,27,27,27,27,27,,,,,,27,27,27,27,27,27',
'27,,,27,,,,,,,27,,,27,27,27,27,27,27,27,27,27,27,27,27,,27,27,27,27',
'27,,,,,,,,,,,,,,,,,,,,27,,,27,,,27,27,,,27,,27,,27,,27,,,,,,,,27,,,',
',27,27,27,27,,27,27,,,,27,27,,739,739,739,,739,27,,27,739,739,,,,739',
',739,739,739,739,739,739,739,,,,,,739,739,739,739,739,739,739,,,739',
',,,,,,739,,,739,739,739,739,739,739,739,739,,739,739,739,,739,739,739',
'739,739,,,,,,,,,,,,,,,,,,,,739,,,739,,,739,739,,,739,,,,,,739,,,,,,',
',739,,,,,739,739,739,739,,739,739,,,,739,739,,738,738,738,,738,739,',
'739,738,738,,,,738,,738,738,738,738,738,738,738,,,,,,738,738,738,738',
'738,738,738,,,738,,,,,,,738,,,738,738,738,738,738,738,738,738,,738,738',
'738,,738,738,738,738,738,,,,,,,,,,,,,,,,,,,,738,,,738,,,738,738,,,738',
',,,,,738,,,,,,,,738,,,,,738,738,738,738,,738,738,,,,738,738,,541,541',
'541,,541,738,,738,541,541,,,,541,,541,541,541,541,541,541,541,,,,,,541',
'541,541,541,541,541,541,,,541,,,,,,,541,,,541,541,541,541,541,541,541',
'541,,541,541,541,,541,541,541,541,541,,,,,,,,,,,,,,,,,,,,541,,,541,',
',541,541,,,541,,541,,,,541,,,,,,,,541,,,,,541,541,541,541,,541,541,',
',,541,541,,281,281,281,,281,541,,541,281,281,,,,281,,281,281,281,281',
'281,281,281,,,,,,281,281,281,281,281,281,281,,,281,,,,,,,281,,,281,281',
'281,281,281,281,281,281,,281,281,281,,281,281,,,281,734,734,734,734',
'734,734,734,734,734,734,734,,734,734,,,734,734,,281,,,281,,,281,281',
',,281,,,734,,734,,734,734,734,734,734,734,734,,734,,,,281,281,281,281',
',281,281,,,,281,281,,734,,281,,,281,,281,542,542,542,,542,,,,542,542',
',,,542,,542,542,542,542,542,542,542,,,,,,542,542,542,542,542,542,542',
',,542,,,,,,,542,,,542,542,542,542,542,542,542,542,542,542,542,542,,542',
'542,542,542,542,,,,,,,,,,,,,,,,,,,,542,,,542,,,542,542,,,542,,542,,542',
',542,,,,,,,,542,,,,,542,542,542,542,,542,542,,,,542,542,,420,420,420',
',420,542,,542,420,420,,,,420,,420,420,420,420,420,420,420,,,,,,420,420',
'420,420,420,420,420,,,420,,,,,,,420,,,420,420,420,420,420,420,420,420',
',420,420,420,,420,420,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420',
'420,,,420,,,,,,420,,,,,,,,420,,,,,420,420,420,420,,420,420,,,,420,420',
',419,419,419,,419,420,,420,419,419,,,,419,,419,419,419,419,419,419,419',
',,,,,419,419,419,419,419,419,419,,,419,,,,,,,419,,,419,419,419,419,419',
'419,419,419,,419,419,419,,419,419,419,419,419,,,,,,,,,,,,,,,,,,,,419',
',,419,,,419,419,,,419,,,,,,419,,,,,,,,419,,,,,419,419,419,419,,419,419',
',,,419,419,,463,463,463,,463,419,,419,463,463,,,,463,,463,463,463,463',
'463,463,463,,,,,,463,463,463,463,463,463,463,,,463,,,,,,,463,,,463,463',
'463,463,463,463,463,463,463,463,463,463,,463,463,463,463,463,,,,,,,',
',,,,,,,,,,,,463,,,463,,,463,463,,,463,,463,,463,,463,,,,,,,,463,,,,',
'463,463,463,463,,463,463,,,,463,463,,726,726,726,,726,463,,463,726,726',
',,,726,,726,726,726,726,726,726,726,,,,,,726,726,726,726,726,726,726',
',,726,,,,,,,726,,,726,726,726,726,726,726,726,726,,726,726,726,,726',
'726,726,726,726,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,726,,,726,,,,,,726',
',,,,,,,726,,,,,726,726,726,726,,726,726,,,,726,726,,418,418,418,,418',
'726,,726,418,418,,,,418,,418,418,418,418,418,418,418,,,,,,418,418,418',
'418,418,418,418,,,418,,,,,,,418,,,418,418,418,418,418,418,418,418,,418',
'418,418,,418,418,418,418,418,,,,,,,,,,,,,,,,,,,,418,,,418,,,418,418',
',,418,,,,,,418,,,,,,,,418,,,,,418,418,418,418,,418,418,,,,418,418,,724',
'724,724,,724,418,,418,724,724,,,,724,,724,724,724,724,724,724,724,,',
',,,724,724,724,724,724,724,724,,,724,,,,,,,724,,,724,724,724,724,724',
'724,724,724,,724,724,724,,724,724,724,724,724,,,,,,,,,,,,,,,,,,,,724',
',,724,,,724,724,,,724,,,,,,724,,,,,,,,724,,,,,724,724,724,724,,724,724',
',,,724,724,,552,552,552,,552,724,,724,552,552,,,,552,,552,552,552,552',
'552,552,552,,,,,,552,552,552,552,552,552,552,,,552,,,,,,,552,,,552,552',
'552,552,552,552,552,552,552,552,552,552,,552,552,552,552,552,,,,,,,',
',,,,,,,,,,,,552,,,552,,,552,552,,,552,,552,,552,,552,,,,,,,,552,,,,',
'552,552,552,552,,552,552,,,,552,552,,416,416,416,,416,552,,552,416,416',
',,,416,,416,416,416,416,416,416,416,,,,,,416,416,416,416,416,416,416',
',,416,,,,,,,416,,,416,416,416,416,416,416,416,416,416,416,416,416,,416',
'416,416,416,416,,,,,,,,,,,,,,,,,,,,416,,,416,,,416,416,,,416,,416,,416',
',416,,,,,,,,416,,,,,416,416,416,416,,416,416,,,,416,416,,555,555,555',
',555,416,,416,555,555,,,,555,,555,555,555,555,555,555,555,,,,,,555,555',
'555,555,555,555,555,,,555,,,,,,,555,,,555,555,555,555,555,555,555,555',
',555,555,555,,555,555,555,555,555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555',
'555,,,555,,,,,,555,,,,,,,,555,,,,,555,555,555,555,,555,555,,,,555,555',
',5,5,5,5,5,555,,555,5,5,,,,5,,5,5,5,5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,',
',,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,,5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,',
',5,,,5,5,,,5,,5,,,,5,,,,,,,,5,,,,,5,5,5,5,,5,5,,,,5,5,,297,297,297,',
'297,5,,5,297,297,,,,297,,297,297,297,297,297,297,297,,,,,,297,297,297',
'297,297,297,297,,,297,,,,,,,297,,,297,297,297,297,297,297,297,297,,297',
'297,297,,297,297,,,297,,,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,,297',
',,,,,,,,,,,,,,,,,,297,297,297,297,,297,297,,,,297,297,,583,583,583,',
'583,297,,297,583,583,,,,583,,583,583,583,583,583,583,583,,,,,,583,583',
'583,583,583,583,583,,,583,,,,,,,583,,,583,583,583,583,583,583,583,583',
',583,583,583,,583,583,583,583,583,,,,,,,,,,,,,,,,,,,,583,,,583,,,583',
'583,,,583,,,,,,583,,,,,,,,583,,,,,583,583,583,583,,583,583,,,,583,583',
',384,384,384,,384,583,,583,384,384,,,,384,,384,384,384,384,384,384,384',
',,,,,384,384,384,384,384,384,384,,,384,,,,,,,384,,,384,384,384,384,384',
'384,384,384,,384,384,384,,384,384,384,384,384,,,,,,,,,,,,,,,,,,,,384',
',,384,,,384,384,,,384,,,,,,384,,,,,,,,384,,,,,384,384,384,384,,384,384',
',,,384,384,,585,585,585,,585,384,,384,585,585,,,,585,,585,585,585,585',
'585,585,585,,,,,,585,585,585,585,585,585,585,,,585,,,,,,,585,,,585,585',
'585,585,585,585,585,585,,585,585,585,,585,585,585,585,585,,,,,,,,,,',
',,,,,,,,,585,,,585,,,585,585,,,585,,585,,,,585,,,,,,,,585,,,,,585,585',
'585,585,,585,585,,,,585,585,,696,696,696,,696,585,,585,696,696,,,,696',
',696,696,696,696,696,696,696,,,,,,696,696,696,696,696,696,696,,,696',
',,,,,,696,,,696,696,696,696,696,696,696,696,,696,696,696,,696,696,696',
'696,696,,,,,,,,,,,,,,,,,,,,696,,,696,,,696,696,,,696,,,,,,696,,,,,,',
',696,,,,,696,696,696,696,,696,696,,,,696,696,,586,586,586,,586,696,',
'696,586,586,,,,586,,586,586,586,586,586,586,586,,,,,,586,586,586,586',
'586,586,586,,,586,,,,,,,586,,,586,586,586,586,586,586,586,586,,586,586',
'586,,586,586,586,586,586,,,,,,,,,,,,,,,,,,,,586,,,586,,,586,586,,,586',
',,,,,586,,,,,,,,586,,,,,586,586,586,586,,586,586,,,,586,586,,306,306',
'306,,306,586,,586,306,306,,,,306,,306,306,306,306,306,306,306,,,,,,306',
'306,306,306,306,306,306,,,306,,,,,,,306,,,306,306,306,306,306,306,306',
'306,,306,306,306,,306,306,306,306,306,,,,,,,,,,,,,,,,,,,,306,,,306,306',
',306,306,,,306,,,,,,306,,,,,,,,306,,,,,306,306,306,306,,306,306,,,,306',
'306,,357,357,357,,357,306,,306,357,357,,,,357,,357,357,357,357,357,357',
'357,,,,,,357,357,357,357,357,357,357,,,357,,,,,,,357,,,357,357,357,357',
'357,357,357,357,,357,357,357,,357,357,357,357,357,,,,,,,,,,,,,,,,,,',
',357,,,357,,,357,357,,,357,,,,,,357,,,,,,,,357,,,,,357,357,357,357,',
'357,357,,,,357,357,,589,589,589,,589,357,,357,589,589,,,,589,,589,589',
'589,589,589,589,589,,,,,,589,589,589,589,589,589,589,,,589,,,,,,,589',
',,589,589,589,589,589,589,589,589,,589,589,589,,589,589,589,589,589',
',,,,,,,,,,,,,,,,,,,589,,,589,,,589,589,,,589,,,,,,589,,,,,,,,589,,,',
',589,589,589,589,,589,589,,,,589,589,,590,590,590,,590,589,,589,590',
'590,,,,590,,590,590,590,590,590,590,590,,,,,,590,590,590,590,590,590',
'590,,,590,,,,,,,590,,,590,590,590,590,590,590,590,590,,590,590,590,',
'590,590,590,590,590,,,,,,,,,,,,,,,,,,,,590,,,590,,,590,590,,,590,,,',
',,590,,,,,,,,590,,,,,590,590,590,590,,590,590,,,,590,590,,594,594,594',
',594,590,,590,594,594,,,,594,,594,594,594,594,594,594,594,,,,,,594,594',
'594,594,594,594,594,,,594,,,,,,,594,,,594,594,594,594,594,594,594,594',
',594,594,594,,594,594,594,594,594,,,,,,,,,,,,,,,,,,,,594,,,594,,,594',
'594,,,594,,,,,,594,,,,,,,,594,,,,,594,594,594,594,,594,594,,,,594,594',
',595,595,595,,595,594,,594,595,595,,,,595,,595,595,595,595,595,595,595',
',,,,,595,595,595,595,595,595,595,,,595,,,,,,,595,,,595,595,595,595,595',
'595,595,595,,595,595,595,,595,595,595,595,595,,,,,,,,,,,,,,,,,,,,595',
',,595,,,595,595,,,595,,,,,,595,,,,,,,,595,,,,,595,595,595,595,,595,595',
',,,595,595,,670,670,670,,670,595,,595,670,670,,,,670,,670,670,670,670',
'670,670,670,,,,,,670,670,670,670,670,670,670,,,670,,,,,,,670,,,670,670',
'670,670,670,670,670,670,,670,670,670,,670,670,670,670,670,,,,,,,,,,',
',,,,,,,,,670,,,670,,,670,670,,,670,,,,,,670,,,,,,,,670,,,,,670,670,670',
'670,,670,670,,,,670,670,,892,892,892,,892,670,,670,892,892,,,,892,,892',
'892,892,892,892,892,892,,,,,,892,892,892,892,892,892,892,,,892,,,,,',
',892,,,892,892,892,892,892,892,892,892,892,892,892,892,,892,892,892',
'892,892,,,,,,,,,,,,,,,,,,,,892,,,892,,,892,892,,,892,,892,,892,,892',
',,,,,,,892,,,,,892,892,892,892,,892,892,,,,892,892,,342,342,342,,342',
'892,,892,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342',
'342,342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342',
'342,342,,342,342,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342',
',,342,,,,,,342,,,,,,,,342,,,,,342,342,342,342,,342,342,,,,342,342,,19',
'19,19,,19,342,,342,19,19,,,,19,,19,19,19,19,19,19,19,,,,,,19,19,19,19',
'19,19,19,,,19,,,,,,,19,,,19,19,19,19,19,19,19,19,,19,19,19,,19,19,19',
'19,19,,,,,,,,,,,,,,,,,,,,19,,,19,,,19,19,,,19,,,,,,19,,,,,,,,19,,,,',
'19,19,19,19,,19,19,,,,19,19,,897,897,897,,897,19,,19,897,897,,,,897',
',897,897,897,897,897,897,897,,,,,,897,897,897,897,897,897,897,,,897',
',,,,,,897,,,897,897,897,897,897,897,897,897,897,897,897,897,,897,897',
'897,897,897,,,,,,,,,,,,,,,,,,,,897,,,897,,,897,897,,,897,,897,,897,',
'897,,,,,,,,897,,,,,897,897,897,897,,897,897,,,,897,897,,895,895,895',
',895,897,,897,895,895,,,,895,,895,895,895,895,895,895,895,,,,,,895,895',
'895,895,895,895,895,,,895,,,,,,,895,,,895,895,895,895,895,895,895,895',
',895,895,895,,895,895,895,895,895,,,,,,,,,,,,,,,,,,,,895,,,895,,,895',
'895,,,895,,895,,895,,895,,,,,,,,895,,,,,895,895,895,895,,895,895,,,',
'895,895,,629,629,629,,629,895,,895,629,629,,,,629,,629,629,629,629,629',
'629,629,,,,,,629,629,629,629,629,629,629,,,629,,,,,,,629,,,629,629,629',
'629,629,629,629,629,,629,629,629,,629,629,629,629,629,,,,,,,,,,,,,,',
',,,,,629,,,629,,,629,629,,,629,,,,,,629,,,,,,,,629,,,,,629,629,629,629',
',629,629,,,,629,629,,634,634,634,,634,629,,629,634,634,,,,634,,634,634',
'634,634,634,634,634,,,,,,634,634,634,634,634,634,634,,,634,,,,,,,634',
',,634,634,634,634,634,634,634,634,,634,634,634,,634,634,,,634,,,,,,',
',,,,,,,,,,,,,634,,,634,,,634,634,,,634,,,,,,,,,,,,,,,,,,,634,634,634',
'634,,634,634,,,,634,634,,323,323,323,,323,634,,634,323,323,,,,323,,323',
'323,323,323,323,323,323,,,,,,323,323,323,323,323,323,323,,,323,,,,,',
',323,,,323,323,323,323,323,323,323,323,,323,323,323,,323,323,323,323',
'323,,,,,,,,,,,,,,,,,,,,323,,,323,,,323,323,,,323,,,,,,323,,,,,,,,323',
',,,,323,323,323,323,,323,323,,,,323,323,,324,324,324,,324,323,,323,324',
'324,,,,324,,324,324,324,324,324,324,324,,,,,,324,324,324,324,324,324',
'324,,,324,,,,,,,324,,,324,324,324,324,324,324,324,324,,324,324,324,',
'324,324,324,324,324,,,,,,,,,,,,,,,,,,,,324,,,324,,,324,324,,,324,,,',
',,324,,,,,,,,324,,,,,324,324,324,324,,324,324,,,,324,324,,28,28,28,',
'28,324,,324,28,28,,,,28,,28,28,28,28,28,28,28,,,,,,28,28,28,28,28,28',
'28,,,28,,,,,,,28,,,28,28,28,28,28,28,28,28,28,28,28,28,,28,28,28,28',
'28,446,446,446,446,446,446,446,446,446,446,446,,446,446,,,446,446,,28',
',,28,,,28,28,,,28,,28,446,28,446,28,446,446,446,446,446,446,446,28,446',
',,,28,28,28,28,,28,28,,,,28,28,446,446,26,,,,28,,28,26,26,26,,,26,26',
'26,,26,,,,,,,,,,26,26,,,,,,,,,26,26,,26,26,26,26,26,,,,,,,,,,,,,,,,',
',,,,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,,,26,26,26,,,26,,26',
'26,,,26,26,,26,,26,,26,,26,26,26,26,26,26,26,451,26,,26,,,,451,451,451',
',,451,451,451,,451,26,26,,26,,26,,,,451,,,,,,,,,,451,451,,451,451,451',
'451,451,,,,,,,,,,,,448,,,,,,,448,448,448,,,448,448,448,,448,,,,,,451',
',,,448,,,451,,,,,451,451,448,448,,448,448,448,448,448,,,,,,,,,,,,,,451',
',,,,,,,,395,,,,,451,,395,395,395,451,448,395,395,395,,395,,448,,,,,448',
'448,395,395,395,,,,,,,,,395,395,,395,395,395,395,395,,,448,,,,,,,,,',
',,,,448,,,,,448,395,395,395,395,395,395,395,395,395,395,395,395,395',
'395,,,395,395,395,,,395,,395,395,,,395,395,,395,,395,,395,,395,395,395',
'395,395,395,395,25,395,395,395,,,,25,25,25,,,25,25,25,,25,395,395,,395',
',395,,,25,25,25,,,,,,,,,25,25,,25,25,25,25,25,,,,,,,,,,,,,,,,,,,,,,',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,25,25,25,,,25,,25,25,,,25',
'25,,25,,25,,25,,25,25,25,25,25,25,25,,25,25,25,,,,,,,,,,,,,,25,25,,25',
',25,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8',
'8,8,8,,,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,',
',8,8,8,8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,8,581',
'581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581',
'581,581,581,581,581,581,,,,581,581,581,581,581,581,581,581,581,581,',
',,,,581,581,581,581,581,581,581,581,581,,,581,,,,,,,,581,581,,581,581',
'581,581,581,581,581,,,581,581,,,,581,581,581,581,,,,,,,,,,,,,,581,581',
',581,581,581,581,581,581,581,581,581,581,581,,,581,581,,,,,,,,,,,581',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9',
'9,,,,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9',
'9,9,,,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,9,374,374',
'374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374,374',
'374,374,374,374,374,,,,374,374,374,374,374,374,374,374,374,374,,,,,',
'374,374,374,374,374,374,374,374,374,,,374,,,,,,,,374,374,,374,374,374',
'374,374,374,374,,,374,374,,,,374,374,374,374,,,,,,,,,,,,,,374,374,,374',
'374,374,374,374,374,374,374,374,374,374,,,374,374,,,,,,,,,,,374,66,66',
'66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,,',
',66,66,66,66,66,66,66,66,66,66,,,,,,66,66,66,66,66,66,66,66,66,66,66',
'66,,66,,,,,,66,66,,66,66,66,66,66,66,66,,,66,66,,,,66,66,66,66,,,,,',
'66,,,,,,,,66,66,,66,66,66,66,66,66,66,66,66,66,66,,,66,709,709,709,709',
'709,709,709,709,709,709,709,709,709,709,709,709,709,709,709,709,709',
'709,709,709,,,,709,709,709,709,709,709,709,709,709,709,,,,,,709,709',
'709,709,709,709,709,709,709,,,709,,,,,,,,709,709,,709,709,709,709,709',
'709,709,,,709,709,,,,709,709,709,709,,,,,,,,,,,,,,709,709,,709,709,709',
'709,709,709,709,709,709,709,709,414,414,709,,414,,,,,,,,414,414,,414',
'414,414,414,414,414,414,,,414,414,,,,414,414,414,414,,,,,,414,,,,,,',
',414,414,,414,414,414,414,414,414,414,414,414,414,414,544,544,414,,544',
',,,,,,,544,544,,544,544,544,544,544,544,544,,,544,544,,,,544,544,544',
'544,,,,,,544,,,,,,,,544,544,,544,544,544,544,544,544,544,544,544,544',
'544,415,415,544,,415,,,,,,,,415,415,,415,415,415,415,415,415,415,,,415',
'415,,,,415,415,415,415,,,,,,415,,,,,,,,415,415,,415,415,415,415,415',
'415,415,415,415,415,415,927,927,415,,927,,,,,,,,927,927,,927,927,927',
'927,927,927,927,,,927,927,,,,927,927,927,927,,,,,,927,,,,,,,,927,927',
',927,927,927,927,927,927,927,927,927,927,927,550,550,927,,550,,,,,,',
',550,550,,550,550,550,550,550,550,550,,,550,550,,,,550,550,550,550,',
',,,,550,,,,,,,,550,550,,550,550,550,550,550,550,550,550,550,550,550',
'200,200,550,,200,,,,,,,,200,200,,200,200,200,200,200,200,200,,,200,200',
',,,200,200,200,200,,,,,,200,,,,,,,,200,200,,200,200,200,200,200,200',
'200,200,200,200,200,551,551,200,,551,,,,,,,,551,551,,551,551,551,551',
'551,551,551,,,551,551,,,,551,551,551,551,,,,,,551,,,,,,,,551,551,,551',
'551,551,551,551,551,551,551,551,551,551,481,481,551,,481,,,,,,,,481',
'481,,481,481,481,481,481,481,481,,,481,481,,,,481,481,481,481,,,,,,481',
',,,,,,,481,481,,481,481,481,481,481,481,481,481,481,481,481,482,482',
'481,,482,,,,,,,,482,482,,482,482,482,482,482,482,482,,,482,482,,,,482',
'482,482,482,,,,,,482,,,,,,,,482,482,,482,482,482,482,482,482,482,482',
'482,482,482,543,543,482,,543,,,,,,,,543,543,,543,543,543,543,543,543',
'543,,,543,543,,,,543,543,543,543,,,,,,543,,,,,,,,543,543,,543,543,543',
'543,543,543,543,543,543,543,543,248,248,543,,248,,,,,,,,248,248,,248',
'248,248,248,248,248,248,,,248,248,,,,248,248,248,248,,,,,,,,,,,,,,248',
'248,,248,248,248,248,248,248,248,248,248,248,248,247,247,248,,247,,',
',,,,,247,247,,247,247,247,247,247,247,247,,,247,247,,,,247,247,247,247',
',,,,,,,,,,,,,247,247,,247,247,247,247,247,247,247,247,247,247,247,201',
'201,247,,201,,,,,,,,201,201,,201,201,201,201,201,201,201,,,201,201,',
',,201,201,201,201,,,,,,201,,,,,,,,201,201,,201,201,201,201,201,201,201',
'201,201,201,201,494,494,201,,494,,,,,,,,494,494,,494,494,494,494,494',
'494,494,,,494,494,,,,494,494,494,494,,,,,,494,,,,,,,,494,494,,494,494',
'494,494,494,494,494,494,494,494,494,493,493,494,,493,,,,,,,,493,493',
',493,493,493,493,493,493,493,,,493,493,,,,493,493,493,493,,,,,,493,',
',,,,,,493,493,,493,493,493,493,493,493,493,493,493,493,493,898,898,493',
',898,,,,,,,,898,898,,898,898,898,898,898,898,898,,,898,898,,,,898,898',
'898,898,,,,,,898,,,,,,,,898,898,,898,898,898,898,898,898,898,898,898',
'898,898,899,899,898,,899,,,,,,,,899,899,,899,899,899,899,899,899,899',
',,899,899,,,,899,899,899,899,,,,,,899,,,,,,,,899,899,,899,899,899,899',
'899,899,899,899,899,899,899,,,899,407,407,407,407,407,407,407,407,407',
'407,407,,407,407,,,407,407,,,,,,,,,,,,,,,407,,407,,407,407,407,407,407',
'407,407,,407,,725,725,725,725,725,725,725,725,725,725,725,,725,725,',
'407,725,725,,,,,,,,,,,,,,,725,,725,,725,725,725,725,725,725,725,,725',
',20,20,20,20,20,20,20,20,20,20,20,,20,20,,725,20,20,,,,,,,,,,,,,,,20',
',20,,20,20,20,20,20,20,20,,20,,819,819,819,819,819,819,819,819,819,819',
'819,,819,819,,20,819,819,,,,,,,,,,,,,,,819,,819,,819,819,819,819,819',
'819,819,,819,,646,646,646,646,646,646,646,646,646,646,646,,646,646,',
'819,646,646,,,,,,,,,,,,,,,646,,646,,646,646,646,646,646,646,646,,646',
',722,722,722,722,722,722,722,722,722,722,722,,722,722,,646,722,722,',
',,,,,,,,,,,,,722,,722,,722,722,722,722,722,722,722,,722,,736,736,736',
'736,736,736,736,736,736,736,736,,736,736,,722,736,736,,,,,,,,,,,,,,',
'736,,736,,736,736,736,736,736,736,736,,736,,817,817,817,817,817,817',
'817,817,817,817,817,,817,817,,736,817,817,,,,,,,,,,,,,,,817,,817,,817',
'817,817,817,817,817,817,,817,,729,729,729,729,729,729,729,729,729,729',
'729,,729,729,,817,729,729,,,,,,,,,,,,,,,729,,729,,729,729,729,729,729',
'729,729,,729,,,,,,,,,,,,,,,,,729' ]
        racc_action_check = arr = ::Array.new(23600, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2406,  1257,   nil,   185,   nil, 17956,   706,  1090, 21428, 21676,
  1062,  1024,  1023,  1071,   764,   310,   236,   nil,   -65, 19956,
 23196,  1050,   nil,   476,     2, 21298, 20959, 16073, 20831, 10573,
   nil,  3281, 10448,  9815,   nil,   877,   130,   875,   488,  7690,
  6674,  6549,   770,   552,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  4784,  4656,  5041,  5166,  5291,   -19,   nil,  5541,  5666,
   nil,   nil,  5791,  5924,  6049,  6174, 21924,   nil,   nil,   nil,
   nil,   nil,   -77,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,   255,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   853,
   nil,  6932,   nil,   nil,   nil,   nil,  7065,  7190,  7315,  7440,
  7565,  4156,   nil,   130,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   720,   nil,  3906,  8190,  8315,  8440,  8565,
 22396, 22816,  8940,  9065,  9190,  9315,  9440,   nil,   nil,  1077,
   -38,   785,   101,   602,   647,   nil, 10323,  3406,   634, 10698,
 10823, 10948, 11073, 11198, 11323, 11448, 11573, 11698, 11823, 11948,
  4916, 12198, 12323, 12448, 12573, 12698, 12823, 12948, 13073, 13198,
 13323, 13448, 13573, 13698, 13823,   nil,   nil, 22756, 22696,   623,
 14323, 14448,   nil,   nil,   nil,   nil,   nil,   nil,   nil, 14573,
   nil,  9815,   nil,   586,   576,   nil, 15073,   617, 15323,   nil,
 15448,   nil,   nil,   159,  1513, 15823,   471,  2906,   478,   505,
   447, 16573,  2781,   393,   326,   504,   930,   nil,   445,   399,
   135,   nil,   nil,   nil,   428,   597,   365, 18081,   nil,   347,
   340,   298,   762,   nil,   269,   nil, 18831,   303,   292,   307,
   nil,   291,   -95,    85,   242,   306,   387,   nil,   nil,  5937,
   620,    -9,    32, 20581, 20706,   407,   552,   483,    28,   455,
   632,    57,   759,   nil,   nil,   354,   325,   -34,   nil,  1020,
   nil,    14, 19831,   nil,   nil,   -31,   236,   331,   442,   453,
   519,   422,   364,   551,   nil,   493,   nil, 18956,   nil,   182,
   -59,   153,   247,   -38,   -27,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   796, 21800,   nil,   nil,   nil,   nil,   799,
   nil,   nil,   884,   nil, 18331,   845,   nil,   849,   nil,   nil,
  4656,   870,   nil,   294,   305, 21189,   nil,   nil,   nil,   624,
     0,   913,   nil,   nil,  1012,  1523,   nil, 23104,   nil,   nil,
   nil,   -25,   nil,   915, 22096, 22216, 17706,   104, 17331, 16956,
 16831,  1781,  3281,   407,   669,   944,   951,   970,  1005,  3656,
  3531,  3781,  2406,  2531,  3406,  2781,  2906,  2656,  2156,  1906,
  3031,  3156,  1538,  1027,  2031,  2281, 20831,   132, 21123,   nil,
   nil, 21068,   nil,   nil,  1100,   nil,   nil,  7815,   204,   102,
  1142,   nil,   nil, 17081,   nil,  5416,   nil,  6299,   nil,   nil,
   nil,  6799,  1311,  1105,  1099,   nil,   nil,  1098,  7940,  1086,
  8690, 22516, 22576,   884,  1116,   nil,   nil,  8815,  1043,   nil,
  9690, 10198, 12073, 22936, 22876,  6932, 13948,  1157, 14073,   nil,
  1043,   nil, 14198,   nil,   nil, 14698,   nil,   nil,   nil,    26,
  8828,   nil,  1024,  1015,   980,   nil,   nil,   nil,   nil,   nil,
   nil,   -77,  1056,   nil,   745,   nil,   nil,   nil,   nil,  1052,
   nil,   nil,  1050,  4406,  1080,   nil,  4281,   118,   158,  1054,
  1034, 16448, 16706, 22636, 22156,    21,   nil,   nil,   596,   nil,
 22336, 22456, 17581,   nil,   nil, 17831,   318,    51,   884,  4748,
   nil,   nil,   nil,   135,   nil,   nil,   nil,   867,   nil,   nil,
   nil,   879,   nil,   nil,   178,   nil,   nil,   865,   nil,   nil,
   nil, 21552,   nil, 18206,   844, 18456, 18706,   260,   806, 19081,
 19206,   801,   nil,   nil, 19331, 19456,   796,   nil,   nil,   nil,
   180,   231,   515,   385,   733,  1395,   724,   nil,   447,   nil,
  1656,   nil,   nil,   nil,   nil,   140,   nil,  5791,   -69,   716,
   nil,   717,   nil,  1781,  1906,   nil,   690,   nil,   718, 20331,
   nil,   nil,  1528,  -103, 20456,   542,   nil,   504,    91,   151,
   521,   225,   353,   473,   407, 15198, 23288,   430,   418,   -17,
   472,   nil,  2031,   321,   288,   nil,   nil,   nil,   247,   nil,
  2156,  2281,   162,  4844,   nil,  1487,   nil,   nil,   781,   196,
 19581,   nil,   nil,   774,   nil,   982,   510,     2,   -27,   nil,
   nil,   566,   nil,   191,   nil,   nil,   nil,   nil,   225,   nil,
    17,   161,    27,    26,    25,    41, 18581,   263,   523,   nil,
   278,   759,   -96,   nil,   nil,   457,  2531,  6187,   246, 22036,
   nil,   nil,   nil,   nil,   nil,   nil,  2656,   nil,   nil,   nil,
   nil,   nil, 23334,   392, 17456, 23150, 17206,   nil,   nil, 23472,
   nil,  6799,   nil,   nil, 16573,   nil, 23380,   nil, 16323, 16198,
 15948, 15698,   171, 15573,   505,   533,   539,   nil,   561,   539,
  1285,   135,   nil,   679,  3031, 14948,   nil,   nil,   585,   600,
   704,   nil, 14823,   nil,   589,   294,   nil,   nil,   nil,  3156,
   nil,   nil,    -7, 10073,   nil,   nil,   627,   743,   628,   627,
   628,   nil,   nil,   629,   637,   nil,   639,   nil,   nil,   647,
   628,   666,  1131,   nil,   806,   nil,  9948,   817,  3531,  3656,
   nil,  9565,  4031,    -1,    54,   nil,   849,   nil,  4531,   nil,
   861,   746,   nil,   nil,   765,   753,   nil, 23426,  6424, 23242,
  6062,   nil,   687,   nil,   nil,  1707,   nil,   804,   794,   nil,
   nil,   nil,  8065,   nil,   828,   815,   nil,   836,   nil,   nil,
   nil,   841,   nil,  3781,   887,  1049,   928,  1044,   nil,   nil,
   nil,   nil,   976,   nil,   nil,  1167,   nil,  1292,   nil,  1321,
   nil,   nil,   nil,   518,   598,   886,   nil,    43,   nil,  1013,
  1026,   nil,   229,   nil,   nil,  1033,   nil,   nil,  8078,   nil,
   915,   916,   918,   928,   nil,   932,   nil,  1005,   323,  1017,
   nil,   nil, 19706,   nil,   nil, 20206,  1091, 20081, 22996, 23056,
  1148,   -73,   998,  1005,  1006,  1007,  1256,  1023,  1012,  1395,
   nil,   nil,   nil,   nil,   nil,  1270,   nil,  1145,  7953,   nil,
   nil,  1678,   nil,  1196,   nil,   nil,   nil, 22276,   nil,  1052,
   nil,  1065,    16,    -8,    47,   957,   nil,   810,   nil,   nil,
   nil,  1160,  1100,   494,  1225,  1226,  1109,  1110,  1114,  1115,
  1156,  1167,   nil,   -10,  1129,  1134,   nil,   nil,   nil,   nil,
   621,   nil,   nil,   nil,   nil,  1149,   nil ]

racc_action_default = [
    -3,  -552,    -1,  -538,    -4,  -552,    -7,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -280,   -39,   -40,  -540,  -552,
   -45,   -47,   -48,   -49,  -255,  -255,  -255,  -290,  -325,  -326,
   -65,   -11,   -69,   -77,   -79,  -552,  -467,  -552,  -552,  -552,
  -552,  -552,  -540,  -232,  -273,  -274,  -275,  -276,  -277,  -278,
  -279,  -528,   -11,  -552,  -551,  -520,  -298,  -380,  -552,  -552,
  -303,  -306,  -538,  -552,  -552,  -552,  -552,  -327,  -328,  -416,
  -417,  -418,  -419,  -420,  -435,  -423,  -424,  -437,  -439,  -428,
  -433,  -449,  -437,  -451,  -452,  -526,  -456,  -457,  -527,  -459,
  -460,  -461,  -462,  -463,  -464,  -465,  -466,  -469,  -470,  -552,
    -2,  -539,  -547,  -548,  -549,    -6,  -552,  -552,  -552,  -552,
  -552,    -3,   -15,  -552,  -106,  -107,  -108,  -109,  -110,  -111,
  -112,  -113,  -114,  -118,  -119,  -120,  -121,  -122,  -123,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,  -132,  -133,  -134,
  -135,  -136,  -137,  -138,  -139,  -140,  -141,  -142,  -143,  -144,
  -145,  -146,  -147,  -148,  -149,  -150,  -151,  -152,  -153,  -154,
  -155,  -156,  -157,  -158,  -159,  -160,  -161,  -162,  -163,  -164,
  -165,  -166,  -167,  -168,  -169,  -170,  -171,  -172,  -173,  -174,
  -175,  -176,  -177,  -178,  -179,  -180,  -181,  -182,  -183,  -184,
  -185,  -186,  -187,   -20,  -115,   -11,  -552,  -552,  -552,  -241,
  -552,  -552,  -552,  -552,  -552,  -552,  -540,  -541,   -44,  -552,
  -467,  -552,  -280,  -552,  -552,  -224,  -552,   -11,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,  -552,
  -552,  -552,  -552,  -552,  -552,  -386,  -388,  -552,  -552,   -54,
  -241,  -552,  -297,  -391,  -400,  -402,   -60,  -397,   -61,  -540,
   -62,  -233,  -243,  -265,  -265,  -248,  -552,  -266,  -552,  -522,
  -552,   -63,   -64,  -538,   -12,  -552,   -67,   -11,  -540,  -552,
   -70,   -73,   -11,   -85,  -552,  -552,   -92,  -290,  -293,  -540,
  -552,  -325,  -326,  -329,  -398,  -552,   -75,  -552,   -81,  -287,
  -453,  -454,  -552,  -209,  -210,  -225,  -552,  -408,  -552,  -283,
  -234,  -544,  -544,  -552,  -552,  -544,  -552,  -299,  -300,  -490,
   -46,  -552,  -552,  -552,  -552,  -538,  -552,  -539,  -467,  -552,
  -552,  -280,  -552,  -339,  -340,  -101,  -102,  -552,  -104,  -552,
  -280,  -552,  -552,  -467,  -318,  -106,  -107,  -147,  -148,  -149,
  -165,  -170,  -177,  -180,  -320,  -552,  -518,  -552,  -421,  -552,
  -552,  -552,  -552,  -552,  -552,   967,    -5,  -550,   -21,   -22,
   -23,   -24,   -25,  -552,  -552,   -17,   -18,   -19,  -116,  -552,
   -27,   -36,  -188,  -266,  -552,  -552,   -28,   -37,   -38,   -29,
  -190,  -540,  -242,  -529,  -530,  -255,  -395,  -531,  -532,  -530,
  -529,  -255,  -394,  -396,  -531,  -532,   -35,  -198,   -41,   -42,
   -43,  -540,  -296,  -552,  -552,  -552,  -241,  -287,  -552,  -552,
  -552,  -199,  -200,  -201,  -202,  -203,  -204,  -205,  -206,  -211,
  -212,  -213,  -214,  -215,  -216,  -217,  -218,  -219,  -220,  -221,
  -222,  -223,  -226,  -227,  -228,  -229,  -540,  -369,  -255,  -529,
  -530,  -255,   -52,   -55,  -540,  -256,  -257,  -258,  -369,  -369,
  -540,  -292,  -244,  -264,  -245,  -264,  -262,  -552,  -267,  -525,
   -10,  -539,   -14,  -540,   -66,  -285,   -82,   -71,  -552,  -540,
  -241,  -552,  -552,   -91,  -552,  -453,  -454,  -552,   -78,   -83,
  -552,  -552,  -552,  -552,  -552,  -230,  -552,  -551,  -551,  -282,
  -540,  -235,  -546,  -545,  -237,  -546,  -288,  -289,  -521,  -552,
  -490,  -383,  -517,  -517,  -517,  -489,  -491,  -492,  -493,  -494,
  -495,  -496,  -552,  -499,  -552,  -501,  -507,  -509,  -510,  -512,
  -513,  -514,  -552,   -11,  -330,  -331,   -11,  -552,  -552,  -552,
  -552,  -552,  -241,  -552,  -552,  -287,  -311,  -101,  -102,  -103,
  -552,  -552,  -241,  -314,  -471,  -552,  -552,  -552,   -11,  -490,
  -322,  -536,  -537,  -540,  -422,  -436,  -441,  -552,  -443,  -425,
  -438,  -552,  -440,  -427,  -552,  -430,  -432,  -552,  -450,    -8,
   -16,  -552,   -26,  -552,  -272,  -552,  -552,  -399,  -552,  -552,
  -552,   -56,  -240,  -392,  -552,  -552,   -58,  -393,  -295,  -542,
  -529,  -530,  -529,  -530,  -540,  -188,  -552,  -370,  -374,  -372,
   -11,   -50,  -389,   -51,  -390,  -369,  -238,   -45,  -552,  -265,
  -254,  -540,  -260,   -11,   -11,  -291,  -265,  -263,  -268,  -552,
  -523,  -524,   -13,   -68,  -552,   -74,   -80,  -540,  -529,  -530,
  -239,   -88,   -90,  -552,   -76,  -552,  -197,  -207,  -208,  -540,
  -551,  -337,   -11,  -409,  -551,  -410,  -411,  -284,  -544,  -381,
   -11,   -11,  -374,  -552,  -482,  -552,  -485,  -487,  -552,  -552,
  -552,  -498,  -341,  -552,  -343,  -345,  -352,  -496,  -540,  -511,
  -515,  -551,  -332,  -551,  -304,  -333,  -334,  -307,  -552,  -310,
  -552,  -540,  -529,  -530,  -533,  -286,  -552,  -101,  -102,  -105,
  -540,   -11,  -552,  -473,  -316,  -552,   -11,  -490,  -552,  -552,
  -519,  -442,  -445,  -446,  -447,  -448,   -11,  -426,  -429,  -431,
  -434,  -117,  -189,  -270,  -552,  -191,  -552,  -543,   -31,  -193,
   -32,  -194,   -57,   -33,  -196,   -34,  -195,   -59,  -552,  -552,
  -552,  -552,  -399,  -552,  -517,  -517,  -517,  -368,  -552,  -374,
  -552,  -496,  -505,  -552,   -11,  -552,  -251,  -259,  -540,  -552,
  -552,  -246,  -264,  -269,   -72,   -86,   -84,  -294,    -9,   -11,
  -415,  -338,  -552,  -552,  -413,  -236,  -552,  -552,  -540,  -517,
  -517,  -502,  -516,  -517,  -517,  -508,  -517,  -497,  -503,  -540,
  -552,  -350,  -552,  -500,  -552,  -335,  -552,  -552,   -11,   -11,
  -309,  -552,   -11,  -399,  -552,  -399,  -552,  -472,   -11,  -319,
  -552,  -540,  -475,  -323,  -552,  -271,   -30,  -192,  -552,  -231,
  -359,  -361,  -552,  -364,  -366,  -552,  -371,  -552,  -375,  -376,
  -378,  -379,  -552,  -387,  -552,  -265,  -250,  -265,  -261,  -401,
  -403,  -265,  -414,   -11,   -93,  -552,  -552,  -100,  -412,  -384,
  -385,  -382,  -552,  -478,  -480,  -552,  -483,  -552,  -486,  -552,
  -488,  -342,  -344,  -348,  -552,  -353,  -301,  -552,  -302,  -552,
  -552,  -268,  -551,  -312,  -315,  -552,  -321,  -474,  -490,  -444,
  -517,  -517,  -517,  -517,  -506,  -517,  -373,  -552,  -504,  -552,
   -53,  -249,  -264,  -252,  -247,  -264,  -408,  -241,  -552,  -552,
   -99,  -517,  -517,  -517,  -517,  -346,  -552,  -351,  -552,   -11,
  -305,  -308,  -404,  -405,  -406,   -11,  -317,   -11,  -552,  -356,
  -358,  -552,  -362,  -552,  -365,  -367,  -377,  -552,  -287,  -265,
  -407,  -540,  -529,  -530,  -533,   -98,  -476,  -552,  -479,  -481,
  -484,  -552,  -349,  -551,  -552,  -552,  -517,  -517,  -517,  -517,
  -286,  -533,  -253,  -399,  -517,  -347,  -336,  -313,  -324,  -354,
  -552,  -357,  -360,  -363,  -477,  -517,  -355 ]

clist = [
'117,117,205,354,308,36,497,312,315,453,36,515,293,293,280,104,540,311',
'101,120,120,650,262,262,262,278,306,706,122,122,321,322,511,620,325',
'310,36,283,283,627,391,627,630,293,293,293,309,276,208,296,549,320,320',
'112,194,320,794,36,117,678,533,536,745,253,257,785,488,862,328,343,343',
'343,381,388,104,249,256,258,368,369,370,371,630,612,501,504,614,829',
'508,748,2,454,100,781,684,687,260,271,272,320,320,320,320,6,831,654',
'36,105,6,14,884,500,587,610,14,36,36,565,360,572,575,341,344,364,623',
'624,323,11,209,746,798,324,11,799,395,401,209,209,209,696,14,284,284',
'778,915,701,808,558,559,709,878,326,462,464,355,313,314,622,11,385,385',
'14,209,749,581,553,615,209,209,374,865,209,329,339,339,334,332,828,455',
'11,621,448,451,509,780,862,783,659,319,193,333,246,447,405,262,458,408',
'409,410,411,36,373,515,366,6,459,884,797,789,912,14,560,772,372,6,209',
'209,209,209,14,14,358,36,662,926,380,386,389,11,688,827,406,359,758',
'361,362,574,11,11,396,768,831,907,363,711,262,262,635,716,779,781,515',
'785,356,262,318,644,604,317,1,,293,,699,,,,,,,,473,,484,880,,479,293',
'13,489,36,754,36,13,942,104,283,36,471,781,,,412,276,,537,538,477,276',
',747,,283,,14,209,209,209,209,13,,209,209,209,209,209,320,320,956,955',
'456,637,11,,,742,14,,460,253,13,836,719,257,,557,,104,627,630,,881,',
'882,11,461,917,,395,401,563,732,,554,,,737,,765,209,209,873,470,,474',
',117,,209,,,,,901,655,588,,,472,13,,,,691,14,120,14,,13,13,284,14,,700',
'122,,913,,,515,,,11,764,11,,284,405,279,11,619,262,803,,539,640,626',
',,580,811,805,,,,,,640,,802,606,775,209,209,592,,,,,946,597,,,,,,591',
',,,309,209,596,396,,658,,,293,,489,385,,,,,209,293,627,489,,627,,13',
'405,262,36,640,,656,,,,283,,640,405,592,,649,592,,283,,,13,,598,,611',
',,613,,690,,,,756,,705,843,,,,761,,,,,396,,,,,209,,702,,,,,396,,,,405',
'262,36,,616,36,405,,,,625,262,320,685,685,,,13,,13,,,,633,13,,914,36',
',636,209,,703,704,515,,379,117,632,,,,,,14,,396,,,,657,284,588,209,396',
',120,,279,930,284,,11,,,122,,,,209,909,,,,,,,,293,36,489,,728,730,,588',
',733,735,293,721,766,36,36,,770,,,,774,,,,283,,,14,,,14,813,,,710,283',
'209,953,806,279,,,36,810,279,11,209,,11,209,36,36,14,804,,,,,,672,588',
',,,592,,,597,,588,11,,,,320,,,,,,,,,209,209,,117,,209,209,,36,757,837',
',,36,,,807,,,,835,14,812,36,,,891,841,893,,,,894,,14,14,,767,744,11',
'931,,,,,284,,,,,,13,11,11,,293,284,816,,,,36,875,14,,,793,,,,867,14',
'14,,,,36,,,,844,11,,,,,,,,11,11,320,,,,784,,,786,,,,,,,36,36,209,,36',
',,14,13,293,36,13,14,685,,952,,316,,15,672,,14,791,15,11,,,,640,11,',
'209,13,343,,,,,,11,838,929,,,36,,,,,15,286,286,,,,,,,,14,851,,,,,945',
',,,,15,861,,,14,,,11,845,,,331,340,340,13,,,405,262,,,,11,877,,,848',
'13,13,,,209,,14,14,,681,14,,683,36,588,,14,,405,36,,36,15,,11,11,,,11',
'13,,15,15,,11,,396,13,13,672,888,672,,,,,,,,883,,14,885,,,,,,,,383,387',
',,,,,,,11,664,666,667,,,,,,13,902,,,903,13,904,,753,,,,,,,13,,,,,,759',
'760,,,,,209,,,,,,,905,672,,,15,14,,,,,,14,,14,,,771,,466,13,468,,469',
'11,776,777,15,,,11,,11,,947,13,,948,,949,,,24,,672,,672,24,,,,,,954',
',,,,,,,24,,,13,13,,,13,24,24,24,,24,13,,965,,,672,,814,,,,15,,15,,,',
'286,15,,24,24,,,,,24,24,,,24,,,286,,13,,,,,,,,,,834,,,,,,,,,,,,,,,842',
',,584,,,,,,24,,,,,24,24,24,24,24,24,,,,,,,,,,869,870,,,872,,,,,,,,13',
',,,,,13,,13,,,,,,,,821,823,824,,,,,,,,,,,,,,,896,,618,,,,,,628,,316',
',631,,,,,,853,854,,,856,858,,860,,,,24,24,24,24,24,,,24,24,24,24,24',
',,653,,,,628,,,316,24,,,,,,,,,,,,,,,943,,,,,,944,15,,,,,,,286,,,,24',
'24,383,,,286,,,,24,,,,,,,,,,,,,,,,24,,24,,,,,24,,,919,920,922,924,,925',
',,,,,723,,,,,15,,,15,,936,938,939,940,,,,,,,,,,,,,,24,24,,15,,,,,,,',
',715,,,,,763,,24,,,,,,,,,959,961,962,963,,,24,,964,,,,,,,,,,,966,,,',
',,,,15,,,788,,,,,,,,,,15,15,,,,,,,,,,286,,,,,,,,,,,286,,,24,,,,15,,',
',,,,,15,15,,,,,,815,,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,15,,24,,,15,',
',,,,24,,,,15,,,,,,,,,,,,24,,,,,,,,,,,,,,,,871,,,,,,,,,,15,,,,,,,,,,',
'24,,,24,15,,,,847,24,,,,,,,,,,24,,,24,,,24,,,,,,,,15,15,,,15,,,,,,15',
',,,,,,,,,,,,24,24,,,,24,24,,,,,340,,,628,,,871,,,215,24,15,,,,,,261',
'261,261,,,,24,24,,,,,303,304,305,,,,,,,,,,,,,261,261,,,,,,,24,,,,,,',
',24,24,,,,,,,,,,,,,,,,15,,,,,,15,,15,,,,,,,,,,,24,,,,,24,,,,,24,,,,',
',,,,,24,,,,,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,,,,,,,24,',
',,,,,,,,,,,,,,,382,261,390,261,,,407,,,,24,,24,24,,,24,,,,215,,24,421',
'422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438',
'439,440,441,442,443,444,445,446,,,,,,261,261,,24,,,,,,261,,,,,,,261',
',261,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,495,24,,,,,,,,,,,,24,,',
',,,24,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,407,605,390,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,617,,,,,,261,,261,,261,,,,,,,,,,,,,261,,,,,,,,,,646',
'647,648,,,,,,261,,,,261,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261',
'261,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,722,,261,725,,,729,731',
',,,734,736,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,261,,817,,,,,,,,,,,,729,731,736,734,,819,,,,,,,,,,,,261,,,',
',,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,,,,,,,,,,817',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,261,,,261,,261' ]
        racc_goto_table = arr = ::Array.new(2542, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'52,52,29,51,8,48,10,63,63,36,48,116,58,58,45,90,87,61,6,55,55,11,31',
'31,31,42,29,91,56,56,16,16,125,67,16,60,48,48,48,67,22,67,152,58,58',
'58,27,41,18,46,49,27,27,14,14,27,85,48,52,109,84,84,113,64,64,148,47',
'107,48,48,48,48,25,25,90,35,35,35,16,16,16,16,152,65,62,62,65,120,62',
'118,2,22,4,147,86,86,40,40,40,27,27,27,27,7,121,132,48,5,7,21,149,94',
'23,37,21,48,48,142,138,142,142,50,50,138,37,37,95,17,21,114,96,97,17',
'98,34,34,21,21,21,99,21,21,21,118,100,101,102,103,104,105,106,4,66,66',
'92,59,80,68,17,61,61,21,21,111,57,89,38,21,21,28,110,21,21,21,21,19',
'88,119,69,17,71,34,34,122,114,107,114,123,124,15,17,126,127,52,31,129',
'27,27,27,27,48,2,116,5,7,130,149,11,109,131,21,93,133,7,7,21,21,21,21',
'21,21,136,48,125,120,18,18,18,17,87,118,18,137,72,139,140,141,17,17',
'64,12,121,110,143,144,31,31,47,145,146,147,116,148,79,31,83,47,22,81',
'1,,58,,49,,,,,,,,42,,29,113,,42,58,20,45,48,37,48,20,110,90,48,48,6',
'147,,,43,41,,16,16,46,41,,116,,48,,21,21,21,21,21,20,,21,21,21,21,21',
'27,27,85,110,40,22,17,,,23,21,,40,64,20,67,142,64,,27,,90,67,152,,114',
',114,17,43,91,,34,34,27,36,,90,,,36,,23,21,21,86,4,,43,,52,,21,,,,,114',
'25,29,,,7,20,,,,22,21,55,21,,20,20,21,21,,22,56,,11,,,116,,,17,47,17',
',21,52,9,17,63,31,23,,4,34,63,,,14,125,23,,,,,,34,,84,29,62,21,21,64',
',,,,114,64,,,,,,35,,,,27,21,35,64,,63,,,58,,45,61,,,,,21,58,67,45,,67',
',20,52,31,48,34,,60,,,,48,,34,52,64,,27,64,,48,,,20,,43,,35,,,35,,61',
',,,66,,8,84,,,,66,,,,,64,,,,,21,,16,,,,,64,,,,52,31,48,,43,48,52,,,',
'43,31,27,90,90,,,20,,20,,,,43,20,,87,48,,43,21,,90,90,116,,9,52,7,,',
',,,21,,64,,,,43,21,29,21,64,,55,,9,10,21,,17,,,56,,,,21,84,,,,,,,,58',
'48,45,,18,18,,29,,18,18,58,14,45,48,48,,60,,,,60,,,,48,,,21,,,21,51',
',,43,48,21,23,8,9,,,48,8,9,17,21,,17,21,48,48,21,16,,,,,,108,29,,,,64',
',,64,,29,17,,,,27,,,,,,,,,21,21,,52,,21,21,,48,43,63,,,48,,,90,,,,61',
'21,90,48,,,66,61,66,,,,66,,21,21,,43,112,17,22,,,,,21,,,,,,20,17,17',
',58,21,18,,,,48,8,21,,,43,,,,16,21,21,,,,48,,,,48,17,,,,,,,,17,17,27',
',,,112,,,112,,,,,,,48,48,21,,48,,,21,20,58,48,20,21,90,,66,,26,,24,108',
',21,108,24,17,,,,34,17,,21,20,48,,,,,,17,43,63,,,48,,,,,24,24,24,,,',
',,,,21,43,,,,,8,,,,,24,43,,,21,,,17,21,,,24,24,24,20,,,52,31,,,,17,43',
',,17,20,20,,,21,,21,21,,9,21,,9,48,29,,21,,52,48,,48,24,,17,17,,,17',
'20,,24,24,,17,,64,20,20,108,21,108,,,,,,,,112,,21,112,,,,,,,,26,26,',
',,,,,,17,115,115,115,,,,,,20,112,,,112,20,112,,9,,,,,,,20,,,,,,9,9,',
',,,21,,,,,,,108,108,,,24,21,,,,,,21,,21,,,9,,26,20,26,,26,17,9,9,24',
',,17,,17,,112,20,,112,,112,,,39,,108,,108,39,,,,,,112,,,,,,,,39,,,20',
'20,,,20,39,39,39,,39,20,,112,,,108,,9,,,,24,,24,,,,24,24,,39,39,,,,',
'39,39,,,39,,,24,,20,,,,,,,,,,9,,,,,,,,,,,,,,,9,,,26,,,,,,39,,,,,39,39',
'39,39,39,39,,,,,,,,,,9,9,,,9,,,,,,,,20,,,,,,20,,20,,,,,,,,115,115,115',
',,,,,,,,,,,,,,9,,26,,,,,,26,,26,,26,,,,,,115,115,,,115,115,,115,,,,39',
'39,39,39,39,,,39,39,39,39,39,,,26,,,,26,,,26,39,,,,,,,,,,,,,,,9,,,,',
',9,24,,,,,,,24,,,,39,39,26,,,24,,,,39,,,,,,,,,,,,,,,,39,,39,,,,,39,',
',115,115,115,115,,115,,,,,,26,,,,,24,,,24,,115,115,115,115,,,,,,,,,',
',,,,39,39,,24,,,,,,,,,24,,,,,26,,39,,,,,,,,,115,115,115,115,,,39,,115',
',,,,,,,,,,115,,,,,,,,24,,,26,,,,,,,,,,24,24,,,,,,,,,,24,,,,,,,,,,,24',
',,39,,,,24,,,,,,,,24,24,,,,,,26,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,24',
',39,,,24,,,,,,39,,,,24,,,,,,,,,,,,39,,,,,,,,,,,,,,,,26,,,,,,,,,,24,',
',,,,,,,,,39,,,39,24,,,,24,39,,,,,,,,,,39,,,39,,,39,,,,,,,,24,24,,,24',
',,,,,24,,,,,,,,,,,,,39,39,,,,39,39,,,,,24,,,26,,,26,,,30,39,24,,,,,',
'30,30,30,,,,39,39,,,,,30,30,30,,,,,,,,,,,,,30,30,,,,,,,39,,,,,,,,39',
'39,,,,,,,,,,,,,,,,24,,,,,,24,,24,,,,,,,,,,,39,,,,,39,,,,,39,,,,,,,,',
',39,,,,,,,,,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,,,,,,,39,,,,,',
',,,,,,,,,,,30,30,30,30,,,30,,,,39,,39,39,,,39,,,,30,,39,30,30,30,30',
'30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,,',
',,,30,30,,39,,,,,,30,,,,,,,30,,30,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,30,39,,,,,,,,,,,,39,,,,,,39,,39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,30,30',
'30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,30,,30,,30,,,,,,,,,,',
',,30,,,,,,,,,,30,30,30,,,,,,30,,,,30,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,30,30,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,30,30,',
',30,30,,,,30,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,30,,30,,,,,,,,,,,,30,30,30,30,,30,,,,,,,,,,,,30,,,,,,,30',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30,,,,,,,,,,,,,,,,,30,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,30',
',,30,,30' ]
        racc_goto_check = arr = ::Array.new(2542, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   259,    90,   nil,    89,   102,    15,   103,   -48,   377,
  -301,  -476,  -410,   nil,    45,   180,   -28,   127,    29,   112,
   278,   109,  -159,  -279,   822,  -124,   765,    -7,    57,   -16,
  1644,    -5,   nil,   nil,   -66,    51,  -240,  -334,  -286,  1054,
    69,    16,    -6,    86,   nil,   -18,    16,  -231,     5,  -287,
    57,   -63,    -8,   nil,   nil,    11,    20,  -214,   -20,   101,
   -19,   -37,  -227,   -47,    39,  -365,  -111,  -424,  -300,   -73,
   nil,  -277,  -389,   nil,   nil,   nil,   nil,   nil,   nil,   187,
   101,   202,   nil,   198,  -261,  -625,  -443,  -310,   113,  -176,
    12,  -532,    88,  -144,  -198,    66,  -554,    70,  -554,  -407,
  -729,  -408,  -558,  -197,  -206,  -411,  -663,  -723,   150,  -465,
  -622,  -445,   128,  -546,  -479,   459,  -308,   nil,  -519,  -573,
  -663,  -646,  -136,  -322,   131,  -287,   170,   -53,   nil,   -59,
   -50,  -663,  -393,  -442,   nil,   nil,   149,   158,    41,   156,
   156,  -126,  -242,   163,  -323,  -320,  -414,  -570,  -600,  -712,
   nil,   nil,  -423 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   327,   274,   nil,   307,
   nil,   795,   nil,   273,   nil,   nil,   nil,   213,    17,    12,
   214,   302,   nil,   nil,   212,   nil,   267,    16,   nil,   413,
    20,    21,    22,    23,   643,   nil,   nil,   nil,   nil,   290,
   392,    30,   nil,   nil,    32,    35,    34,   nil,   210,   338,
   nil,   119,   398,   118,   121,    70,    71,   nil,    43,   nil,
   651,   263,   nil,   264,   403,   593,   nil,   265,   nil,   nil,
   251,   nil,   nil,    44,    45,    46,    47,    48,    49,    50,
   nil,   252,    56,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   534,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   674,   523,   nil,
   675,   nil,   512,   nil,   514,   nil,   782,   607,   nil,   nil,
   nil,   520,   nil,   nil,   nil,   708,   nil,   nil,   402,   nil,
   nil,   nil,   nil,   nil,    69,    72,    73,   nil,   nil,   nil,
   nil,   nil,   570,   nil,   nil,   nil,   513,   525,   526,   752,
   529,   532,   269 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 138, :_reduce_none,
  2, 139, :_reduce_2,
  0, 140, :_reduce_3,
  1, 140, :_reduce_4,
  3, 140, :_reduce_5,
  2, 140, :_reduce_6,
  1, 142, :_reduce_none,
  4, 142, :_reduce_8,
  4, 145, :_reduce_9,
  2, 146, :_reduce_10,
  0, 150, :_reduce_11,
  1, 150, :_reduce_12,
  3, 150, :_reduce_13,
  2, 150, :_reduce_14,
  0, 165, :_reduce_15,
  4, 144, :_reduce_16,
  3, 144, :_reduce_17,
  3, 144, :_reduce_18,
  3, 144, :_reduce_19,
  2, 144, :_reduce_20,
  3, 144, :_reduce_21,
  3, 144, :_reduce_22,
  3, 144, :_reduce_23,
  3, 144, :_reduce_24,
  3, 144, :_reduce_25,
  4, 144, :_reduce_26,
  3, 144, :_reduce_27,
  3, 144, :_reduce_28,
  3, 144, :_reduce_29,
  6, 144, :_reduce_30,
  5, 144, :_reduce_31,
  5, 144, :_reduce_32,
  5, 144, :_reduce_33,
  5, 144, :_reduce_34,
  3, 144, :_reduce_35,
  3, 144, :_reduce_36,
  3, 144, :_reduce_37,
  3, 144, :_reduce_38,
  1, 144, :_reduce_none,
  1, 164, :_reduce_none,
  3, 164, :_reduce_41,
  3, 164, :_reduce_42,
  3, 164, :_reduce_43,
  2, 164, :_reduce_44,
  1, 164, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 169, :_reduce_none,
  4, 169, :_reduce_50,
  4, 169, :_reduce_51,
  0, 175, :_reduce_52,
  5, 173, :_reduce_53,
  2, 168, :_reduce_54,
  3, 168, :_reduce_55,
  4, 168, :_reduce_56,
  5, 168, :_reduce_57,
  4, 168, :_reduce_58,
  5, 168, :_reduce_59,
  2, 168, :_reduce_60,
  2, 168, :_reduce_61,
  2, 168, :_reduce_62,
  2, 168, :_reduce_63,
  2, 168, :_reduce_64,
  1, 156, :_reduce_65,
  3, 156, :_reduce_66,
  1, 179, :_reduce_67,
  3, 179, :_reduce_68,
  1, 178, :_reduce_none,
  2, 178, :_reduce_70,
  3, 178, :_reduce_71,
  5, 178, :_reduce_72,
  2, 178, :_reduce_73,
  4, 178, :_reduce_74,
  2, 178, :_reduce_75,
  4, 178, :_reduce_76,
  1, 178, :_reduce_77,
  3, 178, :_reduce_78,
  1, 182, :_reduce_none,
  3, 182, :_reduce_80,
  2, 181, :_reduce_81,
  3, 181, :_reduce_82,
  1, 184, :_reduce_83,
  3, 184, :_reduce_84,
  1, 183, :_reduce_85,
  4, 183, :_reduce_86,
  3, 183, :_reduce_87,
  3, 183, :_reduce_88,
  3, 183, :_reduce_89,
  3, 183, :_reduce_90,
  2, 183, :_reduce_91,
  1, 183, :_reduce_92,
  1, 154, :_reduce_93,
  4, 154, :_reduce_94,
  3, 154, :_reduce_95,
  3, 154, :_reduce_96,
  3, 154, :_reduce_97,
  3, 154, :_reduce_98,
  2, 154, :_reduce_99,
  1, 154, :_reduce_100,
  1, 186, :_reduce_101,
  1, 186, :_reduce_none,
  2, 187, :_reduce_103,
  1, 187, :_reduce_104,
  3, 187, :_reduce_105,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 191, :_reduce_111,
  1, 191, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 152, :_reduce_115,
  0, 194, :_reduce_116,
  4, 152, :_reduce_117,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  3, 167, :_reduce_188,
  5, 167, :_reduce_189,
  3, 167, :_reduce_190,
  5, 167, :_reduce_191,
  6, 167, :_reduce_192,
  5, 167, :_reduce_193,
  5, 167, :_reduce_194,
  5, 167, :_reduce_195,
  5, 167, :_reduce_196,
  4, 167, :_reduce_197,
  3, 167, :_reduce_198,
  3, 167, :_reduce_199,
  3, 167, :_reduce_200,
  3, 167, :_reduce_201,
  3, 167, :_reduce_202,
  3, 167, :_reduce_203,
  3, 167, :_reduce_204,
  3, 167, :_reduce_205,
  3, 167, :_reduce_206,
  4, 167, :_reduce_207,
  4, 167, :_reduce_208,
  2, 167, :_reduce_209,
  2, 167, :_reduce_210,
  3, 167, :_reduce_211,
  3, 167, :_reduce_212,
  3, 167, :_reduce_213,
  3, 167, :_reduce_214,
  3, 167, :_reduce_215,
  3, 167, :_reduce_216,
  3, 167, :_reduce_217,
  3, 167, :_reduce_218,
  3, 167, :_reduce_219,
  3, 167, :_reduce_220,
  3, 167, :_reduce_221,
  3, 167, :_reduce_222,
  3, 167, :_reduce_223,
  2, 167, :_reduce_224,
  2, 167, :_reduce_225,
  3, 167, :_reduce_226,
  3, 167, :_reduce_227,
  3, 167, :_reduce_228,
  3, 167, :_reduce_229,
  3, 167, :_reduce_230,
  6, 167, :_reduce_231,
  1, 167, :_reduce_none,
  1, 163, :_reduce_none,
  1, 196, :_reduce_none,
  2, 196, :_reduce_none,
  4, 196, :_reduce_236,
  2, 196, :_reduce_237,
  3, 201, :_reduce_238,
  0, 202, :_reduce_239,
  1, 202, :_reduce_none,
  0, 159, :_reduce_241,
  1, 159, :_reduce_none,
  1, 177, :_reduce_243,
  2, 177, :_reduce_244,
  2, 177, :_reduce_245,
  4, 177, :_reduce_246,
  6, 177, :_reduce_247,
  1, 177, :_reduce_248,
  4, 205, :_reduce_249,
  3, 205, :_reduce_250,
  2, 205, :_reduce_251,
  4, 205, :_reduce_252,
  6, 205, :_reduce_253,
  1, 205, :_reduce_254,
  0, 207, :_reduce_255,
  2, 172, :_reduce_256,
  1, 206, :_reduce_257,
  0, 208, :_reduce_258,
  3, 206, :_reduce_259,
  0, 209, :_reduce_260,
  4, 206, :_reduce_261,
  2, 204, :_reduce_262,
  2, 203, :_reduce_263,
  1, 203, :_reduce_264,
  0, 203, :_reduce_265,
  1, 198, :_reduce_266,
  2, 198, :_reduce_267,
  3, 198, :_reduce_268,
  4, 198, :_reduce_269,
  3, 162, :_reduce_270,
  4, 162, :_reduce_271,
  2, 162, :_reduce_272,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_none,
  1, 195, :_reduce_281,
  3, 195, :_reduce_282,
  0, 231, :_reduce_283,
  4, 195, :_reduce_284,
  3, 195, :_reduce_285,
  3, 195, :_reduce_286,
  2, 195, :_reduce_287,
  3, 195, :_reduce_288,
  3, 195, :_reduce_289,
  1, 195, :_reduce_290,
  4, 195, :_reduce_291,
  3, 195, :_reduce_292,
  1, 195, :_reduce_293,
  5, 195, :_reduce_294,
  4, 195, :_reduce_295,
  3, 195, :_reduce_296,
  2, 195, :_reduce_297,
  1, 195, :_reduce_none,
  2, 195, :_reduce_299,
  2, 195, :_reduce_300,
  6, 195, :_reduce_301,
  6, 195, :_reduce_302,
  0, 232, :_reduce_303,
  0, 233, :_reduce_304,
  7, 195, :_reduce_305,
  0, 234, :_reduce_306,
  0, 235, :_reduce_307,
  7, 195, :_reduce_308,
  5, 195, :_reduce_309,
  4, 195, :_reduce_310,
  0, 236, :_reduce_311,
  0, 237, :_reduce_312,
  9, 195, :_reduce_313,
  0, 238, :_reduce_314,
  6, 195, :_reduce_315,
  0, 239, :_reduce_316,
  7, 195, :_reduce_317,
  0, 240, :_reduce_318,
  5, 195, :_reduce_319,
  0, 241, :_reduce_320,
  6, 195, :_reduce_321,
  0, 242, :_reduce_322,
  0, 243, :_reduce_323,
  9, 195, :_reduce_324,
  1, 195, :_reduce_325,
  1, 195, :_reduce_326,
  1, 195, :_reduce_327,
  1, 195, :_reduce_328,
  1, 158, :_reduce_none,
  1, 221, :_reduce_none,
  1, 221, :_reduce_none,
  2, 221, :_reduce_332,
  1, 223, :_reduce_none,
  1, 223, :_reduce_none,
  1, 222, :_reduce_none,
  5, 222, :_reduce_336,
  1, 148, :_reduce_none,
  2, 148, :_reduce_338,
  1, 225, :_reduce_none,
  1, 225, :_reduce_none,
  1, 244, :_reduce_none,
  3, 244, :_reduce_342,
  1, 247, :_reduce_343,
  3, 247, :_reduce_344,
  1, 246, :_reduce_none,
  4, 246, :_reduce_346,
  6, 246, :_reduce_347,
  3, 246, :_reduce_348,
  5, 246, :_reduce_349,
  2, 246, :_reduce_350,
  4, 246, :_reduce_351,
  1, 246, :_reduce_352,
  3, 246, :_reduce_353,
  6, 248, :_reduce_354,
  8, 248, :_reduce_355,
  4, 248, :_reduce_356,
  6, 248, :_reduce_357,
  4, 248, :_reduce_358,
  2, 248, :_reduce_none,
  6, 248, :_reduce_360,
  2, 248, :_reduce_361,
  4, 248, :_reduce_362,
  6, 248, :_reduce_363,
  2, 248, :_reduce_364,
  4, 248, :_reduce_365,
  2, 248, :_reduce_366,
  4, 248, :_reduce_367,
  1, 248, :_reduce_368,
  0, 174, :_reduce_369,
  1, 174, :_reduce_370,
  3, 254, :_reduce_371,
  1, 254, :_reduce_372,
  4, 254, :_reduce_373,
  0, 255, :_reduce_374,
  2, 255, :_reduce_375,
  1, 256, :_reduce_376,
  3, 256, :_reduce_377,
  1, 257, :_reduce_378,
  1, 257, :_reduce_none,
  0, 261, :_reduce_380,
  3, 220, :_reduce_381,
  4, 259, :_reduce_382,
  1, 259, :_reduce_383,
  3, 260, :_reduce_384,
  3, 260, :_reduce_385,
  0, 264, :_reduce_386,
  5, 263, :_reduce_387,
  2, 170, :_reduce_388,
  4, 170, :_reduce_389,
  4, 170, :_reduce_390,
  2, 219, :_reduce_391,
  4, 219, :_reduce_392,
  4, 219, :_reduce_393,
  3, 219, :_reduce_394,
  3, 219, :_reduce_395,
  3, 219, :_reduce_396,
  2, 219, :_reduce_397,
  1, 219, :_reduce_398,
  4, 219, :_reduce_399,
  0, 266, :_reduce_400,
  5, 218, :_reduce_401,
  0, 267, :_reduce_402,
  5, 218, :_reduce_403,
  5, 224, :_reduce_404,
  1, 268, :_reduce_405,
  1, 268, :_reduce_none,
  6, 147, :_reduce_407,
  0, 147, :_reduce_408,
  1, 269, :_reduce_409,
  1, 269, :_reduce_none,
  1, 269, :_reduce_none,
  2, 270, :_reduce_412,
  1, 270, :_reduce_none,
  2, 149, :_reduce_414,
  1, 149, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 211, :_reduce_419,
  1, 272, :_reduce_420,
  2, 272, :_reduce_421,
  3, 273, :_reduce_422,
  1, 273, :_reduce_423,
  1, 273, :_reduce_424,
  3, 212, :_reduce_425,
  4, 213, :_reduce_426,
  3, 214, :_reduce_427,
  0, 277, :_reduce_428,
  3, 277, :_reduce_429,
  1, 278, :_reduce_430,
  2, 278, :_reduce_431,
  3, 215, :_reduce_432,
  0, 280, :_reduce_433,
  3, 280, :_reduce_434,
  0, 274, :_reduce_435,
  2, 274, :_reduce_436,
  0, 275, :_reduce_437,
  2, 275, :_reduce_438,
  0, 276, :_reduce_439,
  2, 276, :_reduce_440,
  1, 279, :_reduce_441,
  2, 279, :_reduce_442,
  0, 282, :_reduce_443,
  4, 279, :_reduce_444,
  1, 281, :_reduce_445,
  1, 281, :_reduce_446,
  1, 281, :_reduce_447,
  1, 281, :_reduce_none,
  1, 192, :_reduce_449,
  3, 193, :_reduce_450,
  1, 271, :_reduce_451,
  1, 271, :_reduce_452,
  2, 271, :_reduce_453,
  2, 271, :_reduce_454,
  1, 185, :_reduce_455,
  1, 185, :_reduce_456,
  1, 185, :_reduce_457,
  1, 185, :_reduce_458,
  1, 185, :_reduce_459,
  1, 185, :_reduce_460,
  1, 185, :_reduce_461,
  1, 185, :_reduce_462,
  1, 185, :_reduce_463,
  1, 185, :_reduce_464,
  1, 185, :_reduce_465,
  1, 185, :_reduce_466,
  1, 216, :_reduce_467,
  1, 157, :_reduce_468,
  1, 161, :_reduce_469,
  1, 161, :_reduce_470,
  1, 226, :_reduce_471,
  3, 226, :_reduce_472,
  2, 226, :_reduce_473,
  3, 228, :_reduce_474,
  2, 228, :_reduce_475,
  6, 262, :_reduce_476,
  8, 262, :_reduce_477,
  4, 262, :_reduce_478,
  6, 262, :_reduce_479,
  4, 262, :_reduce_480,
  6, 262, :_reduce_481,
  2, 262, :_reduce_482,
  4, 262, :_reduce_483,
  6, 262, :_reduce_484,
  2, 262, :_reduce_485,
  4, 262, :_reduce_486,
  2, 262, :_reduce_487,
  4, 262, :_reduce_488,
  1, 262, :_reduce_489,
  0, 262, :_reduce_490,
  1, 258, :_reduce_491,
  1, 258, :_reduce_492,
  1, 258, :_reduce_493,
  1, 258, :_reduce_494,
  1, 245, :_reduce_none,
  1, 245, :_reduce_496,
  3, 245, :_reduce_497,
  2, 245, :_reduce_498,
  1, 284, :_reduce_none,
  3, 284, :_reduce_500,
  1, 249, :_reduce_501,
  3, 249, :_reduce_502,
  3, 285, :_reduce_503,
  3, 286, :_reduce_504,
  1, 250, :_reduce_505,
  3, 250, :_reduce_506,
  1, 283, :_reduce_507,
  3, 283, :_reduce_508,
  1, 287, :_reduce_none,
  1, 287, :_reduce_none,
  2, 251, :_reduce_511,
  1, 251, :_reduce_512,
  1, 288, :_reduce_none,
  1, 288, :_reduce_none,
  2, 253, :_reduce_515,
  2, 252, :_reduce_516,
  0, 252, :_reduce_517,
  1, 229, :_reduce_none,
  3, 229, :_reduce_519,
  0, 217, :_reduce_520,
  2, 217, :_reduce_none,
  1, 200, :_reduce_522,
  3, 200, :_reduce_523,
  3, 289, :_reduce_524,
  2, 289, :_reduce_525,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 230, :_reduce_none,
  1, 230, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 166, :_reduce_none,
  1, 166, :_reduce_none,
  2, 180, :_reduce_542,
  2, 160, :_reduce_543,
  0, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 227, :_reduce_547,
  1, 227, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_none,
  0, 197, :_reduce_551 ]

racc_reduce_n = 552

racc_shift_n = 967

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUMINUS_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tPLUS => 104,
  :tMINUS => 105,
  :tLT => 106,
  :tGT => 107,
  :tPIPE => 108,
  :tBANG => 109,
  :tCARET => 110,
  :tLCURLY => 111,
  :tRCURLY => 112,
  :tBACK_REF2 => 113,
  :tSYMBEG => 114,
  :tSTRING_BEG => 115,
  :tXSTRING_BEG => 116,
  :tREGEXP_BEG => 117,
  :tREGEXP_OPT => 118,
  :tWORDS_BEG => 119,
  :tQWORDS_BEG => 120,
  :tSTRING_DBEG => 121,
  :tSTRING_DVAR => 122,
  :tSTRING_END => 123,
  :tSTRING => 124,
  :tSYMBOL => 125,
  :tNL => 126,
  :tEH => 127,
  :tCOLON => 128,
  :tCOMMA => 129,
  :tSPACE => 130,
  :tSEMI => 131,
  :tLAMBDA => 132,
  :tLAMBEG => 133,
  :tCHARACTER => 134,
  :tEQL => 135,
  :tLOWEST => 136 }

racc_nt_base = 137

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "primary",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@4",
  "@5",
  "@6",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@20",
  "f_args",
  "do_block",
  "@21",
  "operation3",
  "@22",
  "@23",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@24",
  "f_optarg",
  "f_arg_item",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'macruby.y', 51)
  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 56)
  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 60)
  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 64)
  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 68)
  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'macruby.y', 74)
  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 79)
  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 95)
  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 100)
  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 104)
  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 108)
  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 112)
  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 117)
  def _reduce_15(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 121)
  def _reduce_16(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 125)
  def _reduce_17(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 131)
  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 137)
  def _reduce_19(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 141)
  def _reduce_20(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 145)
  def _reduce_21(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 150)
  def _reduce_22(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 155)
  def _reduce_23(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 159)
  def _reduce_24(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 163)
  def _reduce_25(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 171)
  def _reduce_26(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 175)
  def _reduce_27(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 179)
  def _reduce_28(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 183)
  def _reduce_29(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 187)
  def _reduce_30(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 194)
  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 201)
  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 208)
  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 215)
  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 222)
  def _reduce_35(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 226)
  def _reduce_36(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 231)
  def _reduce_37(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 235)
  def _reduce_38(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end
.,.,

# reduce 39 omitted

# reduce 40 omitted

module_eval(<<'.,.,', 'macruby.y', 243)
  def _reduce_41(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 247)
  def _reduce_42(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 251)
  def _reduce_43(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 255)
  def _reduce_44(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

module_eval(<<'.,.,', 'macruby.y', 267)
  def _reduce_50(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 272)
  def _reduce_51(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 278)
  def _reduce_52(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 282)
  def _reduce_53(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 289)
  def _reduce_54(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  *val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 294)
  def _reduce_55(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        *val[1])

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 303)
  def _reduce_56(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 308)
  def _reduce_57(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 317)
  def _reduce_58(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  *val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 322)
  def _reduce_59(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        *val[3])

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 331)
  def _reduce_60(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  *val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 336)
  def _reduce_61(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  *val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 341)
  def _reduce_62(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 346)
  def _reduce_63(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 351)
  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 357)
  def _reduce_65(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 361)
  def _reduce_66(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 366)
  def _reduce_67(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 370)
  def _reduce_68(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 69 omitted

module_eval(<<'.,.,', 'macruby.y', 376)
  def _reduce_70(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 381)
  def _reduce_71(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 386)
  def _reduce_72(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 392)
  def _reduce_73(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 397)
  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 403)
  def _reduce_75(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 407)
  def _reduce_76(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 412)
  def _reduce_77(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 416)
  def _reduce_78(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

# reduce 79 omitted

module_eval(<<'.,.,', 'macruby.y', 423)
  def _reduce_80(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 428)
  def _reduce_81(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 432)
  def _reduce_82(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 437)
  def _reduce_83(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 441)
  def _reduce_84(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 446)
  def _reduce_85(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 450)
  def _reduce_86(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 454)
  def _reduce_87(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 458)
  def _reduce_88(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 462)
  def _reduce_89(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 466)
  def _reduce_90(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 471)
  def _reduce_91(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 476)
  def _reduce_92(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 481)
  def _reduce_93(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 485)
  def _reduce_94(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 489)
  def _reduce_95(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 493)
  def _reduce_96(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 497)
  def _reduce_97(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 501)
  def _reduce_98(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 506)
  def _reduce_99(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 511)
  def _reduce_100(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 516)
  def _reduce_101(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'macruby.y', 522)
  def _reduce_103(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 526)
  def _reduce_104(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 530)
  def _reduce_105(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

module_eval(<<'.,.,', 'macruby.y', 539)
  def _reduce_111(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

module_eval(<<'.,.,', 'macruby.y', 548)
  def _reduce_115(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 552)
  def _reduce_116(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 556)
  def _reduce_117(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end
.,.,

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

module_eval(<<'.,.,', 'macruby.y', 577)
  def _reduce_188(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 581)
  def _reduce_189(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 591)
  def _reduce_190(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 595)
  def _reduce_191(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 605)
  def _reduce_192(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 612)
  def _reduce_193(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 619)
  def _reduce_194(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 626)
  def _reduce_195(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 633)
  def _reduce_196(val, _values, result)
                          diagnostic :error, :dynamic_const, nil, val[2], [ val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 637)
  def _reduce_197(val, _values, result)
                          diagnostic :error, :dynamic_const, nil, val[1], [ val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 641)
  def _reduce_198(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 645)
  def _reduce_199(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 649)
  def _reduce_200(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 653)
  def _reduce_201(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 657)
  def _reduce_202(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 661)
  def _reduce_203(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 665)
  def _reduce_204(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 669)
  def _reduce_205(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 673)
  def _reduce_206(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 677)
  def _reduce_207(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.integer(val[1]),
                                      val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 684)
  def _reduce_208(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    @builder.float(val[1]),
                                      val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 691)
  def _reduce_209(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 695)
  def _reduce_210(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 699)
  def _reduce_211(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 703)
  def _reduce_212(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 707)
  def _reduce_213(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 711)
  def _reduce_214(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 715)
  def _reduce_215(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 719)
  def _reduce_216(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 723)
  def _reduce_217(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 727)
  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 731)
  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 735)
  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 739)
  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 743)
  def _reduce_222(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 747)
  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 751)
  def _reduce_224(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 755)
  def _reduce_225(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 759)
  def _reduce_226(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 763)
  def _reduce_227(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 767)
  def _reduce_228(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 771)
  def _reduce_229(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 775)
  def _reduce_230(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 780)
  def _reduce_231(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

module_eval(<<'.,.,', 'macruby.y', 791)
  def _reduce_236(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 795)
  def _reduce_237(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 800)
  def _reduce_238(val, _values, result)
                          result = val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 805)
  def _reduce_239(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end
.,.,

# reduce 240 omitted

module_eval(<<'.,.,', 'macruby.y', 811)
  def _reduce_241(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 242 omitted

module_eval(<<'.,.,', 'macruby.y', 817)
  def _reduce_243(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 821)
  def _reduce_244(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 825)
  def _reduce_245(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 830)
  def _reduce_246(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 836)
  def _reduce_247(val, _values, result)
                          val[2][-1] = @builder.objc_varargs(val[2][-1], val[4])
                      assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 843)
  def _reduce_248(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 848)
  def _reduce_249(val, _values, result)
                          result = [ val[0], *val[2].concat(val[3]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 852)
  def _reduce_250(val, _values, result)
                          result = [ val[0], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 856)
  def _reduce_251(val, _values, result)
                          result =  [ @builder.associate(nil, val[0], nil),
                                  *val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 861)
  def _reduce_252(val, _values, result)
                          result =  [ val[0],
                                  @builder.associate(nil, val[2], nil),
                                  *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 867)
  def _reduce_253(val, _values, result)
                          result =  [ val[0],
                                  *val[2].
                                    push(@builder.associate(nil, val[4], nil)).
                                    concat(val[5]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 874)
  def _reduce_254(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 878)
  def _reduce_255(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 883)
  def _reduce_256(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 890)
  def _reduce_257(val, _values, result)
                          result = [ nil, val[0], nil ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 894)
  def _reduce_258(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 898)
  def _reduce_259(val, _values, result)
                          result = [ val[0], [], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 902)
  def _reduce_260(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 906)
  def _reduce_261(val, _values, result)
                          result = [ val[0], val[1], val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 911)
  def _reduce_262(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 916)
  def _reduce_263(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 920)
  def _reduce_264(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 924)
  def _reduce_265(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 929)
  def _reduce_266(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 933)
  def _reduce_267(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 937)
  def _reduce_268(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 941)
  def _reduce_269(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 946)
  def _reduce_270(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 950)
  def _reduce_271(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 954)
  def _reduce_272(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

module_eval(<<'.,.,', 'macruby.y', 967)
  def _reduce_281(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 971)
  def _reduce_282(val, _values, result)
                          result = @builder.begin_keyword(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 975)
  def _reduce_283(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 979)
  def _reduce_284(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 983)
  def _reduce_285(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 987)
  def _reduce_286(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 991)
  def _reduce_287(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 995)
  def _reduce_288(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 999)
  def _reduce_289(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1003)
  def _reduce_290(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1007)
  def _reduce_291(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1011)
  def _reduce_292(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1015)
  def _reduce_293(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1019)
  def _reduce_294(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1024)
  def _reduce_295(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1028)
  def _reduce_296(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1032)
  def _reduce_297(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

# reduce 298 omitted

module_eval(<<'.,.,', 'macruby.y', 1041)
  def _reduce_299(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1047)
  def _reduce_300(val, _values, result)
                          lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1055)
  def _reduce_301(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1062)
  def _reduce_302(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1069)
  def _reduce_303(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1073)
  def _reduce_304(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1077)
  def _reduce_305(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1082)
  def _reduce_306(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1086)
  def _reduce_307(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1090)
  def _reduce_308(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1095)
  def _reduce_309(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1103)
  def _reduce_310(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1111)
  def _reduce_311(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1115)
  def _reduce_312(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1119)
  def _reduce_313(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1125)
  def _reduce_314(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1130)
  def _reduce_315(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1144)
  def _reduce_316(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1152)
  def _reduce_317(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1162)
  def _reduce_318(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1167)
  def _reduce_319(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1179)
  def _reduce_320(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1185)
  def _reduce_321(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1194)
  def _reduce_322(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1198)
  def _reduce_323(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1204)
  def _reduce_324(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1213)
  def _reduce_325(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1217)
  def _reduce_326(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1221)
  def _reduce_327(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1225)
  def _reduce_328(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end
.,.,

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

module_eval(<<'.,.,', 'macruby.y', 1234)
  def _reduce_332(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 333 omitted

# reduce 334 omitted

# reduce 335 omitted

module_eval(<<'.,.,', 'macruby.y', 1243)
  def _reduce_336(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end
.,.,

# reduce 337 omitted

module_eval(<<'.,.,', 'macruby.y', 1254)
  def _reduce_338(val, _values, result)
                          result = val
                    
    result
  end
.,.,

# reduce 339 omitted

# reduce 340 omitted

# reduce 341 omitted

module_eval(<<'.,.,', 'macruby.y', 1263)
  def _reduce_342(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1268)
  def _reduce_343(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1272)
  def _reduce_344(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 345 omitted

module_eval(<<'.,.,', 'macruby.y', 1278)
  def _reduce_346(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1283)
  def _reduce_347(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1289)
  def _reduce_348(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1294)
  def _reduce_349(val, _values, result)
                          result = val[0].
                                  push(@builder.objc_restarg(val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1300)
  def _reduce_350(val, _values, result)
                          result = [ @builder.objc_restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1304)
  def _reduce_351(val, _values, result)
                          result = [ @builder.objc_restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1309)
  def _reduce_352(val, _values, result)
                          result = [ @builder.objc_restarg(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1313)
  def _reduce_353(val, _values, result)
                          result = [ @builder.objc_restarg(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1319)
  def _reduce_354(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1326)
  def _reduce_355(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1334)
  def _reduce_356(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1340)
  def _reduce_357(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1347)
  def _reduce_358(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

# reduce 359 omitted

module_eval(<<'.,.,', 'macruby.y', 1354)
  def _reduce_360(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1361)
  def _reduce_361(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1365)
  def _reduce_362(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1371)
  def _reduce_363(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1378)
  def _reduce_364(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1383)
  def _reduce_365(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1389)
  def _reduce_366(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1394)
  def _reduce_367(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1400)
  def _reduce_368(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1405)
  def _reduce_369(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1409)
  def _reduce_370(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1414)
  def _reduce_371(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1418)
  def _reduce_372(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1422)
  def _reduce_373(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1427)
  def _reduce_374(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1431)
  def _reduce_375(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1436)
  def _reduce_376(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1440)
  def _reduce_377(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1445)
  def _reduce_378(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end
.,.,

# reduce 379 omitted

module_eval(<<'.,.,', 'macruby.y', 1450)
  def _reduce_380(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1454)
  def _reduce_381(val, _values, result)
                          result = [ val[1], val[2] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1461)
  def _reduce_382(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1465)
  def _reduce_383(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1470)
  def _reduce_384(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1474)
  def _reduce_385(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1479)
  def _reduce_386(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1483)
  def _reduce_387(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1490)
  def _reduce_388(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1496)
  def _reduce_389(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1502)
  def _reduce_390(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1509)
  def _reduce_391(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1515)
  def _reduce_392(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1521)
  def _reduce_393(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1527)
  def _reduce_394(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1531)
  def _reduce_395(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1537)
  def _reduce_396(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1543)
  def _reduce_397(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1549)
  def _reduce_398(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1553)
  def _reduce_399(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1558)
  def _reduce_400(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1562)
  def _reduce_401(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1568)
  def _reduce_402(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1572)
  def _reduce_403(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1579)
  def _reduce_404(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1585)
  def _reduce_405(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 406 omitted

module_eval(<<'.,.,', 'macruby.y', 1591)
  def _reduce_407(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1604)
  def _reduce_408(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1609)
  def _reduce_409(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 410 omitted

# reduce 411 omitted

module_eval(<<'.,.,', 'macruby.y', 1616)
  def _reduce_412(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 413 omitted

module_eval(<<'.,.,', 'macruby.y', 1622)
  def _reduce_414(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

# reduce 418 omitted

module_eval(<<'.,.,', 'macruby.y', 1632)
  def _reduce_419(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1637)
  def _reduce_420(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1641)
  def _reduce_421(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1646)
  def _reduce_422(val, _values, result)
                          result = @builder.string_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1650)
  def _reduce_423(val, _values, result)
                          result = @builder.string(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1654)
  def _reduce_424(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1659)
  def _reduce_425(val, _values, result)
                          result = @builder.xstring_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1664)
  def _reduce_426(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1670)
  def _reduce_427(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1675)
  def _reduce_428(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1679)
  def _reduce_429(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1684)
  def _reduce_430(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1688)
  def _reduce_431(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1693)
  def _reduce_432(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1698)
  def _reduce_433(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1702)
  def _reduce_434(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1707)
  def _reduce_435(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1711)
  def _reduce_436(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1716)
  def _reduce_437(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1720)
  def _reduce_438(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1725)
  def _reduce_439(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1729)
  def _reduce_440(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1734)
  def _reduce_441(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1738)
  def _reduce_442(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1742)
  def _reduce_443(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1747)
  def _reduce_444(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1755)
  def _reduce_445(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1759)
  def _reduce_446(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1763)
  def _reduce_447(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

# reduce 448 omitted

module_eval(<<'.,.,', 'macruby.y', 1770)
  def _reduce_449(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1775)
  def _reduce_450(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1780)
  def _reduce_451(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1784)
  def _reduce_452(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1788)
  def _reduce_453(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.integer(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1793)
  def _reduce_454(val, _values, result)
                          result = @builder.negate(val[0],
                                  @builder.float(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1799)
  def _reduce_455(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1803)
  def _reduce_456(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1807)
  def _reduce_457(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1811)
  def _reduce_458(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1815)
  def _reduce_459(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1819)
  def _reduce_460(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1823)
  def _reduce_461(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1827)
  def _reduce_462(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1831)
  def _reduce_463(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1835)
  def _reduce_464(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1839)
  def _reduce_465(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1843)
  def _reduce_466(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1848)
  def _reduce_467(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1853)
  def _reduce_468(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1858)
  def _reduce_469(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1862)
  def _reduce_470(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1867)
  def _reduce_471(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1871)
  def _reduce_472(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1875)
  def _reduce_473(val, _values, result)
                          yyerrok
                      result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1881)
  def _reduce_474(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1887)
  def _reduce_475(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1892)
  def _reduce_476(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1899)
  def _reduce_477(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1907)
  def _reduce_478(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1913)
  def _reduce_479(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1920)
  def _reduce_480(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1926)
  def _reduce_481(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1933)
  def _reduce_482(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1938)
  def _reduce_483(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1944)
  def _reduce_484(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1951)
  def _reduce_485(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1956)
  def _reduce_486(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1962)
  def _reduce_487(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1967)
  def _reduce_488(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1973)
  def _reduce_489(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1977)
  def _reduce_490(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1982)
  def _reduce_491(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1986)
  def _reduce_492(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1990)
  def _reduce_493(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 1994)
  def _reduce_494(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end
.,.,

# reduce 495 omitted

module_eval(<<'.,.,', 'macruby.y', 2000)
  def _reduce_496(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.arg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2006)
  def _reduce_497(val, _values, result)
                          @static_env.declare val[2][0]

                      result = @builder.objc_kwarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2012)
  def _reduce_498(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.objc_kwarg(val[0], nil, val[1])
                    
    result
  end
.,.,

# reduce 499 omitted

module_eval(<<'.,.,', 'macruby.y', 2020)
  def _reduce_500(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2025)
  def _reduce_501(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2029)
  def _reduce_502(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2034)
  def _reduce_503(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2041)
  def _reduce_504(val, _values, result)
                          @static_env.declare val[0][0]

                      result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2048)
  def _reduce_505(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2052)
  def _reduce_506(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2057)
  def _reduce_507(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2061)
  def _reduce_508(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 509 omitted

# reduce 510 omitted

module_eval(<<'.,.,', 'macruby.y', 2068)
  def _reduce_511(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2074)
  def _reduce_512(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end
.,.,

# reduce 513 omitted

# reduce 514 omitted

module_eval(<<'.,.,', 'macruby.y', 2081)
  def _reduce_515(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2088)
  def _reduce_516(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2092)
  def _reduce_517(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 518 omitted

module_eval(<<'.,.,', 'macruby.y', 2098)
  def _reduce_519(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2103)
  def _reduce_520(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 521 omitted

module_eval(<<'.,.,', 'macruby.y', 2109)
  def _reduce_522(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2113)
  def _reduce_523(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2118)
  def _reduce_524(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2122)
  def _reduce_525(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end
.,.,

# reduce 526 omitted

# reduce 527 omitted

# reduce 528 omitted

# reduce 529 omitted

# reduce 530 omitted

# reduce 531 omitted

# reduce 532 omitted

# reduce 533 omitted

# reduce 534 omitted

# reduce 535 omitted

# reduce 536 omitted

# reduce 537 omitted

# reduce 538 omitted

# reduce 539 omitted

# reduce 540 omitted

# reduce 541 omitted

module_eval(<<'.,.,', 'macruby.y', 2133)
  def _reduce_542(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'macruby.y', 2137)
  def _reduce_543(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 544 omitted

# reduce 545 omitted

# reduce 546 omitted

module_eval(<<'.,.,', 'macruby.y', 2143)
  def _reduce_547(val, _values, result)
                        yyerrok
                  
    result
  end
.,.,

# reduce 548 omitted

# reduce 549 omitted

# reduce 550 omitted

module_eval(<<'.,.,', 'macruby.y', 2152)
  def _reduce_551(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class MacRuby
  end   # module Parser
