# -*- encoding:utf-8; warn-indent:false; frozen_string_literal: true  -*-
#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require 'parser'

Parser.check_for_encoding_support

module Parser
  class Ruby23 < Parser::Base

module_eval(<<'...end ruby23.y/module_eval...', 'ruby23.y', 2339)

  def version
    23
  end

  def default_encoding
    Encoding::UTF_8
  end
...end ruby23.y/module_eval...
##### State transition tables begin ###

clist = [
'-289,-102,570,-98,219,-98,715,-289,-289,-289,270,-100,-289,-289,-289',
'610,-289,270,570,-102,580,570,612,216,217,-286,-289,-289,-289,113,-105',
'-104,446,220,112,79,-289,-289,-99,-289,-289,-289,-289,-289,-104,220',
'-97,80,-83,814,-97,-101,220,570,113,216,217,81,-69,112,-99,-105,805',
'-100,570,-286,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-103,609,-289,-289,-289,840,772,-289,611,-105,-289,715',
'715,-289,-289,582,-289,269,-289,583,-289,220,-289,-289,269,-289,-289',
'-289,-289,-289,113,-289,-101,-289,-89,112,-571,113,-103,-102,113,-98',
'112,841,-102,112,-98,-289,-93,-100,-289,-289,-289,-289,-100,-289,113',
'-289,-575,113,-95,112,-289,-103,112,-575,-575,-575,-105,220,-575,-575',
'-575,-105,-575,-88,-99,-572,813,220,-92,-99,-104,-575,-575,-575,-575',
'-104,-97,-90,-96,113,-91,-97,-575,-575,112,-575,-575,-575,-575,-575',
'113,-572,216,217,805,112,-91,-571,-92,-489,-90,216,217,113,113,240,-103',
'270,112,112,647,-103,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575',
'-575,-575,-575,-575,270,677,-575,-575,-575,265,771,-575,212,-94,-575',
'265,-101,-575,-575,443,-575,-101,-575,646,-575,647,-575,-575,444,-575',
'-575,-575,-575,-575,-98,-575,-575,-575,220,770,-91,-571,-92,-474,-90',
'91,92,91,92,265,-474,-575,677,517,-575,-575,-575,-575,113,-575,646,-575',
'-474,112,220,769,-575,-101,265,-474,-474,-474,269,220,-474,-474,-474',
'213,-474,220,-91,-93,-92,-91,-90,-92,-474,-90,-474,-474,-474,269,401',
'-91,859,-92,-102,-90,-474,-474,-95,-474,-474,-474,-474,-474,566,565',
'-474,550,-104,547,546,545,550,548,547,546,545,626,548,517,-100,93,94',
'93,94,625,-474,-474,-474,-474,-474,-474,-474,-474,-474,-474,-474,-474',
'-474,-474,597,798,-474,-474,-474,-93,-474,-474,849,-99,-474,597,388',
'-474,-474,597,-474,597,-474,445,-474,597,-474,-474,-93,-474,-474,-474',
'-474,-474,-289,-474,-91,-474,-102,398,-104,-289,-289,-289,400,399,-100',
'-289,-289,-93,-289,-474,-93,955,-474,-474,-474,-474,832,-474,647,-474',
'-93,647,597,-488,-474,-474,599,598,-289,-289,492,-289,-289,-289,-289',
'-289,748,599,598,595,490,599,598,599,598,604,447,599,598,602,113,746',
'113,646,662,112,646,112,-289,-289,-289,-289,-289,-289,-289,-289,-289',
'-289,-289,-289,-289,-289,-477,-263,-289,-289,-289,448,630,-477,-97,220',
'-289,597,978,-289,599,598,608,597,-289,259,-289,597,-289,-289,219,-289',
'-289,-289,-289,-289,-477,-289,-488,-289,805,858,576,-477,-477,-477,216',
'217,-477,-477,-477,-290,-477,-289,836,805,-289,-289,-290,-94,-477,-289',
'-477,-477,-477,216,217,-290,-289,-103,214,-477,-477,-477,774,-477,-477',
'-477,-477,-477,220,599,598,600,479,-88,488,599,598,595,-484,599,598',
'613,-482,-97,479,-484,490,755,492,-482,-477,-477,-477,-477,-477,-477',
'-477,-477,-477,-477,-477,-477,-477,-477,-290,-96,-477,-477,-477,-485',
'-477,-477,216,217,-477,-105,-485,-477,-477,220,-477,212,-477,479,-477',
'-575,-477,-477,263,-477,-477,-477,-477,-477,-90,-477,529,-477,500,531',
'319,212,212,-484,-99,-481,861,-482,263,579,529,-477,-481,528,-477,-477',
'-477,-477,577,-477,529,-477,-575,531,836,805,-477,-477,-489,-575,-575',
'-575,692,555,-485,-575,-575,-575,-575,529,864,866,531,558,-575,-480',
'213,-575,-479,-571,868,870,-480,-575,220,-479,872,873,-575,-575,-68',
'-575,-575,-575,-575,-575,213,213,876,756,-481,-487,-575,-483,878,-89',
'566,565,-487,879,-483,559,240,677,220,-98,881,-487,-575,-575,-575,-575',
'-575,-575,-575,-575,-575,-575,-575,-575,-575,-575,-575,318,-575,-575',
'-575,-261,631,885,-480,887,-575,-479,237,-575,503,-262,239,238,-575',
'890,-575,692,-575,-575,892,-575,-575,-575,-575,-575,-296,-575,-575,-575',
'-487,894,-483,-296,-296,-296,896,898,-296,-296,-296,212,-296,-575,898',
'220,-575,-575,937,-92,750,-575,-296,-296,904,749,906,587,-575,-101,259',
'908,-296,-296,745,-296,-296,-296,-296,-296,735,504,215,-289,718,-332',
'576,914,511,711,-289,917,-332,220,550,-572,547,546,545,-289,548,-332',
'-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296,-296',
'213,709,-296,-296,-296,921,-264,-296,708,274,-296,707,208,-296,-296',
'701,-296,274,-296,699,-296,697,-296,-296,704,-296,-296,-296,-296,-296',
'-280,-296,-289,-296,-332,695,693,-280,-280,-280,931,692,-280,-280,-280',
'-486,-280,-296,207,689,-296,-296,-486,-296,938,-296,-280,-280,-280,740',
'741,-486,-296,742,107,108,-280,-280,939,-280,-280,-280,-280,-280,206',
'212,220,212,685,212,948,949,211,683,984,682,510,265,514,677,522,209',
'957,982,518,508,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'-280,-280,-280,-486,212,-280,-280,-280,959,960,-280,937,220,-280,965',
'735,-280,-280,692,-280,587,-280,968,-280,970,-280,-280,972,-280,-280',
'-280,-280,-280,213,-280,213,-280,213,974,555,550,212,547,546,545,974',
'548,830,520,558,-280,666,-568,-280,-280,-280,-280,444,-280,-244,-280',
'-83,220,240,220,-280,-244,-244,-244,213,532,-244,-244,-244,985,-244',
'220,701,986,898,898,240,566,565,-244,-244,-244,559,898,991,220,957,-569',
'533,121,-244,-244,240,-244,-244,-244,-244,-244,240,-474,240,213,240',
'-279,492,637,-474,634,237,-572,-279,-568,239,238,-571,-474,682,109,265',
'-279,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244,-244',
'-244,-568,576,-244,-244,-244,-477,390,-244,-290,265,-244,624,-477,-244',
'-244,-290,-244,-569,-244,623,-244,-477,-244,-244,-290,-244,-244,-244',
'-244,-244,-474,-244,-244,-244,-279,240,957,220,1010,1011,-569,212,-289',
'1012,974,974,974,-244,585,-289,-244,-244,-576,-244,-572,-244,220,587',
'-289,-576,-576,-576,-244,619,-576,-576,-576,237,-576,-261,-477,239,238',
'-290,235,236,617,-576,-576,-576,-576,934,614,547,546,545,898,548,-576',
'-576,957,-576,-576,-576,-576,-576,934,589,547,546,545,240,548,581,974',
',213,-289,,,550,,547,546,545,,548,,-576,-576,-576,-576,-576,-576,-576',
'-576,-576,-576,-576,-576,-576,-576,,237,-576,-576,-576,239,238,-576',
'235,236,-576,,,-576,-576,701,-576,,-576,,-576,,-576,-576,704,-576,-576',
'-576,-576,-576,,-576,-576,-576,550,,547,546,545,550,548,547,546,545',
',548,,-576,,,-576,-576,-576,-576,,-576,-577,-576,,,,,-576,-577,-577',
'-577,,,-577,-577,-577,701,-577,240,,,701,,,,903,-577,-577,-577,-577',
',,,,254,255,,-577,-577,,-577,-577,-577,-577,-577,550,,547,546,545,237',
'548,243,,239,238,,235,236,,,241,,242,,,,-577,-577,-577,-577,-577,-577',
'-577,-577,-577,-577,-577,-577,-577,-577,,701,-577,-577,-577,,,-577,',
',-577,,,-577,-577,,-577,,-577,,-577,,-577,-577,,-577,-577,-577,-577',
'-577,,-577,-577,-577,116,117,118,119,120,,,,550,,547,546,545,-577,548',
',-577,-577,-577,-577,,-577,-244,-577,,,,,-577,-244,-244,-244,,,-244',
'-244,-244,550,-244,547,546,545,555,548,,701,,-244,-244,,,,558,,,240',
',,-244,-244,,-244,-244,-244,-244,-244,116,117,118,119,120,254,255,,553',
'116,117,118,119,120,,,,563,562,566,565,237,,243,559,239,238,,235,236',
',,241,-244,242,-409,,,,,-244,,-409,-409,-409,265,-244,-409,-409,-409',
'220,-409,550,,547,546,545,,548,,-409,-409,-409,,,,,,-244,-244,,-409',
'-409,,-409,-409,-409,-409,-409,,,,,-244,,,-244,,,701,,-244,,,,,,,-244',
',,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409,-409',
',,-409,-409,-409,,,-409,,265,-409,,,-409,-409,,-409,,-409,,-409,,-409',
'-409,,-409,-409,-409,-409,-409,,-409,-409,-409,,,,,,,,,,,,,,-409,,,-409',
'-409,,-409,,-409,5,69,70,71,9,57,-409,,,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,635,8,45,7,10,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,258,,-238,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,620,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,635,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,5',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252',
'253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258',
',,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248',
'256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250',
'251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60',
',35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
'240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,',
',33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70',
'71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,220,258,,,',
',62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256',
'257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44',
'239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,',
'80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251',
'246,248,256,257,252,253,,233,234,,,254,255,,40,,,296,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45',
'294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244',
'249,250,251,246,248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58',
'59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57',
',,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,240,244,249,250,251,246,248,256,257,252,253,,233,234,,,254,255',
',40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257,252,253,,233',
'234,,,254,255,,40,,,296,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,258,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246,248,256,257',
'252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239',
'238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251,246',
'248,256,257,252,253,,233,234,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,258,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,-596,-596',
'-596,-596,246,248,,,-596,-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35',
'237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249',
'250,251,246,248,256,257,252,253,,-596,-596,,,254,255,,40,,,33,,,58,59',
',,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
'240,244,249,250,251,246,248,256,257,252,253,,-596,-596,,,254,255,,40',
',,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20,242',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71',
'9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237',
',243,44,239,238,,235,236,,,241,20,242,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,244,249,250,251',
'246,248,256,,252,253,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243',
'44,239,238,,235,236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,',
',,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,',
',,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,244,249,250,251,246,248,,,252,253,,,,,,254,255',
',40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241,20',
'242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,240,-596,-596,-596,-596,246,248,,,-596,-596,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,5,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98,,99,107,108,',
'91,92,42,43,41,240,-596,-596,-596,-596,246,248,,,-596,-596,,,,,,254',
'255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247,245,241',
'20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292',
'69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,240,-596,-596,-596,-596,246,248,,,-596,-596,,,,',
',254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236,247',
'245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93',
'94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,240,-596,-596,-596,-596,246,248,,,-596,-596',
',,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235,236',
'247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,240,-596,-596,-596,-596,246,248,,,-596',
'-596,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238,,235',
'236,247,245,241,20,242,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62',
',81,93,94,292,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,',
',,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,40,,,33',
',,58,59,,,60,,35,237,,243,44,239,238,,235,236,,,,20,,,,,89,79,82,83',
',84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,292,69,70,71,9,57,,,,63,64',
',,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,',
'8,45,294,10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,240',
',,,,,,,,,,,,,,,254,255,,40,,,33,,,58,59,,,60,,35,237,,243,44,239,238',
',235,236,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62',
'57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101',
'100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108',
',91,92,42,43,41,240,,,,,,,,,,,,,,,,254,255,,225,,,231,,,58,59,,,60,',
'659,237,281,,44,239,238,287,235,236,,,,230,,,,,89,284,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31',
'72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,113,,,,,112',
'62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68,311,312,72,73,,,',
',,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,350,,,33,,,58,59,',
',60,,35,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,355,56,97,96,356,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,362,,,357,,,231,,,58,59,,,60,,,,,,',
',,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,355,56,97,96,356,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,357,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,',
',105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,',
',,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,287,,,,,,230,,,,,89,284,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67',
',65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,7',
'10,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,',
',,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,,,,63,64,,',
',67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,69',
'70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35,,,,44,,,,,,',
',,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72',
'73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56',
'97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,',
'58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286',
'99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88',
',,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73',
',,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96',
'98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59',
',,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69',
'70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27',
'101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,',
',,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,220,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,406,,,,44,,,',
',,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,',
',,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307',
'308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,',
',,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,',
',,,,,,,,,,,,,875,,,231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,',
'105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,',
',,,305,,,231,,,58,59,,,60,,,550,,547,546,545,555,548,,,,,,,,,558,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,317,,553,62,,81,93,94,69,70,71,,57',
'566,565,,63,64,559,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,',
'91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,',
'44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,220,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,',
',,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58',
'59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,',
',,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,',
',,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,,62,,81',
'93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28',
'27,101,100,102,103,,,19,,,,,,8,45,,10,105,104,106,95,56,97,96,98,,99',
'107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60,,35',
',,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91',
'92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,',
',,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43',
'41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,',
'89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,',
',,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,300,,,,,,,,,,,,,,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,753,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225',
',,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305',
',,231,,,58,59,,,60,,,550,,547,546,545,555,548,,,,,,,,,558,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,506,,553,62,,81,93,94,69,70,71,,57,566',
'565,,63,64,559,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103',
',,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,,,44,,,,,,,,,230',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,',
',,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41',
',,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230',
',,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,,,,,44,,,287,,,,,,230,,,,,89,284,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,659,,,,44,,,287,,,,,,230,,,,,89,284,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85',
'87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312',
'72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,',
',,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72',
'73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104,106,95',
'56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231',
',,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,',
',,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97',
'96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59',
',,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,',
',,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93',
'94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,',
',232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281,,44,,,287',
',,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81',
'93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102',
'103,,,232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
',,315,,,,,,,,,,,,,,,,,,,,305,,,301,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89',
'79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,',
'67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,522,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,659,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84',
'86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68',
'30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106',
'95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,',
'231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,',
',80,88,,,,,,,62,,81,93,94,69,70,71,9,57,,,,63,64,,,,67,,65,66,68,30',
'31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,,,,,8,45,294,10,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40',
',,33,,,58,59,,,60,,35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87',
',,,,80,88,,,,,,390,62,,81,93,94,69,70,71,,57,,,,63,64,,,,67,,65,66,68',
'311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,,89,284,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,',
',,,,,225,,,231,,,58,59,,,60,,659,,281,,44,,,287,,,,,,230,,,,,89,284',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,281,,44,,,287,,,,,,230,,,,',
'89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64',
',,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232',
',,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,',
',,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79',
'82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67',
',65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,',
',45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,',
',,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65',
'66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45',
',,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,',
',,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,',
'84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,232,,,,,,,45,,,105,104',
'106,95,56,97,96,98,286,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,',
',225,,,231,,,58,59,,,60,,283,,281,,44,,,287,,,,,,230,,,,,89,284,82,83',
',84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66',
'68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,45,,,105',
'104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,',
',,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,230,,,,,89,79,82,83,,84,86',
'85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,311',
'312,72,73,,,,,,307,308,314,101,100,102,103,,,232,,,,,,,309,,,105,104',
'106,95,56,97,96,98,,99,107,108,,91,92,,,315,,,,,,,,,,,,,,,,,,,,875,',
',231,,,58,59,,,60,,,,,,,,,,,,,,,,,,,,89,79,82,83,,84,86,85,87,,,,,80',
'88,,,,69,70,71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,',
',29,28,27,101,100,102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60',
',,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71',
'62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100',
'102,103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92',
'42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20',
',,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314,101,100,102,103,,',
'232,,,,,,,309,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,,,315',
',,,,,,,,,,,,,,,,,,,945,,,231,,,58,59,,,60,,,550,,547,546,545,555,548',
',,,,,,,,558,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,,,553,62,,81,93,94',
'69,70,71,9,57,566,565,,63,64,559,,,67,,65,66,68,30,31,72,73,,,,,,29',
'28,27,101,100,102,103,,,19,,,,,,8,45,7,10,105,104,106,95,56,97,96,98',
',99,107,108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,40,,,33,,,58,59,,,60',
',35,,,,44,,,,,,,,,20,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101',
'100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,286,99,107,108',
',91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,283,,281',
',44,,,287,,,,,,230,,,,,89,284,82,83,,84,86,85,87,,,,,80,88,,,,69,70',
'71,62,57,81,93,94,63,64,,,,67,,65,66,68,311,312,72,73,,,,,,307,308,314',
'101,100,102,103,,,232,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107',
'108,,91,92,42,43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44',
',,,,,,,,230,,,,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57',
'81,93,94,63,64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102',
'103,,,19,,,,,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42',
'43,41,,,,,,,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,',
',,,89,79,82,83,,84,86,85,87,,,,,80,88,,,,69,70,71,62,57,81,93,94,63',
'64,,,,67,,65,66,68,30,31,72,73,,,,,,29,28,27,101,100,102,103,,,19,,',
',,,,45,,,105,104,106,95,56,97,96,98,,99,107,108,,91,92,42,43,41,,,,',
',,,,,,,,,,,,,,,225,,,231,,,58,59,,,60,,,,,,44,,,,,,,,,20,,,,,89,79,82',
'83,,84,86,85,87,,,,,80,88,,,,,,,62,,81,93,94,173,184,174,197,170,190',
'180,179,200,201,195,178,177,172,198,202,203,182,171,185,189,191,183',
'176,,,,192,199,194,193,186,196,181,169,188,187,,,,,,168,175,166,167',
'163,164,165,124,126,,,125,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88,173,184,174,197',
'170,190,180,179,200,201,195,178,177,172,198,202,203,182,171,185,189',
'191,183,176,,,,192,199,194,193,186,196,181,169,188,187,,,,,,168,175',
'166,167,163,164,165,124,126,123,,125,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,,,,,88,173',
'184,174,197,170,190,180,179,200,201,195,178,177,172,198,202,203,182',
'171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188,187,',
',,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154,136',
'137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,,,,,',
',,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,,,162,89,,,,,,',
',,,,,,,88,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198',
'202,203,182,171,185,189,191,183,176,,,,192,199,194,373,372,374,371,169',
'188,187,,,,,,168,175,166,167,368,369,370,366,126,97,96,367,,99,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,378,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
',,162,173,184,174,197,170,190,180,179,200,201,195,178,177,172,198,202',
'203,182,171,185,189,191,183,176,,,,192,199,194,193,186,196,181,169,188',
'187,,,,,,168,175,166,167,163,164,165,124,126,,,125,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,,,,,,,,,151',
'150,,135,156,153,152,161,148,149,143,141,133,155,134,726,426,162,,727',
',,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146',
'147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133',
'155,134,673,426,162,,674,,,,,,,,157,158,,154,136,137,138,145,142,144',
',,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152',
'161,148,149,143,141,133,155,134,638,419,162,,639,,,,,,,,157,158,,154',
'136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,',
',151,150,,135,156,153,152,161,148,149,143,141,133,155,134,640,426,162',
',641,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160',
'146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141',
'133,155,134,670,419,162,,671,,,,,,,,157,158,,154,136,137,138,145,142',
'144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153',
'152,161,148,149,143,141,133,155,134,980,426,162,,979,,,,,,,,157,158',
',154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,',
',,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,422,426',
'162,,421,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159',
'160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143',
'141,133,155,134,640,426,162,,641,,,,,,,,157,158,,154,136,137,138,145',
'142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156',
'153,152,161,148,149,143,141,133,155,134,638,419,162,,639,,,,,,,,157',
'158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265',
',,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134,415',
'419,162,,416,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140,',
',,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149',
'143,141,133,155,134,1003,419,162,,1004,,,,,,,,157,158,,154,136,137,138',
'145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135',
'156,153,152,161,148,149,143,141,133,155,134,477,419,162,,478,,,,,,,',
'157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147,,',
',,,,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155,134',
'477,419,162,,478,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139,140',
',,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161,148',
'149,143,141,133,155,134,1005,426,162,,1006,,,,,,,,157,158,,154,136,137',
'138,145,142,144,,,139,140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150',
',135,156,153,152,161,148,149,143,141,133,155,134,721,419,162,,722,,',
',,,,,157,158,,154,136,137,138,145,142,144,,,139,140,,,,159,160,146,147',
',,,,,265,,,,,,,,151,150,,135,156,153,152,161,148,149,143,141,133,155',
'134,723,426,162,,724,,,,,,,,157,158,,154,136,137,138,145,142,144,,,139',
'140,,,,159,160,146,147,,,,,,265,,,,,,,,151,150,,135,156,153,152,161',
'148,149,143,141,133,155,134,,550,162,547,546,545,555,548,,550,,547,546',
'545,555,548,558,,,,,,,,558,,550,,547,546,545,555,548,,,,,,553,,,558',
',,,,553,563,562,566,565,,,,559,563,562,566,565,,,,559,553,,550,,547',
'546,545,555,548,563,562,566,565,,,,559,558,,550,,547,546,545,555,548',
',550,,547,546,545,555,548,558,,,,,553,,,558,,,,,,,,566,565,,,,559,553',
',,,,,,,553,,,566,565,,,,559,563,562,566,565,,,550,559,547,546,545,555',
'548,,550,,547,546,545,555,548,558,,,,,,,,558,,550,,547,546,545,555,548',
',,,,,553,,,558,,,,,553,,,566,565,,,,559,563,562,566,565,,,,559,553,536',
'550,,547,546,545,555,548,563,562,566,565,,,,559,558,,550,,547,546,545',
'555,548,550,,547,546,545,555,548,,558,,,,,553,,558,,,,,,,563,562,566',
'565,,,,559,553,,,,,,,553,,,,566,565,,,,559,,566,565,,,550,559,547,546',
'545,555,548,550,,547,546,545,555,548,,558,,,,,,550,558,547,546,545,555',
'548,,,,,,,,,558,553,,,,,,,553,,,,566,565,,,,559,,566,565,,553,,559,',
',,,,,563,562,566,565,,,550,559,547,546,545,555,548,,550,,547,546,545',
'555,548,558,,,,,,,,558,,,,,,,,,,,,,,553,,,,,,,,553,563,562,566,565,',
',,559,563,562,566,565,,,,559' ]
        racc_action_table = arr = ::Array.new(25187, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'641,1004,719,943,19,348,844,641,641,641,650,1003,641,641,641,385,641',
'61,341,722,350,884,386,590,590,58,641,641,641,852,946,580,226,705,852',
'77,641,641,1017,641,641,641,641,641,985,19,347,77,665,687,942,723,688',
'340,344,439,439,77,665,344,843,351,712,721,907,58,641,641,641,641,641',
'641,641,641,641,641,641,641,641,641,1006,385,641,641,641,717,641,641',
'386,226,641,572,573,641,641,357,641,650,641,357,641,684,641,641,61,641',
'641,641,641,641,844,641,1005,641,348,844,723,590,724,1004,719,943,590',
'719,1004,719,943,641,722,1003,641,641,641,641,1003,641,341,641,640,884',
'580,341,641,641,884,640,640,640,946,439,640,640,640,946,640,347,1017',
'1006,687,720,723,1017,985,640,640,640,640,985,942,843,351,340,721,942',
'640,640,340,640,640,640,640,640,907,724,680,680,681,907,670,1005,673',
'224,800,594,594,572,573,679,1006,26,572,573,483,1006,640,640,640,640',
'640,640,640,640,640,640,640,640,640,640,310,676,640,640,640,675,640',
'640,222,724,640,672,1005,640,640,222,640,1005,640,483,640,484,640,640',
'222,640,640,640,640,640,224,640,640,640,669,639,670,673,673,366,800',
'41,41,315,315,26,366,640,667,319,640,640,640,640,3,640,484,640,95,3',
'680,638,640,640,310,95,95,95,26,594,95,95,95,222,95,729,670,671,673',
'670,800,673,95,800,95,95,95,310,204,670,773,673,639,800,95,95,319,95',
'95,95,95,95,692,692,366,903,319,903,903,903,704,903,704,704,704,416',
'704,445,638,41,41,315,315,415,95,95,95,95,95,95,95,95,95,95,95,95,95',
'95,607,664,95,95,95,671,95,95,733,773,95,494,109,95,95,605,95,383,95',
'225,95,382,95,95,416,95,95,95,95,95,421,95,415,95,416,123,445,421,421',
'421,123,123,415,421,421,671,421,95,671,903,95,95,95,95,704,95,475,95',
'671,651,384,223,95,95,607,607,421,421,658,421,421,421,421,421,607,494',
'494,494,656,605,605,383,383,383,227,382,382,382,290,605,847,475,494',
'290,651,847,421,421,421,421,421,421,421,421,421,421,421,421,421,421',
'367,752,421,421,421,228,421,367,223,932,421,381,932,421,384,384,384',
'380,421,649,421,387,421,421,232,421,421,421,421,421,98,421,38,421,912',
'757,912,98,98,98,339,339,98,98,98,583,98,421,710,710,421,421,583,421',
'98,421,98,98,98,17,17,583,421,421,15,367,98,98,644,98,98,98,98,98,642',
'381,381,381,264,38,278,380,380,380,368,387,387,387,371,38,632,368,279',
'621,282,371,98,98,98,98,98,98,98,98,98,98,98,98,98,98,583,15,98,98,98',
'370,98,98,525,525,98,15,370,98,98,45,98,24,98,627,98,726,98,98,24,98',
'98,98,98,98,621,98,686,98,294,686,40,376,349,368,621,374,775,371,376',
'349,330,98,374,330,98,98,98,98,349,98,334,98,422,334,993,993,98,98,39',
'422,422,422,776,689,370,422,422,726,422,331,778,779,331,689,726,373',
'24,422,372,726,780,782,373,726,783,372,784,785,422,422,295,422,422,422',
'422,422,376,349,789,622,374,303,726,369,793,39,689,689,303,794,369,689',
'451,799,297,39,803,303,422,422,422,422,422,422,422,422,422,422,422,422',
'422,422,726,37,422,422,422,806,422,807,373,810,422,372,451,422,298,618',
'451,451,422,815,422,816,422,422,820,422,422,422,422,422,28,422,422,422',
'303,821,369,28,28,28,823,824,28,28,28,874,28,422,826,829,422,422,874',
'422,612,422,28,28,831,610,834,874,422,422,22,837,28,28,602,28,28,28',
'28,28,592,299,16,727,575,46,574,846,305,569,727,850,46,851,553,727,553',
'553,553,727,553,46,28,28,28,28,28,28,28,28,28,28,28,28,28,28,874,567',
'28,28,28,854,855,28,564,28,28,560,13,28,28,553,28,308,28,552,28,543',
'28,28,553,28,28,28,28,28,56,28,727,28,46,542,541,56,56,56,871,539,56',
'56,56,302,56,28,12,538,28,28,302,28,875,28,56,56,56,598,598,302,28,598',
'598,598,56,56,877,56,56,56,56,56,10,14,309,944,526,304,888,889,14,524',
'944,523,304,314,316,515,512,14,905,944,320,304,56,56,56,56,56,56,56',
'56,56,56,56,56,56,56,302,936,56,56,56,909,910,56,936,507,56,916,920',
'56,56,922,56,936,56,925,56,926,56,56,927,56,56,56,56,56,14,56,944,56',
'304,928,861,957,321,957,957,957,930,957,703,321,861,56,505,355,56,56',
'56,56,321,56,417,56,502,501,323,328,56,417,417,417,936,332,417,417,417',
'945,417,485,957,950,951,952,452,861,861,417,417,417,861,953,954,481',
'956,356,333,7,417,417,456,417,417,417,417,417,455,355,454,321,453,306',
'335,441,355,431,452,979,306,355,452,452,980,355,981,1,423,306,417,417',
'417,417,417,417,417,417,417,417,417,417,417,417,355,345,417,417,417',
'356,346,417,511,417,417,414,356,417,417,511,417,356,417,413,417,356',
'417,417,511,417,417,417,417,417,355,417,417,417,306,470,992,411,994',
'995,356,359,674,996,997,998,999,417,359,674,417,417,426,417,674,417',
'1002,359,674,426,426,426,417,407,426,426,426,470,426,405,356,470,470',
'511,470,470,402,426,426,426,426,978,396,978,978,978,1007,978,426,426',
'1008,426,426,426,426,426,872,361,872,872,872,471,872,352,1019,,359,674',
',,701,,701,701,701,,701,,426,426,426,426,426,426,426,426,426,426,426',
'426,426,426,,471,426,426,426,471,471,426,471,471,426,,,426,426,701,426',
',426,,426,,426,426,701,426,426,426,426,426,,426,426,426,830,,830,830',
'830,832,830,832,832,832,,832,,426,,,426,426,426,426,,426,427,426,,,',
',426,427,427,427,,,427,427,427,830,427,462,,,832,,,,830,427,427,427',
'427,,,,,462,462,,427,427,,427,427,427,427,427,991,,991,991,991,462,991',
'462,,462,462,,462,462,,,462,,462,,,,427,427,427,427,427,427,427,427',
'427,427,427,427,427,427,,991,427,427,427,,,427,,,427,,,427,427,,427',
',427,,427,,427,427,,427,427,427,427,427,,427,427,427,293,293,293,293',
'293,,,,955,,955,955,955,427,955,,427,427,427,427,,427,476,427,,,,,427',
'476,476,476,,,476,476,476,646,476,646,646,646,646,646,,955,,476,476',
',,,646,,,461,,,476,476,,476,476,476,476,476,6,6,6,6,6,461,461,,646,499',
'499,499,499,499,,,,646,646,646,646,461,,461,646,461,461,,461,461,,,461',
'476,461,27,,,,,476,,27,27,27,476,476,27,27,27,646,27,904,,904,904,904',
',904,,27,27,27,,,,,,476,476,,27,27,,27,27,27,27,27,,,,,476,,,476,,,904',
',476,,,,,,,476,,,27,27,27,27,27,27,27,27,27,27,27,27,27,27,,,27,27,27',
',,27,,27,27,,,27,27,,27,,27,,27,,27,27,,27,27,27,27,27,,27,27,27,,,',
',,,,,,,,,,27,,,27,27,,27,,27,0,0,0,0,0,0,27,,,0,0,,,,0,,0,0,0,0,0,0',
'0,,,,,,0,0,0,0,0,0,0,,,0,,,,,434,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0,,0,0',
'0,0,0,434,434,434,434,434,434,434,434,434,434,434,,434,434,,,434,434',
',0,,,0,,,0,0,,,0,,0,434,,434,0,434,434,,434,434,434,434,434,0,434,,',
',0,0,0,0,,0,0,0,0,,,,,0,0,,434,,434,,,0,,0,0,0,326,326,326,326,326,326',
',,,326,326,,,,326,,326,326,326,326,326,326,326,,,,,,326,326,326,326',
'326,326,326,,,326,,,,,410,326,326,326,326,326,326,326,326,326,326,326',
'326,,326,326,326,,326,326,326,326,326,410,410,410,410,410,410,410,410',
'410,410,410,,410,410,,,410,410,,326,,,326,,,326,326,,,326,,326,410,',
'410,326,410,410,,410,410,410,410,410,326,410,,,,326,326,326,326,,326',
'326,326,326,,,,,326,326,,410,,,,,326,,326,326,326,839,839,839,839,839',
'839,,,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,,839,839,839',
'839,839,839,839,,,839,,,,,643,839,839,839,839,839,839,839,839,839,839',
'839,839,,839,839,839,,839,839,839,839,839,643,643,643,643,643,643,643',
'643,643,643,643,,643,643,,,643,643,,839,,,839,,,839,839,,,839,,839,643',
',643,839,643,643,,643,643,643,643,643,839,643,,,,839,839,839,839,,839',
'839,839,839,,,,,839,839,,643,,,,,839,,839,839,839,500,500,500,500,500',
'500,,,,500,500,,,,500,,500,500,500,500,500,500,500,,,,,,500,500,500',
'500,500,500,500,,,500,,,,,,500,500,500,500,500,500,500,500,500,500,500',
'500,,500,500,500,,500,500,500,500,500,766,766,766,766,766,766,766,766',
'766,766,766,,766,766,,,766,766,,500,,,500,,,500,500,,,500,,500,766,',
'766,500,766,766,,766,766,766,766,766,500,766,,,,500,500,500,500,,500',
'500,500,500,,,,,500,500,,766,,,,,500,,500,500,500,838,838,838,838,838',
'838,,,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,,838,838,838',
'838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838,838',
'838,,838,838,838,,838,838,838,838,838,759,759,759,759,759,759,759,759',
'759,759,759,,759,759,,,759,759,,838,,,838,,,838,838,,,838,,838,759,',
'759,838,759,759,,759,759,759,759,759,838,759,,,,838,838,838,838,,838',
'838,838,838,,,,,838,838,,759,,,,,838,,838,838,838,568,568,568,568,568',
'568,,,,568,568,,,,568,,568,568,568,568,568,568,568,,,,,,568,568,568',
'568,568,568,568,,,568,,,,,,568,568,568,568,568,568,568,568,568,568,568',
'568,,568,568,568,,568,568,568,568,568,761,761,761,761,761,761,761,761',
'761,761,761,,761,761,,,761,761,,568,,,568,,,568,568,,,568,,568,761,',
'761,568,761,761,,761,761,761,761,761,568,761,,,,568,568,568,568,,568',
'568,568,568,,,,,568,568,,761,,,,,568,,568,568,568,814,814,814,814,814',
'814,,,,814,814,,,,814,,814,814,814,814,814,814,814,,,,,,814,814,814',
'814,814,814,814,,,814,,,,,,814,814,814,814,814,814,814,814,814,814,814',
'814,,814,814,814,,814,814,814,814,814,764,764,764,764,764,764,764,764',
'764,764,764,,764,764,,,764,764,,814,,,814,,,814,814,,,814,,814,764,',
'764,814,764,764,,764,764,764,764,764,814,764,,,,814,814,814,814,,814',
'814,814,814,,,,,814,814,,764,,,,,814,,814,814,814,813,813,813,813,813',
'813,,,,813,813,,,,813,,813,813,813,813,813,813,813,,,,,,813,813,813',
'813,813,813,813,,,813,,,,,,813,813,813,813,813,813,813,813,813,813,813',
'813,,813,813,813,,813,813,813,813,813,276,276,276,276,276,276,276,276',
'276,276,276,,276,276,,,276,276,,813,,,813,,,813,813,,,813,,813,276,',
'276,813,276,276,,276,276,276,276,276,813,276,,,,813,813,813,813,,813',
'813,813,813,,,,,813,813,,276,,,,,813,,813,813,813,848,848,848,848,848',
'848,,,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,,848,848,848',
'848,848,848,848,,,848,,,,,,848,848,848,848,848,848,848,848,848,848,848',
'848,,848,848,848,,848,848,848,848,848,768,768,768,768,768,768,768,768',
'768,768,768,,768,768,,,768,768,,848,,,848,,,848,848,,,848,,848,768,',
'768,848,768,768,,768,768,768,768,768,848,768,,,,848,848,848,848,,848',
'848,848,848,,,,,848,848,,768,,,,,848,,848,848,848,842,842,842,842,842',
'842,,,,842,842,,,,842,,842,842,842,842,842,842,842,,,,,,842,842,842',
'842,842,842,842,,,842,,,,,,842,842,842,842,842,842,842,842,842,842,842',
'842,,842,842,842,,842,842,842,842,842,474,474,474,474,474,474,474,474',
'474,474,474,,474,474,,,474,474,,842,,,842,,,842,842,,,842,,842,474,',
'474,842,474,474,,474,474,474,474,474,842,474,,,,842,842,842,842,,842',
'842,842,842,,,,,842,842,474,474,,,,,842,,842,842,842,571,571,571,571',
'571,571,,,,571,571,,,,571,,571,571,571,571,571,571,571,,,,,,571,571',
'571,571,571,571,571,,,571,,,,,,571,571,571,571,571,571,571,571,571,571',
'571,571,,571,571,571,,571,571,571,571,571,860,860,860,860,860,860,860',
'860,860,860,860,,860,860,,,860,860,,571,,,571,,,571,571,,,571,,571,860',
',860,571,860,860,,860,860,860,860,860,571,860,,,,571,571,571,571,,571',
'571,571,571,,,,,571,571,,860,,,,,571,,571,571,571,301,301,301,301,301',
'301,,,,301,301,,,,301,,301,301,301,301,301,301,301,,,,,,301,301,301',
'301,301,301,301,,,301,,,,,,301,301,301,301,301,301,301,301,301,301,301',
'301,,301,301,301,,301,301,301,301,301,429,429,429,429,429,429,429,429',
'429,429,429,,429,429,,,429,429,,301,,,301,,,301,301,,,301,,301,429,',
'429,301,429,429,,429,429,429,429,429,301,429,,,,301,301,301,301,,301',
'301,301,301,,,,,301,301,,429,,,,,301,,301,301,301,591,591,591,591,591',
'591,,,,591,591,,,,591,,591,591,591,591,591,591,591,,,,,,591,591,591',
'591,591,591,591,,,591,,,,,,591,591,591,591,591,591,591,591,591,591,591',
'591,,591,591,591,,591,591,591,591,591,857,857,857,857,857,857,857,857',
'857,857,857,,857,857,,,857,857,,591,,,591,,,591,591,,,591,,591,857,',
'857,591,857,857,,857,857,857,857,857,591,857,,,,591,591,591,591,,591',
'591,591,591,,,,,591,591,,857,,,,,591,,591,591,591,33,33,33,33,33,33',
',,,33,33,,,,33,,33,33,33,33,33,33,33,,,,,,33,33,33,33,33,33,33,,,33',
',,,,,33,33,33,33,33,33,33,33,33,33,33,33,,33,33,33,,33,33,33,33,33,678',
'678,678,678,678,678,678,678,678,678,678,,678,678,,,678,678,,33,,,33',
',,33,33,,,33,,33,678,,678,33,678,678,,678,678,678,678,678,33,678,,,',
'33,33,33,33,,33,33,33,33,,,,,33,33,,678,,,,,33,,33,33,33,296,296,296',
'296,296,296,,,,296,296,,,,296,,296,296,296,296,296,296,296,,,,,,296',
'296,296,296,296,296,296,,,296,,,,,,296,296,296,296,296,296,296,296,296',
'296,296,296,,296,296,296,,296,296,296,296,296,21,21,21,21,21,21,21,21',
'21,21,21,,21,21,,,21,21,,296,,,296,,,296,296,,,296,,296,21,,21,296,21',
'21,,21,21,21,21,21,296,21,,,,296,296,296,296,,296,296,296,296,,,,,296',
'296,,21,,,,,296,,296,296,296,881,881,881,881,881,881,,,,881,881,,,,881',
',881,881,881,881,881,881,881,,,,,,881,881,881,881,881,881,881,,,881',
',,,,,881,881,881,881,881,881,881,881,881,881,881,881,,881,881,881,,881',
'881,881,881,881,521,521,521,521,521,521,521,521,521,521,521,,521,521',
',,521,521,,881,,,881,,,881,881,,,881,,881,521,,521,881,521,521,,521',
'521,521,521,521,881,521,,,,881,881,881,881,,881,881,881,881,,,,,881',
'881,,521,,,,,881,,881,881,881,805,805,805,805,805,805,,,,805,805,,,',
'805,,805,805,805,805,805,805,805,,,,,,805,805,805,805,805,805,805,,',
'805,,,,,,805,805,805,805,805,805,805,805,805,805,805,805,,805,805,805',
',805,805,805,805,805,754,754,754,754,754,754,754,754,754,754,754,,754',
'754,,,754,754,,805,,,805,,,805,805,,,805,,805,754,,754,805,754,754,',
'754,754,754,754,754,805,754,,,,805,805,805,805,,805,805,805,805,,,,',
'805,805,,754,,,,,805,,805,805,805,792,792,792,792,792,792,,,,792,792',
',,,792,,792,792,792,792,792,792,792,,,,,,792,792,792,792,792,792,792',
',,792,,,,,,792,792,792,792,792,792,792,792,792,792,792,792,,792,792',
'792,,792,792,792,792,792,460,460,460,460,460,460,460,,,460,460,,,,,',
'460,460,,792,,,792,,,792,792,,,792,,792,460,,460,792,460,460,,460,460',
'460,460,460,792,460,,,,792,792,792,792,,792,792,792,792,,,,,792,792',
',,,,,,792,,792,792,792,941,941,941,941,941,941,,,,941,941,,,,941,,941',
'941,941,941,941,941,941,,,,,,941,941,941,941,941,941,941,,,941,,,,,',
'941,941,941,941,941,941,941,941,941,941,941,941,,941,941,941,,941,941',
'941,941,941,450,450,450,450,450,450,450,450,450,450,450,,450,450,,,450',
'450,,941,,,941,,,941,941,,,941,,941,450,,450,941,450,450,,450,450,450',
'450,450,941,450,,,,941,941,941,941,,941,941,941,941,,,,,941,941,,,,',
',,941,,941,941,941,648,648,648,648,648,648,,,,648,648,,,,648,,648,648',
'648,648,648,648,648,,,,,,648,648,648,648,648,648,648,,,648,,,,,,648',
'648,648,648,648,648,648,648,648,648,648,648,,648,648,648,,648,648,648',
'648,648,449,449,449,449,449,449,449,449,449,449,449,,449,449,,,449,449',
',648,,,648,,,648,648,,,648,,648,449,,449,648,449,449,,449,449,449,449',
'449,648,449,,,,648,648,648,648,,648,648,648,648,,,,,648,648,,,,,,,648',
',648,648,648,231,231,231,231,231,231,,,,231,231,,,,231,,231,231,231',
'231,231,231,231,,,,,,231,231,231,231,231,231,231,,,231,,,,,,231,231',
'231,231,231,231,231,231,231,231,231,231,,231,231,231,,231,231,231,231',
'231,463,,,,,,,,,,,,,,,,463,463,,231,,,231,,,231,231,,,231,,231,463,',
'463,231,463,463,,463,463,,,463,231,463,,,,231,231,231,231,,231,231,231',
'231,,,,,231,231,,,,,,,231,,231,231,231,653,653,653,653,653,653,,,,653',
'653,,,,653,,653,653,653,653,653,653,653,,,,,,653,653,653,653,653,653',
'653,,,653,,,,,,653,653,653,653,653,653,653,653,653,653,653,653,,653',
'653,653,,653,653,653,653,653,473,473,473,473,473,473,473,473,,473,473',
',,,,,473,473,,653,,,653,,,653,653,,,653,,653,473,,473,653,473,473,,473',
'473,473,473,473,653,473,,,,653,653,653,653,,653,653,653,653,,,,,653',
'653,,,,,,,653,,653,653,653,654,654,654,654,654,654,,,,654,654,,,,654',
',654,654,654,654,654,654,654,,,,,,654,654,654,654,654,654,654,,,654',
',,,,,654,654,654,654,654,654,654,654,654,654,654,654,,654,654,654,,654',
'654,654,654,654,464,,,,,,,,,,,,,,,,464,464,,654,,,654,,,654,654,,,654',
',654,464,,464,654,464,464,,464,464,,,464,654,464,,,,654,654,654,654',
',654,654,654,654,,,,,654,654,,,,,,,654,,654,654,654,206,206,206,206',
'206,206,,,,206,206,,,,206,,206,206,206,206,206,206,206,,,,,,206,206',
'206,206,206,206,206,,,206,,,,,,206,206,206,206,206,206,206,206,206,206',
'206,206,,206,206,206,,206,206,206,206,206,472,472,472,472,472,472,472',
',,472,472,,,,,,472,472,,206,,,206,,,206,206,,,206,,206,472,,472,206',
'472,472,,472,472,472,472,472,206,472,,,,206,206,206,206,,206,206,206',
'206,,,,,206,206,,,,,,,206,,206,206,206,730,730,730,730,730,730,,,,730',
'730,,,,730,,730,730,730,730,730,730,730,,,,,,730,730,730,730,730,730',
'730,,,730,,,,,,730,730,730,730,730,730,730,730,730,730,730,730,,730',
'730,730,,730,730,730,730,730,465,465,465,465,465,465,465,,,465,465,',
',,,,465,465,,730,,,730,,,730,730,,,730,,730,465,,465,730,465,465,,465',
'465,465,465,465,730,465,,,,730,730,730,730,,730,730,730,730,,,,,730',
'730,,,,,,,730,,730,730,730,121,121,121,121,121,121,,,,121,121,,,,121',
',121,121,121,121,121,121,121,,,,,,121,121,121,121,121,121,121,,,121',
',,,,,121,121,121,121,121,121,121,121,121,121,121,121,,121,121,121,,121',
'121,121,121,121,466,466,466,466,466,466,466,,,466,466,,,,,,466,466,',
'121,,,121,,,121,121,,,121,,121,466,,466,121,466,466,,466,466,466,466',
'466,121,466,,,,121,121,121,121,,121,121,121,121,,,,,121,121,,,,,,,121',
',121,121,121,958,958,958,958,958,958,,,,958,958,,,,958,,958,958,958',
'958,958,958,958,,,,,,958,958,958,958,958,958,958,,,958,,,,,,958,958',
'958,958,958,958,958,958,958,958,958,958,,958,958,958,,958,958,958,958',
'958,467,467,467,467,467,467,467,,,467,467,,,,,,467,467,,958,,,958,,',
'958,958,,,958,,958,467,,467,958,467,467,,467,467,467,467,467,958,467',
',,,958,958,958,958,,958,958,958,958,,,,,958,958,,,,,,,958,,958,958,958',
'734,734,734,734,734,734,,,,734,734,,,,734,,734,734,734,734,734,734,734',
',,,,,734,734,734,734,734,734,734,,,734,,,,,,734,734,734,734,734,734',
'734,734,734,734,734,734,,734,734,734,,734,734,734,734,734,468,468,468',
'468,468,468,468,,,468,468,,,,,,468,468,,734,,,734,,,734,734,,,734,,734',
'468,,468,734,468,468,,468,468,468,468,468,734,468,,,,734,734,734,734',
',734,734,734,734,,,,,734,734,,,,,,,734,,734,734,734,964,964,964,964',
'964,964,,,,964,964,,,,964,,964,964,964,964,964,964,964,,,,,,964,964',
'964,964,964,964,964,,,964,,,,,,964,964,964,964,964,964,964,964,964,964',
'964,964,,964,964,964,,964,964,964,964,964,469,469,469,469,469,469,469',
',,469,469,,,,,,469,469,,964,,,964,,,964,964,,,964,,964,469,,469,964',
'469,469,,469,469,469,469,469,964,469,,,,964,964,964,964,,964,964,964',
'964,,,,,964,964,,,,,,,964,,964,964,964,966,966,966,966,966,966,,,,966',
'966,,,,966,,966,966,966,966,966,966,966,,,,,,966,966,966,966,966,966',
'966,,,966,,,,,,966,966,966,966,966,966,966,966,966,966,966,966,,966',
'966,966,,966,966,966,966,966,457,,,,,,,,,,,,,,,,457,457,,966,,,966,',
',966,966,,,966,,966,457,,457,966,457,457,,457,457,,,,966,,,,,966,966',
'966,966,,966,966,966,966,,,,,966,966,,,,,,,966,,966,966,966,744,744',
'744,744,744,744,,,,744,744,,,,744,,744,744,744,744,744,744,744,,,,,',
'744,744,744,744,744,744,744,,,744,,,,,,744,744,744,744,744,744,744,744',
'744,744,744,744,,744,744,744,,744,744,744,744,744,458,,,,,,,,,,,,,,',
',458,458,,744,,,744,,,744,744,,,744,,744,458,,458,744,458,458,,458,458',
',,,744,,,,,744,744,744,744,,744,744,744,744,,,,,744,744,,,,623,623,623',
'744,623,744,744,744,623,623,,,,623,,623,623,623,623,623,623,623,,,,',
',623,623,623,623,623,623,623,,,623,,,,,,,623,,,623,623,623,623,623,623',
'623,623,623,623,623,623,,623,623,623,623,623,459,,,,,,,,,,,,,,,,459',
'459,,623,,,623,,,623,623,,,623,,623,459,623,,623,459,459,623,459,459',
',,,623,,,,,623,623,623,623,,623,623,623,623,,,,,623,623,,,,64,64,64',
'623,64,623,623,623,64,64,,,,64,,64,64,64,64,64,64,64,,,,,,64,64,64,64',
'64,64,64,,,64,,,,,,,64,,,64,64,64,64,64,64,64,64,,64,64,64,,64,64,64',
'64,64,,,,,,,,,,,,,,,,,,,,64,,,64,,,64,64,,,64,,,,,,64,,,,,,,,,64,,,',
',64,64,64,64,,64,64,64,64,,,,,64,64,,,,67,67,67,64,67,64,64,64,67,67',
',,,67,,67,67,67,67,67,67,67,,,,,,67,67,67,67,67,67,67,,,67,,,,,,,67',
',,67,67,67,67,67,67,67,67,,67,67,67,,67,67,67,67,67,,,,,,,,,,,,,,,,',
',,,67,,,67,,,67,67,,,67,,,,,,67,,,,,,,,,67,,,,,67,67,67,67,,67,67,67',
'67,,,,,67,67,67,,,,,67,67,,67,67,67,68,68,68,,68,,,,68,68,,,,68,,68',
'68,68,68,68,68,68,,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68',
'68,68,68,68,68,,68,68,68,,68,68,,,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68',
'68,,,68,,68,,,,,,,,,,,,,,,,,,68,68,68,68,,68,68,68,68,,,,,68,68,,,,69',
'69,69,68,69,68,68,68,69,69,,,,69,,69,69,69,69,69,69,69,,,,,,69,69,69',
'69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69,69,,69,69,69,,69,69',
',,69,,,,,,,,,,,,,,,,,69,,,69,,,69,,,69,69,,,69,,,,,,,,,,,,,,,,,,,,69',
'69,69,69,,69,69,69,69,,,,,69,69,,,,70,70,70,69,70,69,69,69,70,70,,,',
'70,,70,70,70,70,70,70,70,,,,,,70,70,70,70,70,70,70,,,70,,,,,,,70,,,70',
'70,70,70,70,70,70,70,,70,70,70,,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,,,70',
',,70,70,,,70,,,,,,,,,,,,,,,,,,,,70,70,70,70,,70,70,70,70,,,,,70,70,',
',,753,753,753,70,753,70,70,70,753,753,,,,753,,753,753,753,753,753,753',
'753,,,,,,753,753,753,753,753,753,753,,,753,,,,,,,753,,,753,753,753,753',
'753,753,753,753,,753,753,753,,753,753,753,753,753,,,,,,,,,,,,,,,,,,',
',753,,,753,,,753,753,,,753,,,,,,753,,,,,,,,,753,,,,,753,753,753,753',
',753,753,753,753,,,,,753,753,,,,755,755,755,753,755,753,753,753,755',
'755,,,,755,,755,755,755,755,755,755,755,,,,,,755,755,755,755,755,755',
'755,,,755,,,,,,,755,,,755,755,755,755,755,755,755,755,,755,755,755,',
'755,755,755,755,755,,,,,,,,,,,,,,,,,,,,755,,,755,,,755,755,,,755,,,',
',,755,,,,,,,,,755,,,,,755,755,755,755,,755,755,755,755,,,,,755,755,',
',,60,60,60,755,60,755,755,755,60,60,,,,60,,60,60,60,60,60,60,60,,,,',
',60,60,60,60,60,60,60,,,60,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60',
'60,60,,60,60,60,60,60,,,,,,,,,,,,,,,,,,,,60,,,60,,,60,60,,,60,,,,,,60',
',,60,,,,,,60,,,,,60,60,60,60,,60,60,60,60,,,,,60,60,,,,59,59,59,60,59',
'60,60,60,59,59,,,,59,,59,59,59,59,59,59,59,,,,,,59,59,59,59,59,59,59',
',,59,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,59,59,,59,59,59,59,59',
',,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,,59,,59,,,,59,,,59,,,,,,59,,,,,59',
'59,59,59,,59,59,59,59,,,,,59,59,,,,769,769,769,59,769,59,59,59,769,769',
',,,769,,769,769,769,769,769,769,769,,,,,,769,769,769,769,769,769,769',
',,769,,,,,,,769,,,769,769,769,769,769,769,769,769,,769,769,769,,769',
'769,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,,769,,,,,,769',
',,,,,,,,769,,,,,769,769,769,769,,769,769,769,769,,,,,769,769,,,,,,,769',
',769,769,769,111,111,111,111,111,,,,111,111,,,,111,,111,111,111,111',
'111,111,111,,,,,,111,111,111,111,111,111,111,,,111,,,,,,111,111,111',
'111,111,111,111,111,111,111,111,111,,111,111,111,,111,111,111,111,111',
',,,,,,,,,,,,,,,,,,,111,,,111,,,111,111,,,111,,111,,,,111,,,,,,,,,111',
',,,,111,111,111,111,,111,111,111,111,,,,,111,111,,,,,,111,111,,111,111',
'111,116,116,116,,116,,,,116,116,,,,116,,116,116,116,116,116,116,116',
',,,,,116,116,116,116,116,116,116,,,116,,,,,,,116,,,116,116,116,116,116',
'116,116,116,,116,116,116,,116,116,116,116,116,,,,,,,,,,,,,,,,,,,,116',
',,116,,,116,116,,,116,,,,,,116,,,,,,,,,116,,,,,116,116,116,116,,116',
'116,116,116,,,,,116,116,,,,117,117,117,116,117,116,116,116,117,117,',
',,117,,117,117,117,117,117,117,117,,,,,,117,117,117,117,117,117,117',
',,117,,,,,,,117,,,117,117,117,117,117,117,117,117,,117,117,117,,117',
'117,117,117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,,117,,,,,,117',
',,,,,,,,117,,,,,117,117,117,117,,117,117,117,117,,,,,117,117,,,,118',
'118,118,117,118,117,117,117,118,118,,,,118,,118,118,118,118,118,118',
'118,,,,,,118,118,118,118,118,118,118,,,118,,,,,,,118,,,118,118,118,118',
'118,118,118,118,,118,118,118,,118,118,118,118,118,,,,,,,,,,,,,,,,,,',
',118,,,118,,,118,118,,,118,,,,,,118,,,,,,,,,118,,,,,118,118,118,118',
',118,118,118,118,,,,,118,118,,,,119,119,119,118,119,118,118,118,119',
'119,,,,119,,119,119,119,119,119,119,119,,,,,,119,119,119,119,119,119',
'119,,,119,,,,,,,119,,,119,119,119,119,119,119,119,119,,119,119,119,',
'119,119,119,119,119,,,,,,,,,,,,,,,,,,,,119,,,119,,,119,119,,,119,,,',
',,119,,,,,,,,,119,,,,,119,119,119,119,,119,119,119,119,,,,,119,119,',
',,,,,119,,119,119,119,120,120,120,120,120,,,,120,120,,,,120,,120,120',
'120,120,120,120,120,,,,,,120,120,120,120,120,120,120,,,120,,,,,,120',
'120,,120,120,120,120,120,120,120,120,120,,120,120,120,,120,120,120,120',
'120,,,,,,,,,,,,,,,,,,,,120,,,120,,,120,120,,,120,,120,,,,120,,,,,,,',
',120,,,,,120,120,120,120,,120,120,120,120,,,,,120,120,,,,770,770,770',
'120,770,120,120,120,770,770,,,,770,,770,770,770,770,770,770,770,,,,',
',770,770,770,770,770,770,770,,,770,,,,,,,770,,,770,770,770,770,770,770',
'770,770,,770,770,770,,770,770,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770',
',,770,770,,,770,,,,,,770,,,,,,,,,770,,,,,770,770,770,770,,770,770,770',
'770,,,,,770,770,,,,731,731,731,770,731,770,770,770,731,731,,,,731,,731',
'731,731,731,731,731,731,,,,,,731,731,731,731,731,731,731,,,731,,,,,',
',731,,,731,731,731,731,731,731,731,731,,731,731,731,,731,731,731,731',
'731,,,,,,,,,,,,,,,,,,,,731,,,731,,,731,731,,,731,,,,,,731,,,,,,,,,731',
',,,,731,731,731,731,,731,731,731,731,,,,,731,731,,,,771,771,771,731',
'771,731,731,731,771,771,,,,771,,771,771,771,771,771,771,771,,,,,,771',
'771,771,771,771,771,771,,,771,,,,,,,771,,,771,771,771,771,771,771,771',
'771,,771,771,771,,771,771,771,771,771,,,,,,,,,,,,,,,,,,,,771,,,771,',
',771,771,,,771,,,,,,771,,,,,,,,,771,,,,,771,771,771,771,,771,771,771',
'771,,,,,771,771,,,,44,44,44,771,44,771,771,771,44,44,,,,44,,44,44,44',
'44,44,44,44,,,,,,44,44,44,44,44,44,44,,,44,,,,,,,44,,,44,44,44,44,44',
'44,44,44,,44,44,44,,44,44,44,44,44,,,,,,,,,,,,,,,,,,,,44,,,44,,,44,44',
',,44,,,,,,44,,,,,,,,,44,,,,,44,44,44,44,,44,44,44,44,,,,,44,44,,,,207',
'207,207,44,207,44,44,44,207,207,,,,207,,207,207,207,207,207,207,207',
',,,,,207,207,207,207,207,207,207,,,207,,,,,,,207,,,207,207,207,207,207',
'207,207,207,,207,207,207,,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,207',
',,207,,,207,207,,,207,,207,,,,207,,,,,,,,,207,,,,,207,207,207,207,,207',
'207,207,207,,,,,207,207,,,,208,208,208,207,208,207,207,207,208,208,',
',,208,,208,208,208,208,208,208,208,,,,,,208,208,208,208,208,208,208',
',,208,,,,,,,208,,,208,208,208,208,208,208,208,208,,208,208,208,,208',
'208,208,208,208,,,,,,,,,,,,,,,,,,,,208,,,208,,,208,208,,,208,,,,,,208',
',,,,,,,,208,,,,,208,208,208,208,,208,208,208,208,,,,,208,208,,,,209',
'209,209,208,209,208,208,208,209,209,,,,209,,209,209,209,209,209,209',
'209,,,,,,209,209,209,209,209,209,209,,,209,,,,,,,209,,,209,209,209,209',
'209,209,209,209,209,209,209,209,,209,209,209,209,209,,,,,,,,,,,,,,,',
',,,,209,,,209,,,209,209,,,209,,209,,209,,209,,,209,,,,,,209,,,,,209',
'209,209,209,,209,209,209,209,,,,,209,209,,,,725,725,725,209,725,209',
'209,209,725,725,,,,725,,725,725,725,725,725,725,725,,,,,,725,725,725',
'725,725,725,725,,,725,,,,,,,725,,,725,725,725,725,725,725,725,725,,725',
'725,725,,725,725,725,725,725,,,,,,,,,,,,,,,,,,,,725,,,725,,,725,725',
',,725,,,,,,725,,,,,,,,,725,,,,,725,725,725,725,,725,725,725,725,,,,',
'725,725,,,,699,699,699,725,699,725,725,725,699,699,,,,699,,699,699,699',
'699,699,699,699,,,,,,699,699,699,699,699,699,699,,,699,,,,,,,699,,,699',
'699,699,699,699,699,699,699,,699,699,699,,699,699,699,699,699,,,,,,',
',,,,,,,,,,,,,699,,,699,,,699,699,,,699,,,,,,699,,,,,,,,,699,,,,,699',
'699,699,699,,699,699,699,699,,,,,699,699,,,,214,214,214,699,214,699',
'699,699,214,214,,,,214,,214,214,214,214,214,214,214,,,,,,214,214,214',
'214,214,214,214,,,214,,,,,,,214,,,214,214,214,214,214,214,214,214,,214',
'214,214,,214,214,214,214,214,,,,,,,,,,,,,,,,,,,,214,,,214,,,214,214',
',,214,,,,,,214,,,,,,,,,214,,,,,214,214,214,214,,214,214,214,214,,,,',
'214,214,,,,215,215,215,214,215,214,214,214,215,215,,,,215,,215,215,215',
'215,215,215,215,,,,,,215,215,215,215,215,215,215,,,215,,,,,,,215,,,215',
'215,215,215,215,215,215,215,,215,215,215,,215,215,215,215,215,,,,,,',
',,,,,,,,,,,,,215,,,215,,,215,215,,,215,,215,,,,215,,,,,,,,,215,,,,,215',
'215,215,215,,215,215,215,215,,,,,215,215,,,,362,362,362,215,362,215',
'215,215,362,362,,,,362,,362,362,362,362,362,362,362,,,,,,362,362,362',
'362,362,362,362,,,362,,,,,,,362,,,362,362,362,362,362,362,362,362,,362',
'362,362,,362,362,362,362,362,,,,,,,,,,,,,,,,,,,,362,,,362,,,362,362',
',,362,,,,,,362,,,,,,,,,362,,,,,362,362,362,362,,362,362,362,362,,,,',
'362,362,,,,217,217,217,362,217,362,362,362,217,217,,,,217,,217,217,217',
'217,217,217,217,,,,,,217,217,217,217,217,217,217,,,217,,,,,,,217,,,217',
'217,217,217,217,217,217,217,,217,217,217,,217,217,217,217,217,,,,,,',
',,,,,,,,,,,,,217,,,217,,,217,217,,,217,,,,,,217,,,,,,,,,217,,,,,217',
'217,217,217,,217,217,217,217,,,,,217,217,,,,218,218,218,217,218,217',
'217,217,218,218,,,,218,,218,218,218,218,218,218,218,,,,,,218,218,218',
'218,218,218,218,,,218,,,,,,,218,,,218,218,218,218,218,218,218,218,,218',
'218,218,,218,218,218,218,218,,,,,,,,,,,,,,,,,,,,218,,,218,,,218,218',
',,218,,,,,,218,,,,,,,,,218,,,,,218,218,218,218,,218,218,218,218,,,,',
'218,218,,,,219,219,219,218,219,218,218,218,219,219,,,,219,,219,219,219',
'219,219,219,219,,,,,,219,219,219,219,219,219,219,,,219,,,,,,,219,,,219',
'219,219,219,219,219,219,219,,219,219,219,,219,219,219,219,219,,,,,,',
',,,,,,,,,,,,,219,,,219,,,219,219,,,219,,,,,,219,,,,,,,,,219,,,,,219',
'219,219,219,,219,219,219,219,,,,,219,219,219,,,682,682,682,219,682,219',
'219,219,682,682,,,,682,,682,682,682,682,682,682,682,,,,,,682,682,682',
'682,682,682,682,,,682,,,,,,,682,,,682,682,682,682,682,682,682,682,,682',
'682,682,,682,682,682,682,682,,,,,,,,,,,,,,,,,,,,682,,,682,,,682,682',
',,682,,682,,,,682,,,,,,,,,682,,,,,682,682,682,682,,682,682,682,682,',
',,,682,682,,,,677,677,677,682,677,682,682,682,677,677,,,,677,,677,677',
'677,677,677,677,677,,,,,,677,677,677,677,677,677,677,,,677,,,,,,,677',
',,677,677,677,677,677,677,677,677,,677,677,677,,677,677,,,677,,,,,,',
',,,,,,,,,,,,,677,,,677,,,677,677,,,677,,,,,,,,,,,,,,,,,,,,677,677,677',
'677,,677,677,677,677,,,,,677,677,,,,666,666,666,677,666,677,677,677',
'666,666,,,,666,,666,666,666,666,666,666,666,,,,,,666,666,666,666,666',
'666,666,,,666,,,,,,,666,,,666,666,666,666,666,666,666,666,,666,666,666',
',666,666,,,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,,666,,,,,,,,',
',,,,,,,,,,,666,666,666,666,,666,666,666,666,,,,,666,666,,,,662,662,662',
'666,662,666,666,666,662,662,,,,662,,662,662,662,662,662,662,662,,,,',
',662,662,662,662,662,662,662,,,662,,,,,,,662,,,662,662,662,662,662,662',
'662,662,,662,662,662,,662,662,662,662,662,,,,,,,,,,,,,,,,,,,,662,,,662',
',,662,662,,,662,,,,,,662,,,,,,,,,662,,,,,662,662,662,662,,662,662,662',
'662,,,,,662,662,,,,659,659,659,662,659,662,662,662,659,659,,,,659,,659',
'659,659,659,659,659,659,,,,,,659,659,659,659,659,659,659,,,659,,,,,',
',659,,,659,659,659,659,659,659,659,659,,659,659,659,,659,659,659,659',
'659,,,,,,,,,,,,,,,,,,,,659,,,659,,,659,659,,,659,,,,,,659,,,,,,,,,659',
',,,,659,659,659,659,,659,659,659,659,,,,,659,659,,,,43,43,43,659,43',
'659,659,659,43,43,,,,43,,43,43,43,43,43,43,43,,,,,,43,43,43,43,43,43',
'43,,,43,,,,,,,43,,,43,43,43,43,43,43,43,43,,43,43,43,,43,43,43,43,43',
',,,,,,,,,,,,,,,,,,,43,,,43,,,43,43,,,43,,,,,,43,,,,,,,,,43,,,,,43,43',
'43,43,,43,43,43,43,,,,,43,43,,,,42,42,42,43,42,43,43,43,42,42,,,,42',
',42,42,42,42,42,42,42,,,,,,42,42,42,42,42,42,42,,,42,,,,,,,42,,,42,42',
'42,42,42,42,42,42,,42,42,42,,42,42,42,42,42,,,,,,,,,,,,,,,,,,,,42,,',
'42,,,42,42,,,42,,,,,,42,,,,,,,,,42,,,,,42,42,42,42,,42,42,42,42,,,,',
'42,42,,,,230,230,230,42,230,42,42,42,230,230,,,,230,,230,230,230,230',
'230,230,230,,,,,,230,230,230,230,230,230,230,,,230,,,,,,,230,,,230,230',
'230,230,230,230,230,230,,230,230,230,,230,230,230,230,230,,,,,,,,,,',
',,,,,,,,,230,,,230,,,230,230,,,230,,,,,,230,,,,,,,,,230,,,,,230,230',
'230,230,,230,230,230,230,,,,,230,230,,,,772,772,772,230,772,230,230',
'230,772,772,,,,772,,772,772,772,772,772,772,772,,,,,,772,772,772,772',
'772,772,772,,,772,,,,,,,772,,,772,772,772,772,772,772,772,772,,772,772',
'772,,772,772,772,772,772,,,,,,,,,,,,,,,,,,,,772,,,772,,,772,772,,,772',
',,,,,772,,,,,,,,,772,,,,,772,772,772,772,,772,772,772,772,,,,,772,772',
',,,774,774,774,772,774,772,772,772,774,774,,,,774,,774,774,774,774,774',
'774,774,,,,,,774,774,774,774,774,774,774,,,774,,,,,,,774,,,774,774,774',
'774,774,774,774,774,,774,774,774,,774,774,774,774,774,,,,,,,,,,,,,,',
',,,,,774,,,774,,,774,774,,,774,,,,,,774,,,,,,,,,774,,,,,774,774,774',
'774,,774,774,774,774,,,,,774,774,,,,233,233,233,774,233,774,774,774',
'233,233,,,,233,,233,233,233,233,233,233,233,,,,,,233,233,233,233,233',
'233,233,,,233,,,,,,,233,,,233,233,233,233,233,233,233,233,,233,233,233',
',233,233,233,233,233,,,,,,,,,,,,,,,,,,,,233,,,233,,,233,233,,,233,,',
',,,233,,,,,,,,,233,,,,,233,233,233,233,,233,233,233,233,,,,,233,233',
',,,234,234,234,233,234,233,233,233,234,234,,,,234,,234,234,234,234,234',
'234,234,,,,,,234,234,234,234,234,234,234,,,234,,,,,,,234,,,234,234,234',
'234,234,234,234,234,,234,234,234,,234,234,234,234,234,,,,,,,,,,,,,,',
',,,,,234,,,234,,,234,234,,,234,,,,,,234,,,,,,,,,234,,,,,234,234,234',
'234,,234,234,234,234,,,,,234,234,,,,235,235,235,234,235,234,234,234',
'235,235,,,,235,,235,235,235,235,235,235,235,,,,,,235,235,235,235,235',
'235,235,,,235,,,,,,,235,,,235,235,235,235,235,235,235,235,,235,235,235',
',235,235,235,235,235,,,,,,,,,,,,,,,,,,,,235,,,235,,,235,235,,,235,,',
',,,235,,,,,,,,,235,,,,,235,235,235,235,,235,235,235,235,,,,,235,235',
',,,236,236,236,235,236,235,235,235,236,236,,,,236,,236,236,236,236,236',
'236,236,,,,,,236,236,236,236,236,236,236,,,236,,,,,,,236,,,236,236,236',
'236,236,236,236,236,,236,236,236,,236,236,236,236,236,,,,,,,,,,,,,,',
',,,,,236,,,236,,,236,236,,,236,,,,,,236,,,,,,,,,236,,,,,236,236,236',
'236,,236,236,236,236,,,,,236,236,,,,237,237,237,236,237,236,236,236',
'237,237,,,,237,,237,237,237,237,237,237,237,,,,,,237,237,237,237,237',
'237,237,,,237,,,,,,,237,,,237,237,237,237,237,237,237,237,,237,237,237',
',237,237,237,237,237,,,,,,,,,,,,,,,,,,,,237,,,237,,,237,237,,,237,,',
',,,237,,,,,,,,,237,,,,,237,237,237,237,,237,237,237,237,,,,,237,237',
',,,238,238,238,237,238,237,237,237,238,238,,,,238,,238,238,238,238,238',
'238,238,,,,,,238,238,238,238,238,238,238,,,238,,,,,,,238,,,238,238,238',
'238,238,238,238,238,,238,238,238,,238,238,238,238,238,,,,,,,,,,,,,,',
',,,,,238,,,238,,,238,238,,,238,,,,,,238,,,,,,,,,238,,,,,238,238,238',
'238,,238,238,238,238,,,,,238,238,,,,239,239,239,238,239,238,238,238',
'239,239,,,,239,,239,239,239,239,239,239,239,,,,,,239,239,239,239,239',
'239,239,,,239,,,,,,,239,,,239,239,239,239,239,239,239,239,,239,239,239',
',239,239,239,239,239,,,,,,,,,,,,,,,,,,,,239,,,239,,,239,239,,,239,,',
',,,239,,,,,,,,,239,,,,,239,239,239,239,,239,239,239,239,,,,,239,239',
',,,240,240,240,239,240,239,239,239,240,240,,,,240,,240,240,240,240,240',
'240,240,,,,,,240,240,240,240,240,240,240,,,240,,,,,,,240,,,240,240,240',
'240,240,240,240,240,,240,240,240,,240,240,240,240,240,,,,,,,,,,,,,,',
',,,,,240,,,240,,,240,240,,,240,,,,,,240,,,,,,,,,240,,,,,240,240,240',
'240,,240,240,240,240,,,,,240,240,,,,241,241,241,240,241,240,240,240',
'241,241,,,,241,,241,241,241,241,241,241,241,,,,,,241,241,241,241,241',
'241,241,,,241,,,,,,,241,,,241,241,241,241,241,241,241,241,,241,241,241',
',241,241,241,241,241,,,,,,,,,,,,,,,,,,,,241,,,241,,,241,241,,,241,,',
',,,241,,,,,,,,,241,,,,,241,241,241,241,,241,241,241,241,,,,,241,241',
',,,242,242,242,241,242,241,241,241,242,242,,,,242,,242,242,242,242,242',
'242,242,,,,,,242,242,242,242,242,242,242,,,242,,,,,,,242,,,242,242,242',
'242,242,242,242,242,,242,242,242,,242,242,242,242,242,,,,,,,,,,,,,,',
',,,,,242,,,242,,,242,242,,,242,,,,,,242,,,,,,,,,242,,,,,242,242,242',
'242,,242,242,242,242,,,,,242,242,,,,243,243,243,242,243,242,242,242',
'243,243,,,,243,,243,243,243,243,243,243,243,,,,,,243,243,243,243,243',
'243,243,,,243,,,,,,,243,,,243,243,243,243,243,243,243,243,,243,243,243',
',243,243,243,243,243,,,,,,,,,,,,,,,,,,,,243,,,243,,,243,243,,,243,,',
',,,243,,,,,,,,,243,,,,,243,243,243,243,,243,243,243,243,,,,,243,243',
',,,244,244,244,243,244,243,243,243,244,244,,,,244,,244,244,244,244,244',
'244,244,,,,,,244,244,244,244,244,244,244,,,244,,,,,,,244,,,244,244,244',
'244,244,244,244,244,,244,244,244,,244,244,244,244,244,,,,,,,,,,,,,,',
',,,,,244,,,244,,,244,244,,,244,,,,,,244,,,,,,,,,244,,,,,244,244,244',
'244,,244,244,244,244,,,,,244,244,,,,245,245,245,244,245,244,244,244',
'245,245,,,,245,,245,245,245,245,245,245,245,,,,,,245,245,245,245,245',
'245,245,,,245,,,,,,,245,,,245,245,245,245,245,245,245,245,,245,245,245',
',245,245,245,245,245,,,,,,,,,,,,,,,,,,,,245,,,245,,,245,245,,,245,,',
',,,245,,,,,,,,,245,,,,,245,245,245,245,,245,245,245,245,,,,,245,245',
',,,246,246,246,245,246,245,245,245,246,246,,,,246,,246,246,246,246,246',
'246,246,,,,,,246,246,246,246,246,246,246,,,246,,,,,,,246,,,246,246,246',
'246,246,246,246,246,,246,246,246,,246,246,246,246,246,,,,,,,,,,,,,,',
',,,,,246,,,246,,,246,246,,,246,,,,,,246,,,,,,,,,246,,,,,246,246,246',
'246,,246,246,246,246,,,,,246,246,,,,247,247,247,246,247,246,246,246',
'247,247,,,,247,,247,247,247,247,247,247,247,,,,,,247,247,247,247,247',
'247,247,,,247,,,,,,,247,,,247,247,247,247,247,247,247,247,,247,247,247',
',247,247,247,247,247,,,,,,,,,,,,,,,,,,,,247,,,247,,,247,247,,,247,,',
',,,247,,,,,,,,,247,,,,,247,247,247,247,,247,247,247,247,,,,,247,247',
',,,248,248,248,247,248,247,247,247,248,248,,,,248,,248,248,248,248,248',
'248,248,,,,,,248,248,248,248,248,248,248,,,248,,,,,,,248,,,248,248,248',
'248,248,248,248,248,,248,248,248,,248,248,248,248,248,,,,,,,,,,,,,,',
',,,,,248,,,248,,,248,248,,,248,,,,,,248,,,,,,,,,248,,,,,248,248,248',
'248,,248,248,248,248,,,,,248,248,,,,249,249,249,248,249,248,248,248',
'249,249,,,,249,,249,249,249,249,249,249,249,,,,,,249,249,249,249,249',
'249,249,,,249,,,,,,,249,,,249,249,249,249,249,249,249,249,,249,249,249',
',249,249,249,249,249,,,,,,,,,,,,,,,,,,,,249,,,249,,,249,249,,,249,,',
',,,249,,,,,,,,,249,,,,,249,249,249,249,,249,249,249,249,,,,,249,249',
',,,250,250,250,249,250,249,249,249,250,250,,,,250,,250,250,250,250,250',
'250,250,,,,,,250,250,250,250,250,250,250,,,250,,,,,,,250,,,250,250,250',
'250,250,250,250,250,,250,250,250,,250,250,250,250,250,,,,,,,,,,,,,,',
',,,,,250,,,250,,,250,250,,,250,,,,,,250,,,,,,,,,250,,,,,250,250,250',
'250,,250,250,250,250,,,,,250,250,,,,251,251,251,250,251,250,250,250',
'251,251,,,,251,,251,251,251,251,251,251,251,,,,,,251,251,251,251,251',
'251,251,,,251,,,,,,,251,,,251,251,251,251,251,251,251,251,,251,251,251',
',251,251,251,251,251,,,,,,,,,,,,,,,,,,,,251,,,251,,,251,251,,,251,,',
',,,251,,,,,,,,,251,,,,,251,251,251,251,,251,251,251,251,,,,,251,251',
',,,252,252,252,251,252,251,251,251,252,252,,,,252,,252,252,252,252,252',
'252,252,,,,,,252,252,252,252,252,252,252,,,252,,,,,,,252,,,252,252,252',
'252,252,252,252,252,,252,252,252,,252,252,252,252,252,,,,,,,,,,,,,,',
',,,,,252,,,252,,,252,252,,,252,,,,,,252,,,,,,,,,252,,,,,252,252,252',
'252,,252,252,252,252,,,,,252,252,,,,253,253,253,252,253,252,252,252',
'253,253,,,,253,,253,253,253,253,253,253,253,,,,,,253,253,253,253,253',
'253,253,,,253,,,,,,,253,,,253,253,253,253,253,253,253,253,,253,253,253',
',253,253,253,253,253,,,,,,,,,,,,,,,,,,,,253,,,253,,,253,253,,,253,,',
',,,253,,,,,,,,,253,,,,,253,253,253,253,,253,253,253,253,,,,,253,253',
',,,254,254,254,253,254,253,253,253,254,254,,,,254,,254,254,254,254,254',
'254,254,,,,,,254,254,254,254,254,254,254,,,254,,,,,,,254,,,254,254,254',
'254,254,254,254,254,,254,254,254,,254,254,254,254,254,,,,,,,,,,,,,,',
',,,,,254,,,254,,,254,254,,,254,,,,,,254,,,,,,,,,254,,,,,254,254,254',
'254,,254,254,254,254,,,,,254,254,,,,255,255,255,254,255,254,254,254',
'255,255,,,,255,,255,255,255,255,255,255,255,,,,,,255,255,255,255,255',
'255,255,,,255,,,,,,,255,,,255,255,255,255,255,255,255,255,,255,255,255',
',255,255,255,255,255,,,,,,,,,,,,,,,,,,,,255,,,255,,,255,255,,,255,,',
',,,255,,,,,,,,,255,,,,,255,255,255,255,,255,255,255,255,,,,,255,255',
',,,256,256,256,255,256,255,255,255,256,256,,,,256,,256,256,256,256,256',
'256,256,,,,,,256,256,256,256,256,256,256,,,256,,,,,,,256,,,256,256,256',
'256,256,256,256,256,,256,256,256,,256,256,256,256,256,,,,,,,,,,,,,,',
',,,,,256,,,256,,,256,256,,,256,,,,,,256,,,,,,,,,256,,,,,256,256,256',
'256,,256,256,256,256,,,,,256,256,,,,257,257,257,256,257,256,256,256',
'257,257,,,,257,,257,257,257,257,257,257,257,,,,,,257,257,257,257,257',
'257,257,,,257,,,,,,,257,,,257,257,257,257,257,257,257,257,,257,257,257',
',257,257,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,,257,,',
',,,257,,,,,,,,,257,,,,,257,257,257,257,,257,257,257,257,,,,,257,257',
',,,258,258,258,257,258,257,257,257,258,258,,,,258,,258,258,258,258,258',
'258,258,,,,,,258,258,258,258,258,258,258,,,258,,,,,,,258,,,258,258,258',
'258,258,258,258,258,,258,258,258,,258,258,258,258,258,,,,,,,,,,,,,,',
',,,,,258,,,258,,,258,258,,,258,,,,,,258,,,,,,,,,258,,,,,258,258,258',
'258,,258,258,258,258,,,,,258,258,,,,786,786,786,258,786,258,258,258',
'786,786,,,,786,,786,786,786,786,786,786,786,,,,,,786,786,786,786,786',
'786,786,,,786,,,,,,,786,,,786,786,786,786,786,786,786,786,,786,786,786',
',786,786,,,786,,,,,,,,,,,,,,,,,,,,786,,,786,,,786,786,,,786,,,,,,,,',
',,,,,,,,,,,786,786,786,786,,786,786,786,786,,,,,786,786,,,,35,35,35',
'786,35,786,786,786,35,35,,,,35,,35,35,35,35,35,35,35,,,,,,35,35,35,35',
'35,35,35,,,35,,,,,,,35,,,35,35,35,35,35,35,35,35,,35,35,35,,35,35,,',
'35,,,,,,,,,,,,,,,,,,,,35,,,35,,,35,35,,,35,,,986,,986,986,986,986,986',
',,,,,,,,986,,35,35,35,35,,35,35,35,35,,,,,35,35,,,,35,,986,35,,35,35',
'35,265,265,265,,265,986,986,,265,265,986,,,265,,265,265,265,265,265',
'265,265,,,,,,265,265,265,265,265,265,265,,,265,,,,,,,265,,,265,265,265',
'265,265,265,265,265,265,265,265,265,,265,265,265,265,265,,,,,,,,,,,',
',,,,,,,,265,,,265,,,265,265,,,265,,265,,265,,265,,,265,,,,,,265,,,,',
'265,265,265,265,,265,265,265,265,,,,,265,265,,,,266,266,266,265,266',
'265,265,265,266,266,,,,266,,266,266,266,266,266,266,266,,,,,,266,266',
'266,266,266,266,266,,,266,,,,,,,266,,,266,266,266,266,266,266,266,266',
'266,266,266,266,,266,266,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,',
'266,266,,,266,,266,,266,,266,,,266,,,,,,266,,,,,266,266,266,266,,266',
'266,266,266,,,,,266,266,,,,274,274,274,266,274,266,266,266,274,274,',
',,274,,274,274,274,274,274,274,274,,,,,,274,274,274,274,274,274,274',
',,274,,,,,,,274,,,274,274,274,274,274,274,274,274,274,274,274,274,,274',
'274,274,274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,,274,,274,,274',
',274,,,274,,,,,,274,,,,,274,274,274,274,,274,274,274,274,,,,,274,274',
'274,,,635,635,635,274,635,274,274,274,635,635,,,,635,,635,635,635,635',
'635,635,635,,,,,,635,635,635,635,635,635,635,,,635,,,,,,,635,,,635,635',
'635,635,635,635,635,635,,635,635,635,,635,635,635,635,635,,,,,,,,,,',
',,,,,,,,,635,,,635,,,635,635,,,635,,,,,,635,,,,,,,,,635,,,,,635,635',
'635,635,,635,635,635,635,,,,,635,635,,,,634,634,634,635,634,635,635',
'635,634,634,,,,634,,634,634,634,634,634,634,634,,,,,,634,634,634,634',
'634,634,634,,,634,,,,,,,634,,,634,634,634,634,634,634,634,634,,634,634',
'634,,634,634,634,634,634,,,,,,,,,,,,,,,,,,,,634,,,634,,,634,634,,,634',
',,,,,634,,,,,,,,,634,,,,,634,634,634,634,,634,634,634,634,,,,,634,634',
',,,631,631,631,634,631,634,634,634,631,631,,,,631,,631,631,631,631,631',
'631,631,,,,,,631,631,631,631,631,631,631,,,631,,,,,,,631,,,631,631,631',
'631,631,631,631,631,,631,631,631,,631,631,631,631,631,,,,,,,,,,,,,,',
',,,,,631,,,631,,,631,631,,,631,,,,,,631,,,,,,,,,631,,,,,631,631,631',
'631,,631,631,631,631,,,,,631,631,,,,281,281,281,631,281,631,631,631',
'281,281,,,,281,,281,281,281,281,281,281,281,,,,,,281,281,281,281,281',
'281,281,,,281,,,,,,,281,,,281,281,281,281,281,281,281,281,,281,281,281',
',281,281,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,,281,,',
',,,281,,,,,,,,,281,,,,,281,281,281,281,,281,281,281,281,,,,,281,281',
',,,630,630,630,281,630,281,281,281,630,630,,,,630,,630,630,630,630,630',
'630,630,,,,,,630,630,630,630,630,630,630,,,630,,,,,,,630,,,630,630,630',
'630,630,630,630,630,,630,630,630,,630,630,630,630,630,,,,,,,,,,,,,,',
',,,,,630,,,630,,,630,630,,,630,,,,,,630,,,,,,,,,630,,,,,630,630,630',
'630,,630,630,630,630,,,,,630,630,,,,283,283,283,630,283,630,630,630',
'283,283,,,,283,,283,283,283,283,283,283,283,,,,,,283,283,283,283,283',
'283,283,,,283,,,,,,,283,,,283,283,283,283,283,283,283,283,,283,283,283',
',283,283,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,,283,,',
',,,283,,,,,,,,,283,,,,,283,283,283,283,,283,283,283,283,,,,,283,283',
',,,286,286,286,283,286,283,283,283,286,286,,,,286,,286,286,286,286,286',
'286,286,,,,,,286,286,286,286,286,286,286,,,286,,,,,,,286,,,286,286,286',
'286,286,286,286,286,,286,286,286,,286,286,286,286,286,,,,,,,,,,,,,,',
',,,,,286,,,286,,,286,286,,,286,,,,,,286,,,,,,,,,286,,,,,286,286,286',
'286,,286,286,286,286,,,,,286,286,,,,287,287,287,286,287,286,286,286',
'287,287,,,,287,,287,287,287,287,287,287,287,,,,,,287,287,287,287,287',
'287,287,,,287,,,,,,,287,,,287,287,287,287,287,287,287,287,,287,287,287',
',287,287,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,,287,,',
',,,287,,,,,,,,,287,,,,,287,287,287,287,,287,287,287,287,,,,,287,287',
',,,626,626,626,287,626,287,287,287,626,626,,,,626,,626,626,626,626,626',
'626,626,,,,,,626,626,626,626,626,626,626,,,626,,,,,,,626,,,626,626,626',
'626,626,626,626,626,,626,626,626,,626,626,626,626,626,,,,,,,,,,,,,,',
',,,,,626,,,626,,,626,626,,,626,,,,,,626,,,,,,,,,626,,,,,626,626,626',
'626,,626,626,626,626,,,,,626,626,,,,,,,626,,626,626,626,292,292,292',
'292,292,,,,292,292,,,,292,,292,292,292,292,292,292,292,,,,,,292,292',
'292,292,292,292,292,,,292,,,,,,292,292,,292,292,292,292,292,292,292',
'292,292,,292,292,292,,292,292,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292',
',,292,292,,,292,,292,,,,292,,,,,,,,,292,,,,,292,292,292,292,,292,292',
'292,292,,,,,292,292,,,,625,625,625,292,625,292,292,292,625,625,,,,625',
',625,625,625,625,625,625,625,,,,,,625,625,625,625,625,625,625,,,625',
',,,,,,625,,,625,625,625,625,625,625,625,625,,625,625,625,,625,625,625',
'625,625,,,,,,,,,,,,,,,,,,,,625,,,625,,,625,625,,,625,,,,,,625,,,,,,',
',,625,,,,,625,625,625,625,,625,625,625,625,,,,,625,625,,,,624,624,624',
'625,624,625,625,625,624,624,,,,624,,624,624,624,624,624,624,624,,,,',
',624,624,624,624,624,624,624,,,624,,,,,,,624,,,624,624,624,624,624,624',
'624,624,624,624,624,624,,624,624,624,624,624,,,,,,,,,,,,,,,,,,,,624',
',,624,,,624,624,,,624,,,,624,,624,,,624,,,,,,624,,,,,624,624,624,624',
',624,624,624,624,,,,,624,624,,,,63,63,63,624,63,624,624,624,63,63,,',
',63,,63,63,63,63,63,63,63,,,,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,',
'63,63,63,63,63,63,63,63,,63,63,63,,63,63,63,63,63,,,,,,,,,,,,,,,,,,',
',63,,,63,,,63,63,,,63,,,,,,63,,,,,,,,,63,,,,,63,63,63,63,,63,63,63,63',
',,,,63,63,,,,34,34,34,63,34,63,63,63,34,34,,,,34,,34,34,34,34,34,34',
'34,,,,,,34,34,34,34,34,34,34,,,34,,,,,,,34,,,34,34,34,34,34,34,34,34',
',34,34,34,,34,34,,,34,,,,,,,,,,,,,,,,,,,,34,,,34,,,34,34,,,34,,34,,',
',,,,,,,,,,,,,,,34,34,34,34,,34,34,34,34,,,,,34,34,,,,620,620,620,34',
'620,34,34,34,620,620,,,,620,,620,620,620,620,620,620,620,,,,,,620,620',
'620,620,620,620,620,,,620,,,,,,,620,,,620,620,620,620,620,620,620,620',
',620,620,620,,620,620,620,620,620,,,,,,,,,,,,,,,,,,,,620,,,620,,,620',
'620,,,620,,,,,,620,,,,,,,,,620,,,,,620,620,620,620,,620,620,620,620',
',,,,620,620,,,,619,619,619,620,619,620,620,620,619,619,,,,619,,619,619',
'619,619,619,619,619,,,,,,619,619,619,619,619,619,619,,,619,,,,,,,619',
',,619,619,619,619,619,619,619,619,,619,619,619,,619,619,619,619,619',
',,,,,,,,,,,,,,,,,,,619,,,619,,,619,619,,,619,,619,,,,619,,,,,,,,,619',
',,,,619,619,619,619,,619,619,619,619,,,,,619,619,,,,31,31,31,619,31',
'619,619,619,31,31,,,,31,,31,31,31,31,31,31,31,,,,,,31,31,31,31,31,31',
'31,,,31,,,,,,,31,,,31,31,31,31,31,31,31,31,31,31,31,31,,31,31,31,31',
'31,,,,,,,,,,,,,,,,,,,,31,,,31,,,31,31,,,31,,31,,31,,31,,,31,,,,,,31',
',,,,31,31,31,31,,31,31,31,31,,,,,31,31,,,,300,300,300,31,300,31,31,31',
'300,300,,,,300,,300,300,300,300,300,300,300,,,,,,300,300,300,300,300',
'300,300,,,300,,,,,,,300,,,300,300,300,300,300,300,300,300,,300,300,300',
',300,300,,,300,,,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,,300,,,974,,974',
'974,974,974,974,,,,,,,,,974,,300,300,300,300,,300,300,300,300,,,,,300',
'300,,,,300,,974,300,,300,300,300,30,30,30,,30,974,974,,30,30,974,,,30',
',30,30,30,30,30,30,30,,,,,,30,30,30,30,30,30,30,,,30,,,,,,,30,,,30,30',
'30,30,30,30,30,30,30,30,30,30,,30,30,30,30,30,,,,,,,,,,,,,,,,,,,,30',
',,30,,,30,30,,,30,,30,,30,,30,,,30,,,,,,30,,,,,30,30,30,30,,30,30,30',
'30,,,,,30,30,,,,587,587,587,30,587,30,30,30,587,587,,,,587,,587,587',
'587,587,587,587,587,,,,,,587,587,587,587,587,587,587,,,587,,,,,,,587',
',,587,587,587,587,587,587,587,587,587,587,587,587,,587,587,587,587,587',
',,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,,587,,587,,587,,587,,,587,,',
',,,587,,,,,587,587,587,587,,587,587,587,587,,,,,587,587,,,,577,577,577',
'587,577,587,587,587,577,577,,,,577,,577,577,577,577,577,577,577,,,,',
',577,577,577,577,577,577,577,,,577,,,,,,,577,,,577,577,577,577,577,577',
'577,577,577,577,577,577,,577,577,577,577,577,,,,,,,,,,,,,,,,,,,,577',
',,577,,,577,577,,,577,,577,,577,,577,,,577,,,,,,577,,,,,577,577,577',
'577,,577,577,577,577,,,,,577,577,,,,576,576,576,577,576,577,577,577',
'576,576,,,,576,,576,576,576,576,576,576,576,,,,,,576,576,576,576,576',
'576,576,,,576,,,,,,,576,,,576,576,576,576,576,576,576,576,,576,576,576',
',576,576,576,576,576,,,,,,,,,,,,,,,,,,,,576,,,576,,,576,576,,,576,,576',
',,,576,,,,,,,,,576,,,,,576,576,576,576,,576,576,576,576,,,,,576,576',
',,,29,29,29,576,29,576,576,576,29,29,,,,29,,29,29,29,29,29,29,29,,,',
',,29,29,29,29,29,29,29,,,29,,,,,,,29,,,29,29,29,29,29,29,29,29,29,29',
'29,29,,29,29,29,29,29,,,,,,,,,,,,,,,,,,,,29,,,29,,,29,29,,,29,,29,,29',
',29,,,29,,,,,,29,,,,,29,29,29,29,,29,29,29,29,,,,,29,29,,,,836,836,836',
'29,836,29,29,29,836,836,,,,836,,836,836,836,836,836,836,836,,,,,,836',
'836,836,836,836,836,836,,,836,,,,,,,836,,,836,836,836,836,836,836,836',
'836,,836,836,836,,836,836,836,836,836,,,,,,,,,,,,,,,,,,,,836,,,836,',
',836,836,,,836,,,,,,836,,,,,,,,,836,,,,,836,836,836,836,,836,836,836',
'836,,,,,836,836,,,,556,556,556,836,556,836,836,836,556,556,,,,556,,556',
'556,556,556,556,556,556,,,,,,556,556,556,556,556,556,556,,,556,,,,,',
',556,,,556,556,556,556,556,556,556,556,,556,556,556,,556,556,556,556',
'556,,,,,,,,,,,,,,,,,,,,556,,,556,,,556,556,,,556,,,,,,556,,,,,,,,,556',
',,,,556,556,556,556,,556,556,556,556,,,,,556,556,,,,531,531,531,556',
'531,556,556,556,531,531,,,,531,,531,531,531,531,531,531,531,,,,,,531',
'531,531,531,531,531,531,,,531,,,,,,,531,,,531,531,531,531,531,531,531',
'531,531,531,531,531,,531,531,531,531,531,,,,,,,,,,,,,,,,,,,,531,,,531',
',,531,531,,,531,,,,,,531,,,531,,,,,,531,,,,,531,531,531,531,,531,531',
'531,531,,,,,531,531,,,,528,528,528,531,528,531,531,531,528,528,,,,528',
',528,528,528,528,528,528,528,,,,,,528,528,528,528,528,528,528,,,528',
',,,,,,528,,,528,528,528,528,528,528,528,528,528,528,528,528,,528,528',
'528,528,528,,,,,,,,,,,,,,,,,,,,528,,,528,,,528,528,,,528,,528,,,,528',
',,528,,,,,,528,,,,,528,528,528,528,,528,528,528,528,,,,,528,528,,,,522',
'522,522,528,522,528,528,528,522,522,,,,522,,522,522,522,522,522,522',
'522,,,,,,522,522,522,522,522,522,522,,,522,,,,,,,522,,,522,522,522,522',
'522,522,522,522,,522,522,522,,522,522,522,522,522,,,,,,,,,,,,,,,,,,',
',522,,,522,,,522,522,,,522,,,,,,522,,,,,,,,,522,,,,,522,522,522,522',
',522,522,522,522,,,,,522,522,,,,518,518,518,522,518,522,522,522,518',
'518,,,,518,,518,518,518,518,518,518,518,,,,,,518,518,518,518,518,518',
'518,,,518,,,,,,,518,,,518,518,518,518,518,518,518,518,,518,518,518,',
'518,518,518,518,518,,,,,,,,,,,,,,,,,,,,518,,,518,,,518,518,,,518,,,',
',,518,,,,,,,,,518,,,,,518,518,518,518,,518,518,518,518,,,,,518,518,',
',,517,517,517,518,517,518,518,518,517,517,,,,517,,517,517,517,517,517',
'517,517,,,,,,517,517,517,517,517,517,517,,,517,,,,,,,517,,,517,517,517',
'517,517,517,517,517,,517,517,517,,517,517,517,517,517,,,,,,,,,,,,,,',
',,,,,517,,,517,,,517,517,,,517,,,,,,517,,,,,,,,,517,,,,,517,517,517',
'517,,517,517,517,517,,,,,517,517,,,,317,317,317,517,317,517,517,517',
'317,317,,,,317,,317,317,317,317,317,317,317,,,,,,317,317,317,317,317',
'317,317,,,317,,,,,,,317,,,317,317,317,317,317,317,317,317,,317,317,317',
',317,317,,,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,,317,,,,,,,,',
',,,,,,,,,,,317,317,317,317,,317,317,317,317,,,,,317,317,,,,514,514,514',
'317,514,317,317,317,514,514,,,,514,,514,514,514,514,514,514,514,,,,',
',514,514,514,514,514,514,514,,,514,,,,,,,514,,,514,514,514,514,514,514',
'514,514,,514,514,514,,514,514,,,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514',
'514,,,514,,,,,,,,,,,,,,,,,,,,514,514,514,514,,514,514,514,514,,,,,514',
'514,,,,508,508,508,514,508,514,514,514,508,508,,,,508,,508,508,508,508',
'508,508,508,,,,,,508,508,508,508,508,508,508,,,508,,,,,,,508,,,508,508',
'508,508,508,508,508,508,508,508,508,508,,508,508,508,508,508,,,,,,,',
',,,,,,,,,,,,508,,,508,,,508,508,,,508,,508,,508,,508,,,508,,,,,,508',
',,,,508,508,508,508,,508,508,508,508,,,,,508,508,,,,506,506,506,508',
'506,508,508,508,506,506,,,,506,,506,506,506,506,506,506,506,,,,,,506',
'506,506,506,506,506,506,,,506,,,,,,,506,,,506,506,506,506,506,506,506',
'506,,506,506,506,,506,506,,,506,,,,,,,,,,,,,,,,,,,,506,,,506,,,506,506',
',,506,,,,,,,,,,,,,,,,,,,,506,506,506,506,,506,506,506,506,,,,,506,506',
',,,20,20,20,506,20,506,506,506,20,20,,,,20,,20,20,20,20,20,20,20,,,',
',,20,20,20,20,20,20,20,,,20,,,,,,,20,,,20,20,20,20,20,20,20,20,,20,20',
'20,,20,20,20,20,20,,,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,,20,,,,,,20,',
',,,,,,,20,,,,,20,20,20,20,,20,20,20,20,,,,,20,20,,,,325,325,325,20,325',
'20,20,20,325,325,,,,325,,325,325,325,325,325,325,325,,,,,,325,325,325',
'325,325,325,325,,,325,,,,,,,325,,,325,325,325,325,325,325,325,325,,325',
'325,325,,325,325,325,325,325,,,,,,,,,,,,,,,,,,,,325,,,325,325,,325,325',
',,325,,,,,,325,,,,,,,,,325,,,,,325,325,325,325,,325,325,325,325,,,,',
'325,325,,,,841,841,841,325,841,325,325,325,841,841,,,,841,,841,841,841',
'841,841,841,841,,,,,,841,841,841,841,841,841,841,,,841,,,,,,,841,,,841',
'841,841,841,841,841,841,841,,841,841,841,,841,841,841,841,841,,,,,,',
',,,,,,,,,,,,,841,,,841,,,841,841,,,841,,841,,,,841,,,,,,,,,841,,,,,841',
'841,841,841,,841,841,841,841,,,,,841,841,,,,327,327,327,841,327,841',
'841,841,327,327,,,,327,,327,327,327,327,327,327,327,,,,,,327,327,327',
'327,327,327,327,,,327,,,,,,,327,,,327,327,327,327,327,327,327,327,,327',
'327,327,,327,327,327,327,327,,,,,,,,,,,,,,,,,,,,327,,,327,,,327,327',
',,327,,,,,,327,,,,,,,,,327,,,,,327,327,327,327,,327,327,327,327,,,,',
'327,327,,,,,,,327,,327,327,327,498,498,498,498,498,,,,498,498,,,,498',
',498,498,498,498,498,498,498,,,,,,498,498,498,498,498,498,498,,,498',
',,,,,498,498,498,498,498,498,498,498,498,498,498,498,,498,498,498,,498',
'498,498,498,498,,,,,,,,,,,,,,,,,,,,498,,,498,,,498,498,,,498,,498,,',
',498,,,,,,,,,498,,,,,498,498,498,498,,498,498,498,498,,,,,498,498,,',
',,,498,498,,498,498,498,492,492,492,,492,,,,492,492,,,,492,,492,492',
'492,492,492,492,492,,,,,,492,492,492,492,492,492,492,,,492,,,,,,,492',
',,492,492,492,492,492,492,492,492,,492,492,492,,492,492,492,492,492',
',,,,,,,,,,,,,,,,,,,492,,,492,,,492,492,,,492,,,,,,492,,,,,,,,,492,,',
',,492,492,492,492,,492,492,492,492,,,,,492,492,,,,490,490,490,492,490',
'492,492,492,490,490,,,,490,,490,490,490,490,490,490,490,,,,,,490,490',
'490,490,490,490,490,,,490,,,,,,,490,,,490,490,490,490,490,490,490,490',
'490,490,490,490,,490,490,490,490,490,,,,,,,,,,,,,,,,,,,,490,,,490,,',
'490,490,,,490,,,,490,,490,,,490,,,,,,490,,,,,490,490,490,490,,490,490',
'490,490,,,,,490,490,,,,488,488,488,490,488,490,490,490,488,488,,,,488',
',488,488,488,488,488,488,488,,,,,,488,488,488,488,488,488,488,,,488',
',,,,,,488,,,488,488,488,488,488,488,488,488,488,488,488,488,,488,488',
'488,488,488,,,,,,,,,,,,,,,,,,,,488,,,488,,,488,488,,,488,,488,,488,',
'488,,,488,,,,,,488,,,,,488,488,488,488,,488,488,488,488,,,,,488,488',
',,,858,858,858,488,858,488,488,488,858,858,,,,858,,858,858,858,858,858',
'858,858,,,,,,858,858,858,858,858,858,858,,,858,,,,,,,858,,,858,858,858',
'858,858,858,858,858,858,858,858,858,,858,858,858,858,858,,,,,,,,,,,',
',,,,,,,,858,,,858,,,858,858,,,858,,,,858,,858,,,858,,,,,,858,,,,,858',
'858,858,858,,858,858,858,858,,,,,858,858,,,,448,448,448,858,448,858',
'858,858,448,448,,,,448,,448,448,448,448,448,448,448,,,,,,448,448,448',
'448,448,448,448,,,448,,,,,,,448,,,448,448,448,448,448,448,448,448,,448',
'448,448,,448,448,448,448,448,,,,,,,,,,,,,,,,,,,,448,,,448,,,448,448',
',,448,,,,,,448,,,,,,,,,448,,,,,448,448,448,448,,448,448,448,448,,,,',
'448,448,,,,447,447,447,448,447,448,448,448,447,447,,,,447,,447,447,447',
'447,447,447,447,,,,,,447,447,447,447,447,447,447,,,447,,,,,,,447,,,447',
'447,447,447,447,447,447,447,,447,447,447,,447,447,447,447,447,,,,,,',
',,,,,,,,,,,,,447,,,447,,,447,447,,,447,,,,,,447,,,,,,,,,447,,,,,447',
'447,447,447,,447,447,447,447,,,,,447,447,,,,446,446,446,447,446,447',
'447,447,446,446,,,,446,,446,446,446,446,446,446,446,,,,,,446,446,446',
'446,446,446,446,,,446,,,,,,,446,,,446,446,446,446,446,446,446,446,,446',
'446,446,,446,446,446,446,446,,,,,,,,,,,,,,,,,,,,446,,,446,,,446,446',
',,446,,,,,,446,,,,,,,,,446,,,,,446,446,446,446,,446,446,446,446,,,,',
'446,446,,,,444,444,444,446,444,446,446,446,444,444,,,,444,,444,444,444',
'444,444,444,444,,,,,,444,444,444,444,444,444,444,,,444,,,,,,,444,,,444',
'444,444,444,444,444,444,444,444,444,444,444,,444,444,444,444,444,,,',
',,,,,,,,,,,,,,,,444,,,444,,,444,444,,,444,,444,,444,,444,,,444,,,,,',
'444,,,,,444,444,444,444,,444,444,444,444,,,,,444,444,,,,859,859,859',
'444,859,444,444,444,859,859,,,,859,,859,859,859,859,859,859,859,,,,',
',859,859,859,859,859,859,859,,,859,,,,,,,859,,,859,859,859,859,859,859',
'859,859,,859,859,859,,859,859,859,859,859,,,,,,,,,,,,,,,,,,,,859,,,859',
',,859,859,,,859,,,,,,859,,,,,,,,,859,,,,,859,859,859,859,,859,859,859',
'859,,,,,859,859,,,,873,873,873,859,873,859,859,859,873,873,,,,873,,873',
'873,873,873,873,873,873,,,,,,873,873,873,873,873,873,873,,,873,,,,,',
',873,,,873,873,873,873,873,873,873,873,,873,873,873,,873,873,,,873,',
',,,,,,,,,,,,,,,,,,873,,,873,,,873,873,,,873,,,,,,,,,,,,,,,,,,,,873,873',
'873,873,,873,873,873,873,,,,,873,873,,,,342,342,342,873,342,873,873',
'873,342,342,,,,342,,342,342,342,342,342,342,342,,,,,,342,342,342,342',
'342,342,342,,,342,,,,,,,342,,,342,342,342,342,342,342,342,342,,342,342',
'342,,342,342,342,342,342,,,,,,,,,,,,,,,,,,,,342,,,342,,,342,342,,,342',
',,,,,342,,,,,,,,,342,,,,,342,342,342,342,,342,342,342,342,,,,,342,342',
',,,343,343,343,342,343,342,342,342,343,343,,,,343,,343,343,343,343,343',
'343,343,,,,,,343,343,343,343,343,343,343,,,343,,,,,,,343,,,343,343,343',
'343,343,343,343,343,,343,343,343,,343,343,343,343,343,,,,,,,,,,,,,,',
',,,,,343,,,343,,,343,343,,,343,,,,,,343,,,,,,,,,343,,,,,343,343,343',
'343,,343,343,343,343,,,,,343,343,,,,885,885,885,343,885,343,343,343',
'885,885,,,,885,,885,885,885,885,885,885,885,,,,,,885,885,885,885,885',
'885,885,,,885,,,,,,,885,,,885,885,885,885,885,885,885,885,,885,885,885',
',885,885,,,885,,,,,,,,,,,,,,,,,,,,885,,,885,,,885,885,,,885,,,970,,970',
'970,970,970,970,,,,,,,,,970,,885,885,885,885,,885,885,885,885,,,,,885',
'885,,,,,,970,885,,885,885,885,5,5,5,5,5,970,970,,5,5,970,,,5,,5,5,5',
'5,5,5,5,,,,,,5,5,5,5,5,5,5,,,5,,,,,,5,5,5,5,5,5,5,5,5,5,5,5,,5,5,5,',
'5,5,5,5,5,,,,,,,,,,,,,,,,,,,,5,,,5,,,5,5,,,5,,5,,,,5,,,,,,,,,5,,,,,5',
'5,5,5,,5,5,5,5,,,,,5,5,,,,982,982,982,5,982,5,5,5,982,982,,,,982,,982',
'982,982,982,982,982,982,,,,,,982,982,982,982,982,982,982,,,982,,,,,',
',982,,,982,982,982,982,982,982,982,982,982,982,982,982,,982,982,982',
'982,982,,,,,,,,,,,,,,,,,,,,982,,,982,,,982,982,,,982,,982,,982,,982',
',,982,,,,,,982,,,,,982,982,982,982,,982,982,982,982,,,,,982,982,,,,406',
'406,406,982,406,982,982,982,406,406,,,,406,,406,406,406,406,406,406',
'406,,,,,,406,406,406,406,406,406,406,,,406,,,,,,,406,,,406,406,406,406',
'406,406,406,406,,406,406,406,,406,406,406,406,406,,,,,,,,,,,,,,,,,,',
',406,,,406,,,406,406,,,406,,,,,,406,,,,,,,,,406,,,,,406,406,406,406',
',406,406,406,406,,,,,406,406,,,,378,378,378,406,378,406,406,406,378',
'378,,,,378,,378,378,378,378,378,378,378,,,,,,378,378,378,378,378,378',
'378,,,378,,,,,,,378,,,378,378,378,378,378,378,378,378,,378,378,378,',
'378,378,378,378,378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,,378,,,',
',,378,,,,,,,,,378,,,,,378,378,378,378,,378,378,378,378,,,,,378,378,',
',,216,216,216,378,216,378,378,378,216,216,,,,216,,216,216,216,216,216',
'216,216,,,,,,216,216,216,216,216,216,216,,,216,,,,,,,216,,,216,216,216',
'216,216,216,216,216,,216,216,216,,216,216,216,216,216,,,,,,,,,,,,,,',
',,,,,216,,,216,,,216,216,,,216,,,,,,216,,,,,,,,,216,,,,,216,216,216',
'216,,216,216,216,216,,,,,216,216,,,,,,,216,,216,216,216,616,616,616',
'616,616,616,616,616,616,616,616,616,616,616,616,616,616,616,616,616',
'616,616,616,616,,,,616,616,616,616,616,616,616,616,616,616,,,,,,616',
'616,616,616,616,616,616,616,616,,,616,,,,,,,,616,616,,616,616,616,616',
'616,616,616,,,616,616,,,,616,616,616,616,,,,,,,,,,,,,,616,616,,616,616',
'616,616,616,616,616,616,616,616,616,616,,,616,616,,,,,,,,,,,,,,616,8',
'8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,,,,8,8,8,8,8,8,8,8,8,8',
',,,,,8,8,8,8,8,8,8,8,8,8,,8,,,,,,,,8,8,,8,8,8,8,8,8,8,,,8,8,,,,8,8,8',
'8,,,,,,,,,,,,,,8,8,,8,8,8,8,8,8,8,8,8,8,8,8,,,8,8,,,,,,,,,,,,,,8,9,9',
'9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,9,9,9,9,9,9,',
',,,,9,9,9,9,9,9,9,9,9,,,9,,,,,,,,9,9,,9,9,9,9,9,9,9,,,9,9,,,,9,9,9,9',
',,,,,,,,,,,,,9,9,,9,9,9,9,9,9,9,9,9,9,9,9,,,9,9,,,,,,,,,,,,,,9,397,397',
'397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397,397',
'397,397,397,397,397,,,,397,397,397,397,397,397,397,397,397,397,,,,,',
'397,397,397,397,397,397,397,397,397,,,397,,,,,,,,397,397,,397,397,397',
'397,397,397,397,,,397,397,,,,397,397,397,397,,,,,,,,,,,,,,397,397,,397',
'397,397,397,397,397,397,397,397,397,397,397,,,397,397,,,,,,,,,,,,,,397',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
'71,,,,71,71,71,71,71,71,71,71,71,71,,,,,,71,71,71,71,71,71,71,71,71',
'71,71,71,,71,,,,,,71,71,,71,71,71,71,71,71,71,,,71,71,,,,71,71,71,71',
',,,,,71,,,,,,,,71,71,,71,71,71,71,71,71,71,71,71,71,71,71,,,71,737,737',
'737,737,737,737,737,737,737,737,737,737,737,737,737,737,737,737,737',
'737,737,737,737,737,,,,737,737,737,737,737,737,737,737,737,737,,,,,',
'737,737,737,737,737,737,737,737,737,,,737,,,,,,,,737,737,,737,737,737',
'737,737,737,737,,,737,737,,,,737,737,737,737,,,,,,,,,,,,,,737,737,,737',
'737,737,737,737,737,737,737,737,737,737,737,585,585,737,,585,,,,,,,',
'585,585,,585,585,585,585,585,585,585,,,585,585,,,,585,585,585,585,,',
',,,585,,,,,,,,585,585,,585,585,585,585,585,585,585,585,585,585,585,585',
'510,510,585,,510,,,,,,,,510,510,,510,510,510,510,510,510,510,,,510,510',
',,,510,510,510,510,,,,,,510,,,,,,,,510,510,,510,510,510,510,510,510',
'510,510,510,510,510,510,519,519,510,,519,,,,,,,,519,519,,519,519,519',
'519,519,519,519,,,519,519,,,,519,519,519,519,,,,,,519,,,,,,,,519,519',
',519,519,519,519,519,519,519,519,519,519,519,519,520,520,519,,520,,',
',,,,,520,520,,520,520,520,520,520,520,520,,,520,520,,,,520,520,520,520',
',,,,,520,,,,,,,,520,520,,520,520,520,520,520,520,520,520,520,520,520',
'520,509,509,520,,509,,,,,,,,509,509,,509,509,509,509,509,509,509,,,509',
'509,,,,509,509,509,509,,,,,,509,,,,,,,,509,509,,509,509,509,509,509',
'509,509,509,509,509,509,509,937,937,509,,937,,,,,,,,937,937,,937,937',
'937,937,937,937,937,,,937,937,,,,937,937,937,937,,,,,,937,,,,,,,,937',
'937,,937,937,937,937,937,937,937,937,937,937,937,937,211,211,937,,211',
',,,,,,,211,211,,211,211,211,211,211,211,211,,,211,211,,,,211,211,211',
'211,,,,,,211,,,,,,,,211,211,,211,211,211,211,211,211,211,211,211,211',
'211,211,443,443,211,,443,,,,,,,,443,443,,443,443,443,443,443,443,443',
',,443,443,,,,443,443,443,443,,,,,,443,,,,,,,,443,443,,443,443,443,443',
'443,443,443,443,443,443,443,443,442,442,443,,442,,,,,,,,442,442,,442',
'442,442,442,442,442,442,,,442,442,,,,442,442,442,442,,,,,,442,,,,,,',
',442,442,,442,442,442,442,442,442,442,442,442,442,442,442,210,210,442',
',210,,,,,,,,210,210,,210,210,210,210,210,210,210,,,210,210,,,,210,210',
'210,210,,,,,,210,,,,,,,,210,210,,210,210,210,210,210,210,210,210,210',
'210,210,210,983,983,210,,983,,,,,,,,983,983,,983,983,983,983,983,983',
'983,,,983,983,,,,983,983,983,983,,,,,,983,,,,,,,,983,983,,983,983,983',
'983,983,983,983,983,983,983,983,983,261,261,983,,261,,,,,,,,261,261',
',261,261,261,261,261,261,261,,,261,261,,,,261,261,261,261,,,,,,,,,,',
',,,261,261,,261,261,261,261,261,261,261,261,261,261,261,261,586,586',
'261,,586,,,,,,,,586,586,,586,586,586,586,586,586,586,,,586,586,,,,586',
'586,586,586,,,,,,586,,,,,,,,586,586,,586,586,586,586,586,586,586,586',
'586,586,586,586,984,984,586,,984,,,,,,,,984,984,,984,984,984,984,984',
'984,984,,,984,984,,,,984,984,984,984,,,,,,984,,,,,,,,984,984,,984,984',
'984,984,984,984,984,984,984,984,984,984,578,578,984,,578,,,,,,,,578',
'578,,578,578,578,578,578,578,578,,,578,578,,,,578,578,578,578,,,,,,578',
',,,,,,,578,578,,578,578,578,578,578,578,578,578,578,578,578,578,579',
'579,578,,579,,,,,,,,579,579,,579,579,579,579,579,579,579,,,579,579,',
',,579,579,579,579,,,,,,579,,,,,,,,579,579,,579,579,579,579,579,579,579',
'579,579,579,579,579,,968,579,968,968,968,968,968,,864,,864,864,864,864',
'864,968,,,,,,,,864,,866,,866,866,866,866,866,,,,,,968,,,866,,,,,864',
'968,968,968,968,,,,968,864,864,864,864,,,,864,866,,868,,868,868,868',
'868,868,866,866,866,866,,,,866,868,,1012,,1012,1012,1012,1012,1012,',
'536,,536,536,536,536,536,1012,,,,,868,,,536,,,,,,,,868,868,,,,868,1012',
',,,,,,,536,,,1012,1012,,,,1012,536,536,536,536,,,697,536,697,697,697',
'697,697,,892,,892,892,892,892,892,697,,,,,,,,892,,338,,338,338,338,338',
'338,,,,,,697,,,338,,,,,892,,,697,697,,,,697,892,892,892,892,,,,892,338',
'338,693,,693,693,693,693,693,338,338,338,338,,,,338,693,,894,,894,894',
'894,894,894,972,,972,972,972,972,972,,894,,,,,693,,972,,,,,,,693,693',
'693,693,,,,693,894,,,,,,,972,,,,894,894,,,,894,,972,972,,,896,972,896',
'896,896,896,896,898,,898,898,898,898,898,,896,,,,,,735,898,735,735,735',
'735,735,,,,,,,,,735,896,,,,,,,898,,,,896,896,,,,896,,898,898,,735,,898',
',,,,,,735,735,735,735,,,695,735,695,695,695,695,695,,736,,736,736,736',
'736,736,695,,,,,,,,736,,,,,,,,,,,,,,695,,,,,,,,736,695,695,695,695,',
',,695,736,736,736,736,,,,736' ]
        racc_action_check = arr = ::Array.new(25187, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1608,  1053,   nil,   142,   nil, 22394,  1399,   913, 23185, 23313,
   786,   nil,   729,   750,   822,   444,   647,   489,   nil,   -85,
 20012,  3568,   751,   nil,   516,   nil,   174,  1473,   744, 18440,
 17916, 17646,   nil,  3428, 17253, 15010,   nil,   582,   412,   554,
   557,   198, 10949, 10818,  8591,   461,   716,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   854,   nil,   -65,  7126,
  6995,    -8,   nil, 17122,  6070,   nil,   nil,  6201,  6340,  6471,
  6602, 23569,   nil,   nil,   nil,   nil,   nil,   -81,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   276,   nil,   nil,   496,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   368,
   nil,  7396,   nil,   nil,   nil,   nil,  7535,  7666,  7797,  7928,
  8067,  5108,   nil,   338,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   173,   nil,  4828,  8722,  8853,  8984,
 24292, 24109,   nil,   nil,  9377,  9508, 22918,  9770,  9901, 10032,
   nil,   nil,   149,   331,   105,   320,   -54,   297,   385,   nil,
 11080,  4408,   401, 11473, 11604, 11735, 11866, 11997, 12128, 12259,
 12390, 12521, 12652, 12783, 12914, 13045, 13176, 13307, 13438, 13569,
 13700, 13831, 13962, 14093, 14224, 14355, 14486, 14617, 14748,   nil,
   nil, 24414,   nil,   nil,   448, 15149, 15280,   nil,   nil,   nil,
   nil,   nil,   nil,   nil, 15411,   nil,  2588,   nil,   413,   425,
   nil, 15935,   473, 16197,   nil,   nil, 16328, 16459,   nil,   nil,
   314,   nil, 16729,  1333,   498,   529,  3568,   566,   638,   656,
 17777,  3148,   792,   606,   826,   741,   962,   nil,   752,   770,
   193,   nil,   nil,   nil,   822,   200,   779, 19488,   nil,   181,
   852,   895,   nil,   928,   nil, 20143,  1748, 20405,   865,   nil,
   492,   521,   907,   911,   502,   953,   nil,   nil, 24886,   470,
    41,     6, 21993, 22124,   -76,  1055,   941,    22,   -19,   537,
   -35,    37,  1149,   nil,   nil,   958,   998,    44,   nil,  1034,
   nil,  1060,  9639,   nil,   nil,   nil,   180,   389,   473,   608,
   504,   477,   583,   580,   540,   nil,   536,   nil, 22787,   nil,
   423,   417,   317,   313,   356,   -45,   -38,   427,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1039, 23441,   nil,   nil,
   nil,   nil,  1033,   nil,   nil,  1006, 22656,  1000,   nil,   nil,
  1748,   977,   nil,   956,   948,   255,   247,   990,   nil,   nil,
   nil,   386,   634,   965,   nil,   nil,  1122,  1258,   nil,  3148,
   nil,   900,   nil,   nil,  1608,   nil,   nil,   nil,   nil,    19,
   nil,   951, 24231, 24170, 21600,   249, 21469, 21338, 21207,  4268,
  4128,   628,   946,   972,   970,   968,   962,  5668,  5808,  5939,
  3988,  1361,  1209,  4408,  4688,  4968,  5108,  5248,  5388,  5528,
  1039,  1105,  4828,  4548,  2868,   338,  1394,   nil,   nil,   nil,
   nil,   891,   nil,   128,   165,   877,   nil,   nil, 20945,   nil,
 20814,   nil, 20683,   nil,   307,   nil,   nil,   nil, 20544,  1408,
  2028,   863,   859,   nil,   nil,   849, 19881,   813, 19750, 23987,
 23804,  1001,   825,   nil, 19619,   780,   nil, 19357, 19226, 23865,
 23926,  3708, 19095,   902,   898,   548,   812,   nil, 18964,   nil,
   nil, 18833,   nil,   nil,   nil,   nil, 24809,   nil,   740,   732,
   nil,   727,   726,   712,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   700,   751,   nil,   nil, 18702,   nil,   nil,   nil,
   784,   nil,   nil,   nil,   781,   nil,   nil,   774,  2308,   785,
   nil,  3008,    65,    66,   778,   783, 18309, 18178, 24597, 24658,
     7,   nil,   nil,   434,   nil, 23743, 24475, 18047,   nil,   nil,
   -13,  3288,   699,   nil,   157,   nil,   nil,   nil,   830,   nil,
   nil,   nil,   663,   nil,   nil,   311,   nil,   296,   nil,   nil,
   639,   nil,   634,   nil,   nil,   nil, 23057,   nil,   596, 17515,
 17384,   473,   587,  5939, 16991, 16860, 16590,   499,   nil,   nil,
 16066, 15804,   460,   nil, 15673, 15542,   nil,   nil,   193,   167,
   138,     0,   410,  1888,   402,   nil,  1358,   nil,  4268,   458,
   -15,   341,   nil,  4548,  4688,   nil,   301,   nil,   337, 10687,
   nil,   nil, 10556,   nil,   244,   -85, 10425,   133,   nil,   122,
   164,   271,   140,   166,  1035,   134,    86, 10294,  3428,   131,
   148,   172, 10163,   nil,   -29,   nil,   478,    21,   -78,   589,
   nil,   nil,   221, 24925,   nil, 25074,   nil, 24861,   nil,  9246,
   nil,  1129,   nil,   845,   277,   -97,   nil,   nil,   nil,   nil,
   501,   nil,    48,   nil,   nil,   nil,   nil,    76,   nil,   -10,
    29,    39,    -5,    27,    94,  9115,   572,   714,   nil,   163,
  4968,  8329,   nil,   355,  5388, 25022, 25082, 23682,   nil,   nil,
   nil,   nil,   nil,   nil,  5808,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   334,  6733,  3848,  6864,   nil,   368,   nil,  2168,
   nil,  2308,   nil,   nil,  2448,   nil,  2028,   nil,  2728,  7257,
  8198,  8460, 11211,   222, 11342,   485,   511,   nil,   519,   520,
   529,   nil,   554,   536,   533,   526, 14879,   nil,   nil,   671,
   nil,   nil,  3988,   573,   682,   nil,   nil,   nil,   nil,   562,
   168,   nil,   nil,   690,   nil,  3848,   586,   634,   nil,   nil,
   633,   nil,   nil,  2588,  2448,   643,   602,   nil,   nil,   nil,
   605,   616,   nil,   621,   622,   nil,   629,   nil,   nil,   633,
  1185,   639,  1190,   nil,   765,   nil, 18571,   770,  2168,  1888,
   nil, 20274,  2868,    36,   -20,   nil,   786,   316,  2728,   nil,
   790,   671,  -101,   nil,   702,   697,   nil,  3288, 21076, 21731,
  3008,   914,   nil,   nil, 24728,   nil, 24745,   nil, 24784,   nil,
   nil,   755,  1115, 21862,   682,   823,   nil,   779,   nil,   nil,
   nil,  3708,   nil,   nil,     9, 22255,   nil,   nil,   791,   896,
   nil,   nil, 24869,   nil, 24942,   nil, 25001,   nil, 25008,   nil,
   nil,   nil,   nil,   272,  1439,   783,   nil,    52,   nil,   930,
   931,   nil,   486,   nil,   nil,   nil,   936,   nil,   nil,   nil,
   857,   nil,   816,   nil,   nil,   820,   822,   825,   836,   nil,
   843,   nil,   345,   nil,   nil,   nil,   858, 24048,   nil,   nil,
   nil,  4128,    38,    -9,   824,   950,    18,   nil,   nil,   nil,
   876,   877,   878,   886,   887,  1329,   889,   920,  5248,   nil,
   nil,   nil,   nil,   nil,  5528,   nil,  5668,   nil, 24720,   nil,
 22302,   nil, 24949,   nil, 17824,   nil,   nil,   nil,  1100,   956,
   961,  1045, 22525, 24353, 24536,    32, 15057,   nil,   nil,   nil,
   nil,  1251,   973,   623,  1099,  1100,   980,   981,   982,   983,
   nil,   nil,   996,    -1,   -11,   100,    68,  1023,  1027,   nil,
   nil,   nil, 24801,   nil,   nil,   nil,   nil,    26,   nil,  1041,
   nil ]

racc_action_default = [
    -3,  -596,    -1,  -582,    -4,  -596,    -7,  -596,  -596,  -596,
  -596,   -29,  -596,  -596,  -596,  -279,  -596,   -40,   -43,  -584,
  -596,   -48,   -50,   -51,   -52,   -56,  -256,  -256,  -256,  -293,
  -328,  -329,   -68,   -11,   -72,   -80,   -82,  -596,  -486,  -487,
  -596,  -596,  -596,  -596,  -596,  -584,  -237,  -270,  -271,  -272,
  -273,  -274,  -275,  -276,  -277,  -278,  -570,  -281,  -283,  -595,
  -560,  -301,  -389,  -596,  -596,  -306,  -309,  -582,  -596,  -596,
  -596,  -596,  -330,  -331,  -427,  -428,  -429,  -430,  -431,  -452,
  -434,  -435,  -454,  -456,  -439,  -444,  -448,  -450,  -466,  -454,
  -468,  -470,  -471,  -472,  -473,  -568,  -475,  -476,  -569,  -478,
  -479,  -480,  -481,  -482,  -483,  -484,  -485,  -490,  -491,  -596,
    -2,  -583,  -591,  -592,  -593,    -6,  -596,  -596,  -596,  -596,
  -596,    -3,   -17,  -596,  -111,  -112,  -113,  -114,  -115,  -116,
  -117,  -118,  -119,  -123,  -124,  -125,  -126,  -127,  -128,  -129,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,  -139,
  -140,  -141,  -142,  -143,  -144,  -145,  -146,  -147,  -148,  -149,
  -150,  -151,  -152,  -153,  -154,  -155,  -156,  -157,  -158,  -159,
  -160,  -161,  -162,  -163,  -164,  -165,  -166,  -167,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,  -175,  -176,  -177,  -178,  -179,
  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -187,  -188,  -189,
  -190,  -191,  -192,  -193,   -22,  -120,   -11,  -596,  -596,  -246,
  -596,  -596,  -580,  -581,  -596,  -596,  -596,  -596,  -596,  -584,
  -585,   -47,  -596,  -486,  -487,  -596,  -279,  -596,  -596,  -229,
  -596,   -11,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,
  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -396,
  -398,  -596,  -578,  -579,   -57,  -246,  -596,  -300,  -402,  -411,
  -413,   -63,  -408,   -64,  -584,   -65,  -238,  -251,  -260,  -260,
  -255,  -596,  -261,  -596,  -452,  -562,  -596,  -596,   -66,   -67,
  -582,   -12,  -596,   -15,  -596,   -70,   -11,  -584,  -596,   -73,
   -76,   -11,   -88,   -89,  -596,  -596,   -96,  -293,  -296,  -584,
  -596,  -328,  -329,  -332,  -409,  -596,   -78,  -596,   -84,  -290,
  -469,  -596,  -214,  -215,  -230,  -596,   -11,  -596,  -584,  -239,
  -588,  -588,  -596,  -596,  -588,  -596,  -302,  -303,  -518,   -49,
  -596,  -596,  -596,  -596,  -582,  -596,  -583,  -486,  -487,  -596,
  -596,  -279,  -596,  -342,  -343,  -106,  -107,  -596,  -109,  -596,
  -279,  -494,  -596,  -486,  -487,  -321,  -111,  -112,  -153,  -154,
  -155,  -171,  -176,  -183,  -186,  -323,  -596,  -558,  -596,  -432,
  -596,  -596,  -596,  -596,  -596,  -596,  -596,  -596,  1021,    -5,
  -594,   -23,   -24,   -25,   -26,   -27,  -596,  -596,   -19,   -20,
   -21,  -121,  -596,   -30,   -39,  -266,  -596,  -596,  -265,   -31,
  -196,  -584,  -247,  -260,  -260,  -571,  -572,  -256,  -406,  -573,
  -574,  -572,  -571,  -256,  -405,  -407,  -573,  -574,   -37,  -204,
   -38,  -596,   -41,   -42,  -194,  -261,   -44,   -45,   -46,  -584,
  -299,  -596,  -596,  -596,  -246,  -290,  -596,  -596,  -596,  -205,
  -206,  -207,  -208,  -209,  -210,  -211,  -212,  -216,  -217,  -218,
  -219,  -220,  -221,  -222,  -223,  -224,  -225,  -226,  -227,  -228,
  -231,  -232,  -233,  -234,  -584,  -378,  -256,  -571,  -572,   -54,
   -58,  -584,  -257,  -378,  -378,  -584,  -295,  -252,  -596,  -253,
  -596,  -258,  -596,  -262,  -596,  -565,  -567,   -10,  -583,   -14,
    -3,  -584,   -69,  -288,   -85,   -74,  -596,  -584,  -246,  -596,
  -596,   -95,  -596,  -469,  -596,   -81,   -86,  -596,  -596,  -596,
  -596,  -235,  -596,  -419,  -596,  -284,  -596,  -240,  -590,  -589,
  -242,  -590,  -291,  -292,  -561,  -390,  -518,  -393,  -557,  -557,
  -501,  -503,  -503,  -503,  -517,  -519,  -520,  -521,  -522,  -523,
  -524,  -525,  -526,  -596,  -528,  -530,  -532,  -537,  -539,  -540,
  -542,  -547,  -549,  -550,  -552,  -553,  -554,  -596,   -11,  -333,
  -334,   -11,  -596,  -596,  -596,  -596,  -596,  -246,  -596,  -596,
  -290,  -314,  -106,  -107,  -108,  -596,  -596,  -246,  -317,  -492,
  -596,   -11,  -496,  -325,  -584,  -433,  -453,  -458,  -596,  -460,
  -436,  -455,  -596,  -457,  -438,  -596,  -441,  -596,  -443,  -446,
  -596,  -447,  -596,  -467,    -8,   -18,  -596,   -28,  -269,  -596,
  -596,  -410,  -596,  -248,  -250,  -596,  -596,   -59,  -245,  -403,
  -596,  -596,   -61,  -404,  -596,  -596,  -298,  -586,  -571,  -572,
  -571,  -572,  -584,  -194,  -596,  -379,  -584,  -381,   -11,   -53,
  -399,  -378,  -243,   -11,   -11,  -294,  -260,  -259,  -263,  -596,
  -563,  -564,  -596,   -13,  -596,   -71,  -596,   -77,   -83,  -584,
  -571,  -572,  -244,  -575,   -94,  -596,   -79,  -596,  -203,  -213,
  -584,  -595,  -595,  -282,  -584,  -287,  -588,  -596,  -584,  -596,
  -499,  -500,  -596,  -596,  -510,  -596,  -513,  -596,  -515,  -596,
  -344,  -596,  -346,  -348,  -355,  -584,  -531,  -541,  -551,  -555,
  -595,  -335,  -595,  -307,  -336,  -337,  -310,  -596,  -313,  -596,
  -584,  -571,  -572,  -575,  -289,  -596,  -106,  -107,  -110,  -584,
   -11,  -596,  -319,  -596,   -11,  -518,  -518,  -596,  -559,  -459,
  -462,  -463,  -464,  -465,   -11,  -437,  -440,  -442,  -445,  -449,
  -451,  -122,  -267,  -596,  -197,  -596,  -587,  -260,   -33,  -199,
   -34,  -200,   -60,   -35,  -202,   -36,  -201,   -62,  -195,  -596,
  -596,  -596,  -596,  -410,  -596,  -557,  -557,  -360,  -362,  -362,
  -362,  -377,  -596,  -584,  -383,  -526,  -534,  -535,  -545,  -596,
  -401,  -400,   -11,  -596,  -596,  -254,  -264,  -566,   -16,   -75,
  -410,   -87,  -297,  -595,  -340,   -11,  -420,  -595,  -421,  -422,
  -596,  -241,  -391,   -11,   -11,  -596,  -557,  -538,  -556,  -502,
  -503,  -503,  -529,  -503,  -503,  -548,  -503,  -526,  -543,  -584,
  -596,  -353,  -596,  -527,  -596,  -338,  -596,  -596,   -11,   -11,
  -312,  -596,   -11,  -410,  -596,  -410,  -596,  -596,   -11,  -322,
  -596,  -584,  -596,  -326,  -596,  -268,   -32,  -198,  -249,  -596,
  -236,  -596,  -358,  -359,  -368,  -370,  -596,  -373,  -596,  -375,
  -380,  -596,  -596,  -596,  -533,  -596,  -397,  -596,  -412,  -414,
    -9,   -11,  -426,  -341,  -596,  -596,  -424,  -285,  -596,  -596,
  -392,  -498,  -596,  -506,  -596,  -508,  -596,  -511,  -596,  -514,
  -516,  -345,  -347,  -351,  -596,  -356,  -304,  -596,  -305,  -596,
  -596,  -263,  -595,  -315,  -318,  -493,  -596,  -324,  -495,  -497,
  -496,  -461,  -557,  -536,  -361,  -362,  -362,  -362,  -362,  -546,
  -362,  -382,  -584,  -385,  -387,  -388,  -544,  -596,  -290,   -55,
  -425,   -11,  -486,  -487,  -596,  -596,  -279,  -423,  -394,  -395,
  -503,  -503,  -503,  -503,  -349,  -596,  -354,  -596,   -11,  -308,
  -311,  -415,  -416,  -417,   -11,  -320,   -11,  -357,  -596,  -365,
  -596,  -367,  -596,  -371,  -596,  -374,  -376,  -384,  -596,  -289,
  -575,  -419,  -246,  -596,  -596,  -290,  -596,  -504,  -507,  -509,
  -512,  -596,  -352,  -595,  -596,  -596,  -362,  -362,  -362,  -362,
  -386,  -418,  -584,  -571,  -572,  -575,  -289,  -503,  -350,  -339,
  -316,  -327,  -596,  -363,  -366,  -369,  -372,  -410,  -505,  -362,
  -364 ]

clist = [
'218,329,375,411,14,260,524,221,210,14,277,277,277,336,114,2,681,433',
'262,278,278,278,489,480,222,575,325,261,127,127,268,272,584,222,222',
'222,537,14,304,304,340,341,111,834,344,313,313,690,691,330,734,132,132',
'6,417,423,122,205,6,481,515,552,408,130,130,320,825,222,222,544,430',
'222,349,359,359,660,713,716,114,313,313,313,299,380,264,271,273,110',
'339,339,782,127,339,391,392,393,394,705,779,316,933,657,621,657,803',
'476,527,530,822,295,534,935,297,902,379,14,660,279,279,279,222,222,222',
'222,14,14,115,929,605,607,568,571,815,381,591,837,396,592,780,737,387',
'339,339,339,339,920,648,331,334,361,365,345,730,905,653,654,204,489',
'964,601,603,606,606,725,6,601,781,275,288,289,839,663,343,395,6,838',
'783,342,328,684,327,932,326,376,535,821,812,823,338,687,277,880,354',
'475,403,409,483,407,484,961,807,428,432,884,848,407,1000,588,352,660',
'14,222,222,222,418,382,442,935,222,222,222,222,222,222,383,956,404,871',
'397,929,384,427,389,385,688,14,657,657,642,386,902,436,437,438,439,829',
'277,277,739,667,744,731,337,333,717,277,278,676,820,552,728,377,651',
'825,278,650,817,544,923,222,222,733,332,616,1,,992,26,222,822,,,26,',
'862,863,417,423,494,,512,,,,,,14,26,509,,14,114,669,,304,14,26,26,26',
'526,26,313,1008,822,268,519,925,,272,572,573,304,792,,,891,1009,,313',
'498,14,222,,773,,962,,,,513,26,26,,578,26,499,222,222,913,,,,525,672',
'279,114,926,,927,,800,,279,672,505,516,222,339,339,785,262,720,295,',
'497,501,,295,966,593,507,729,222,747,950,747,762,590,26,822,,767,622',
'26,26,26,26,26,26,795,,,,594,482,,,,,799,846,843,485,,850,,552,127,552',
'700,845,628,672,,,277,,633,574,,672,967,,851,852,,433,,,,132,,,660,',
'615,418,,222,,,,130,,,644,,,552,552,996,,811,427,,,544,544,,,,657,,',
'1001,627,,,,,628,632,,26,26,26,26,,,277,,26,26,26,26,26,26,,,,795,,14',
',14,,,,26,842,304,,222,418,,664,,313,304,298,,,,418,,313,222,,916,,427',
',,,649,,,808,,,427,,26,26,,,,680,,,,26,,6,516,,,,277,,,,516,,,,719,700',
'277,26,831,776,14,26,39,14,656,,26,39,,222,418,714,714,,,785,,785,418',
'222,963,,,14,,,,427,,732,791,26,26,427,,39,303,303,,,758,760,816,552',
'686,763,765,26,26,432,,622,809,,,784,,222,222,,790,,222,222,127,,222',
'26,,,348,364,364,364,995,786,,,622,,14,,,26,,14,14,132,,440,,,751,810',
',,853,784,304,130,407,,941,,628,313,,633,,304,,,,39,,,313,,,785,402',
'1017,39,39,700,958,700,,777,622,844,,13,,,,847,13,622,757,,,516,,486',
'298,,,,26,,,,801,,,,222,,,,,14,222,,13,14,502,,,856,818,,882,818,,14',
'886,339,,,,,,339,127,,222,,,,,784,,694,696,698,954,700,,,,,26,1002,26',
',,39,,298,,,26,922,298,,776,874,776,,776,,,14,313,,26,,,,,,39,,,,14',
',,,907,,13,,14,14,,,700,,700,13,13,,672,,,,,,,,,,,,,222,,14,14,,26,14',
',26,,,,14,,26,714,,700,915,,,339,786,919,26,786,39,786,26,786,39,16',
',,303,39,16,936,,,,636,,,313,14,,,,944,,303,,776,,776,313,776,,776,39',
',26,26,16,,,26,26,,13,26,,977,,818,,,777,,777,,777,652,,26,,655,,,26',
'26,,,,13,,776,983,353,,,,665,778,14,,,,668,,,,,,,,427,,,,,14,277,,,',
',14,786,14,786,,786,,786,,,,,,,16,622,,,222,418,,,,16,16,824,,826,13',
',,,13,,26,,427,13,,26,26,,,26,,786,,,,,,,,26,777,,777,,777,,777,,13',
',26,,,,738,,,,,,,,,893,895,,897,899,,900,,,710,,,712,,,,,,15,,,777,',
'15,26,,,39,,39,,,16,,,303,,26,,,,431,,303,,26,26,,,,,15,306,306,,,,16',
',,,,,,,,,,26,,26,26,,,26,,,802,,,26,,,,,,351,360,360,789,,,,,793,794',
',39,,,39,,833,,,,,,,,,,,26,,,,,16,928,39,930,16,,,,,16,,15,987,988,989',
'990,,,,,15,15,865,867,869,,,951,,952,,953,,,16,,,,,13,,13,,,,,,,,,,',
',,,26,,,,39,,,,,39,39,,854,,1018,,,26,,,,,303,26,,26,,,,,,,,303,,,,',
',,,26,,,,,,,997,,998,15,999,901,13,,,13,,,877,,38,,,,1007,38,,,,,,883',
',918,15,13,,,,888,889,,,,39,,,,39,,1019,,,38,302,302,,,39,,,,,,909,910',
',335,912,,,,969,971,973,975,,976,,,,,,,,,,,347,363,363,363,13,,,15,',
'13,13,15,364,,,306,15,,39,940,,16,,16,,,,,,,,39,306,,,,,,,39,39,15,',
'38,,,,,,,,,38,38,,1013,1014,1015,1016,,,,,,39,39,,,39,,,,,,39,,,,1020',
'981,,,,,,,13,,,,13,16,,,16,,993,,,364,13,,994,,,,,39,,,,943,,,16,,,',
',,,,,,,,405,,,,,,,,435,,,,38,,,,,,,,,,13,,,,,,,,,431,,,,13,,38,,,,39',
',13,13,16,,,,,16,16,,,,,,,39,,,,,,39,,39,,13,13,,,13,,491,,493,,13,495',
'496,,,,,,,15,,15,,,,,,306,,,38,,,,38,306,,,302,38,,,,13,,,,,,,,,,,,302',
',,,16,,,,16,38,,,,,,,,,16,,,,,,,,,,,,,,,,15,,,15,,,,,,,,,,,13,,,,,,',
',,15,,,,,,,743,13,16,,,,,13,,13,,,618,,,16,,,,,,,,16,16,,,,,,,,,,,,',
',,,,,,,,,,,16,16,15,,16,,,15,15,,16,,,,,,,,,,306,,,,,,,,,,,306,,,,,',
',,,,,,16,,,658,947,335,,661,,,,,,,,,,,,,,,,,,,38,,38,,,,,,302,,,,,,',
'15,302,658,,15,335,,,,,,,,,15,,,,,16,,,,,,,,,,,706,,,,,,16,,,,,,16,',
'16,,,,,,435,,,,,38,360,,38,,,,15,,,,,,,,,,,,,15,,,38,,,,,15,15,,,,,',
',,,752,,,,658,335,,,,,,,,,,15,15,,,15,,,,,,15,,,,,,,,,,,,,,,796,,38',
'797,,,,38,38,,360,,,,,,,,15,,302,,946,806,,,,229,,,,302,,,,,276,276',
'276,,828,,,,,,,,,322,323,324,,,,,,,,,,,,,,,276,276,,,,,,,,,,,15,,,,',
',38,,,,38,,,,,,855,15,,,38,,,15,,15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,363,,,,,,38,,,,,,,,,,,,,38,,,,,,,,38,38,,,,,,,,,,,,,,911,,,,,,,',
',,38,38,,,38,,,335,,,38,,,,,,,,,,,,276,410,276,,,,,429,434,,,,,363,',
',,,,,,38,,229,,942,449,450,451,452,453,454,455,456,457,458,459,460,461',
'462,463,464,465,466,467,468,469,470,471,472,473,474,,,,,,,276,276,,',
',,,,,276,,,,,,,276,,276,,,276,276,38,,,,,,,,,,,,,,,,,38,,,,,,38,,38',
',,,,,,,,,,,521,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'276,,429,643,410,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,276,,276',
',,,,,,,,,,,,,,,276,,,,,,,,,678,679,,,,,,,,,,276,,,276,,,,,,,,,,,,,,',
',,,,,,,,,,276,,,,,,,,,,,,,,,,,,,,276,276,,,,,,,,,,276,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,276,754,,,276,276,759,761,,,,764,766,,,643,768,,,,',
',,,,,,,,,,,,,,,,,,,276,,,276,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,',
'276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,857,,',
',,,,,,,,,,,759,761,766,764,,860,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,,,,,,,,,,,,,,,,,276,857,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276' ]
        racc_goto_table = arr = ::Array.new(2916, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'32,68,57,23,22,139,8,20,25,22,34,34,34,87,96,2,10,18,25,69,69,69,74',
'40,22,93,32,37,58,58,72,72,55,22,22,22,138,22,22,22,17,17,6,91,17,65',
'65,122,122,69,97,62,62,7,38,38,15,15,7,23,52,167,28,61,61,64,173,22',
'22,162,28,22,22,22,22,177,92,92,96,65,65,65,50,150,39,39,39,4,30,30',
'130,58,30,17,17,17,17,117,127,51,132,75,24,75,11,38,70,70,168,46,70',
'133,47,115,149,22,177,71,71,71,22,22,22,22,22,22,5,174,154,154,90,90',
'130,151,111,11,2,112,128,113,151,30,30,30,30,114,41,71,71,56,56,4,109',
'118,41,41,16,74,108,155,155,155,155,107,7,155,119,45,45,45,106,14,105',
'7,7,104,125,103,102,101,100,131,99,98,134,128,135,128,136,137,34,12',
'19,140,20,20,142,69,143,144,145,20,20,146,110,69,132,95,94,177,22,22',
'22,22,72,152,25,133,22,22,22,22,22,22,153,118,29,130,31,174,156,58,5',
'157,138,22,75,75,23,158,115,30,30,30,30,117,34,34,159,52,160,161,89',
'86,93,34,69,52,166,167,55,85,43,173,69,73,170,162,171,22,22,8,67,63',
'1,,118,42,22,168,,,42,,122,122,38,38,150,,32,,,,,,22,42,25,,22,96,23',
',22,22,42,42,42,32,42,65,118,168,72,25,127,,72,17,17,22,41,,,122,91',
',65,6,22,22,,24,,11,,,,64,42,42,,25,42,7,22,22,92,,,,30,38,71,96,128',
',128,,24,,71,38,51,50,22,30,30,167,25,23,46,,4,47,,46,97,37,47,23,22',
'155,128,155,40,30,42,168,,40,32,42,42,42,42,42,42,74,,,,30,45,,,,,52',
'8,24,45,,8,,167,58,167,116,24,72,38,,,34,,72,4,,38,122,,138,138,,18',
',,,62,,,177,,15,72,,22,,,,61,,,32,,,167,167,128,,70,58,,,162,162,,,',
'75,,,10,39,,,,,72,39,,42,42,42,42,,,34,,42,42,42,42,42,42,,,,74,,22',
',22,,,,42,90,22,,22,72,,2,,65,22,9,,,,72,,65,22,,8,,58,,,,39,,,28,,',
'58,,42,42,,,,30,,,,42,,7,50,,,,34,,,,50,,,,69,116,34,42,116,121,22,42',
'54,22,71,,42,54,,22,72,96,96,,,167,,167,72,22,93,,,22,,,,58,,96,87,42',
'42,58,,54,54,54,,,20,20,121,167,71,20,20,42,42,20,,32,68,,,32,,22,22',
',139,,22,22,58,,22,42,,,54,54,54,54,8,169,,,32,,22,,,42,,22,22,62,,48',
',,15,32,,,57,32,22,61,69,,90,,72,65,,72,,22,,,,54,,,65,,,167,9,24,54',
'54,116,90,116,,123,32,17,,21,,,,17,21,32,71,,,50,,48,9,,,,42,,,,50,',
',,22,,,,,22,22,,21,22,48,,,20,123,,68,123,,22,68,30,,,,,,30,58,,22,',
',,,32,,165,165,165,116,116,,,,,42,23,42,,,54,,9,,,42,121,9,,121,22,121',
',121,,,22,65,,42,,,,,,54,,,,22,,,,17,,21,,22,22,,,116,,116,21,21,,38',
',,,,,,,,,,,,22,,22,22,,42,22,,42,,,,22,,42,96,,116,96,,,30,169,96,42',
'169,54,169,42,169,54,27,,,54,54,27,22,,,,48,,,65,22,,,,22,,54,,121,',
'121,65,121,,121,54,,42,42,27,,,42,42,,21,42,,32,,123,,,123,,123,,123',
'48,,42,,48,,,42,42,,,,21,,121,25,27,,,,48,126,22,,,,48,,,,,,,,58,,,',
',22,34,,,,,22,169,22,169,,169,,169,,,,,,,27,32,,,22,72,,,,27,27,126',
',126,21,,,,21,,42,,58,21,,42,42,,,42,,169,,,,,,,,42,123,,123,,123,,123',
',21,,42,,,,48,,,,,,,,,165,165,,165,165,,165,,,9,,,9,,,,,,26,,,123,,26',
'42,,,54,,54,,,27,,,54,,42,,,,27,,54,,42,42,,,,,26,26,26,,,,27,,,,,,',
',,,,42,,42,42,,,42,,,48,,,42,,,,,,26,26,26,9,,,,,9,9,,54,,,54,,48,,',
',,,,,,,,42,,,,,27,126,54,126,27,,,,,27,,26,165,165,165,165,,,,,26,26',
'124,124,124,,,126,,126,,126,,,27,,,,,21,,21,,,,,,,,,,,,,,42,,,,54,,',
',,54,54,,9,,165,,,42,,,,,54,42,,42,,,,,,,,54,,,,,,,,42,,,,,,,126,,126',
'26,126,48,21,,,21,,,9,,53,,,,126,53,,,,,,9,,48,26,21,,,,9,9,,,,54,,',
',54,,126,,,53,53,53,,,54,,,,,,9,9,,66,9,,,,124,124,124,124,,124,,,,',
',,,,,,53,53,53,53,21,,,26,,21,21,26,54,,,26,26,,54,9,,27,,27,,,,,,,',
'54,26,,,,,,,54,54,26,,53,,,,,,,,,53,53,,124,124,124,124,,,,,,54,54,',
',54,,,,,,54,,,,124,9,,,,,,,21,,,,21,27,,,27,,9,,,54,21,,9,,,,,54,,,',
'54,,,27,,,,,,,,,,,,66,,,,,,,,66,,,,53,,,,,,,,,,21,,,,,,,,,27,,,,21,',
'53,,,,54,,21,21,27,,,,,27,27,,,,,,,54,,,,,,54,,54,,21,21,,,21,,66,,66',
',21,66,66,,,,,,,26,,26,,,,,,26,,,53,,,,53,26,,,53,53,,,,21,,,,,,,,,',
',,53,,,,27,,,,27,53,,,,,,,,,27,,,,,,,,,,,,,,,,26,,,26,,,,,,,,,,,21,',
',,,,,,,26,,,,,,,26,21,27,,,,,21,,21,,,66,,,27,,,,,,,,27,27,,,,,,,,,',
',,,,,,,,,,,,,,27,27,26,,27,,,26,26,,27,,,,,,,,,,26,,,,,,,,,,,26,,,,',
',,,,,,,27,,,66,27,66,,66,,,,,,,,,,,,,,,,,,,53,,53,,,,,,53,,,,,,,26,53',
'66,,26,66,,,,,,,,,26,,,,,27,,,,,,,,,,,66,,,,,,27,,,,,,27,,27,,,,,,66',
',,,,53,26,,53,,,,26,,,,,,,,,,,,,26,,,53,,,,,26,26,,,,,,,,,66,,,,66,66',
',,,,,,,,,26,26,,,26,,,,,,26,,,,,,,,,,,,,,,66,,53,66,,,,53,53,,26,,,',
',,,,26,,53,,26,66,,,,33,,,,53,,,,,33,33,33,,66,,,,,,,,,33,33,33,,,,',
',,,,,,,,,,33,33,,,,,,,,,,,26,,,,,,53,,,,53,,,,,,66,26,,,53,,,26,,26',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,,,,53,,,,,,,,,,,,,53,,,,,,',
',53,53,,,,,,,,,,,,,,66,,,,,,,,,,53,53,,,53,,,66,,,53,,,,,,,,,,,,33,33',
'33,,,,,33,33,,,,,53,,,,,,,,53,,33,,53,33,33,33,33,33,33,33,33,33,33',
'33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,,,,,,,33,33,,,,,,,,33',
',,,,,,33,,33,,,33,33,53,,,,,,,,,,,,,,,,,53,,,,,,53,,53,,,,,,,,,,,,33',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,33,33,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,33,,33,,,,,,,,,,,,,,,,33,,,',
',,,,,33,33,,,,,,,,,,33,,,33,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,',
',,,,,,33,33,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,33,,,33,33',
'33,33,,,,33,33,,,33,33,,,,,,,,,,,,,,,,,,,,,,,,33,,,33,,,,,,,,,,,,,,',
',,,,,33,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,33,,33,,,,,,,,,,,,,,33,33,33,33,,33,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,,,,,,,,,,,,,,33',
'33,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,33' ]
        racc_goto_check = arr = ::Array.new(2916, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   274,    15,   nil,    84,   121,    39,    53,  -320,   486,
  -507,  -577,  -612,   nil,  -327,    48,   147,   -23,  -198,   124,
   -13,   704,     4,  -206,  -309,    -6,  1063,   871,  -145,    19,
    25,   106,   -19,  1933,   -19,   nil,   nil,     3,  -156,    58,
  -241,  -329,   277,  -217,   nil,   138,    76,    79,   442,   nil,
    48,    64,  -257,  1280,   574,  -325,    80,   -69,    20,   nil,
   nil,    55,    43,  -128,    24,    11,  1267,   213,   -58,   -10,
  -224,    88,     4,  -211,  -257,  -387,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   190,   193,   -48,   nil,   190,
  -210,  -667,  -496,  -320,   140,  -154,    11,  -542,   112,   125,
   122,  -346,   120,   112,  -538,   106,  -546,  -418,  -755,  -436,
  -528,  -231,  -238,  -454,  -708,  -717,  -134,  -456,  -679,  -480,
   nil,   -75,  -491,    54,   407,  -470,   298,  -548,  -508,   nil,
  -556,  -691,  -772,  -761,  -154,  -501,   126,  -346,  -302,   -17,
   -66,   nil,   -73,   -72,  -713,  -482,  -604,   nil,   nil,    37,
     4,    51,   132,   140,  -255,  -222,   145,   147,   152,  -350,
  -349,  -338,  -269,   nil,   nil,   225,  -435,  -277,  -585,     1,
  -423,  -593,   nil,  -629,  -739,   nil,   nil,  -415 ]

racc_goto_default = [
   nil,   nil,   nil,     3,   nil,     4,   346,   293,   nil,   523,
   nil,   835,   nil,   290,   291,   nil,   nil,   nil,    11,    12,
    18,   228,   321,   nil,   nil,   586,   226,   227,   nil,   nil,
    17,   nil,   441,    21,    22,    23,    24,   nil,   675,   nil,
   nil,   nil,   310,   nil,    25,   412,    32,   nil,   nil,    34,
    37,    36,   nil,   223,   224,   358,   nil,   129,   420,   128,
   131,    75,    76,   nil,    90,    46,   282,   nil,   804,   413,
   nil,   414,   425,   629,   487,   280,   266,    47,    48,    49,
    50,    51,    52,    53,    54,    55,   nil,   267,    61,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   569,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   702,   551,   nil,   703,   924,
   775,   539,   nil,   540,   nil,   nil,   541,   nil,   543,   645,
   nil,   nil,   nil,   549,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   424,   nil,   nil,   nil,   nil,   nil,    74,    77,    78,
   nil,   nil,   nil,   nil,   nil,   596,   nil,   nil,   nil,   nil,
   nil,   nil,   819,   736,   538,   nil,   542,   827,   554,   556,
   557,   787,   560,   561,   788,   564,   567,   285 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 146, :_reduce_none,
  2, 147, :_reduce_2,
  0, 148, :_reduce_3,
  1, 148, :_reduce_4,
  3, 148, :_reduce_5,
  2, 148, :_reduce_6,
  1, 150, :_reduce_none,
  4, 150, :_reduce_8,
  4, 153, :_reduce_9,
  2, 154, :_reduce_10,
  0, 158, :_reduce_11,
  1, 158, :_reduce_12,
  3, 158, :_reduce_13,
  2, 158, :_reduce_14,
  1, 159, :_reduce_none,
  4, 159, :_reduce_16,
  0, 176, :_reduce_17,
  4, 152, :_reduce_18,
  3, 152, :_reduce_19,
  3, 152, :_reduce_20,
  3, 152, :_reduce_21,
  2, 152, :_reduce_22,
  3, 152, :_reduce_23,
  3, 152, :_reduce_24,
  3, 152, :_reduce_25,
  3, 152, :_reduce_26,
  3, 152, :_reduce_27,
  4, 152, :_reduce_28,
  1, 152, :_reduce_none,
  3, 152, :_reduce_30,
  3, 152, :_reduce_31,
  6, 152, :_reduce_32,
  5, 152, :_reduce_33,
  5, 152, :_reduce_34,
  5, 152, :_reduce_35,
  5, 152, :_reduce_36,
  3, 152, :_reduce_37,
  3, 152, :_reduce_38,
  3, 152, :_reduce_39,
  1, 152, :_reduce_none,
  3, 163, :_reduce_41,
  3, 163, :_reduce_42,
  1, 175, :_reduce_none,
  3, 175, :_reduce_44,
  3, 175, :_reduce_45,
  3, 175, :_reduce_46,
  2, 175, :_reduce_47,
  1, 175, :_reduce_none,
  1, 162, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 180, :_reduce_none,
  4, 180, :_reduce_53,
  0, 188, :_reduce_54,
  5, 185, :_reduce_55,
  1, 187, :_reduce_none,
  2, 179, :_reduce_57,
  3, 179, :_reduce_58,
  4, 179, :_reduce_59,
  5, 179, :_reduce_60,
  4, 179, :_reduce_61,
  5, 179, :_reduce_62,
  2, 179, :_reduce_63,
  2, 179, :_reduce_64,
  2, 179, :_reduce_65,
  2, 179, :_reduce_66,
  2, 179, :_reduce_67,
  1, 164, :_reduce_68,
  3, 164, :_reduce_69,
  1, 192, :_reduce_70,
  3, 192, :_reduce_71,
  1, 191, :_reduce_none,
  2, 191, :_reduce_73,
  3, 191, :_reduce_74,
  5, 191, :_reduce_75,
  2, 191, :_reduce_76,
  4, 191, :_reduce_77,
  2, 191, :_reduce_78,
  4, 191, :_reduce_79,
  1, 191, :_reduce_80,
  3, 191, :_reduce_81,
  1, 195, :_reduce_none,
  3, 195, :_reduce_83,
  2, 194, :_reduce_84,
  3, 194, :_reduce_85,
  1, 197, :_reduce_86,
  3, 197, :_reduce_87,
  1, 196, :_reduce_88,
  1, 196, :_reduce_89,
  4, 196, :_reduce_90,
  3, 196, :_reduce_91,
  3, 196, :_reduce_92,
  3, 196, :_reduce_93,
  3, 196, :_reduce_94,
  2, 196, :_reduce_95,
  1, 196, :_reduce_96,
  1, 172, :_reduce_97,
  1, 172, :_reduce_98,
  4, 172, :_reduce_99,
  3, 172, :_reduce_100,
  3, 172, :_reduce_101,
  3, 172, :_reduce_102,
  3, 172, :_reduce_103,
  2, 172, :_reduce_104,
  1, 172, :_reduce_105,
  1, 200, :_reduce_106,
  1, 200, :_reduce_none,
  2, 201, :_reduce_108,
  1, 201, :_reduce_109,
  3, 201, :_reduce_110,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 205, :_reduce_116,
  1, 205, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_120,
  0, 208, :_reduce_121,
  4, 161, :_reduce_122,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 203, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  1, 204, :_reduce_none,
  3, 178, :_reduce_194,
  5, 178, :_reduce_195,
  3, 178, :_reduce_196,
  5, 178, :_reduce_197,
  6, 178, :_reduce_198,
  5, 178, :_reduce_199,
  5, 178, :_reduce_200,
  5, 178, :_reduce_201,
  5, 178, :_reduce_202,
  4, 178, :_reduce_203,
  3, 178, :_reduce_204,
  3, 178, :_reduce_205,
  3, 178, :_reduce_206,
  3, 178, :_reduce_207,
  3, 178, :_reduce_208,
  3, 178, :_reduce_209,
  3, 178, :_reduce_210,
  3, 178, :_reduce_211,
  3, 178, :_reduce_212,
  4, 178, :_reduce_213,
  2, 178, :_reduce_214,
  2, 178, :_reduce_215,
  3, 178, :_reduce_216,
  3, 178, :_reduce_217,
  3, 178, :_reduce_218,
  3, 178, :_reduce_219,
  3, 178, :_reduce_220,
  3, 178, :_reduce_221,
  3, 178, :_reduce_222,
  3, 178, :_reduce_223,
  3, 178, :_reduce_224,
  3, 178, :_reduce_225,
  3, 178, :_reduce_226,
  3, 178, :_reduce_227,
  3, 178, :_reduce_228,
  2, 178, :_reduce_229,
  2, 178, :_reduce_230,
  3, 178, :_reduce_231,
  3, 178, :_reduce_232,
  3, 178, :_reduce_233,
  3, 178, :_reduce_234,
  3, 178, :_reduce_235,
  6, 178, :_reduce_236,
  1, 178, :_reduce_none,
  1, 211, :_reduce_none,
  1, 212, :_reduce_none,
  2, 212, :_reduce_none,
  4, 212, :_reduce_241,
  2, 212, :_reduce_242,
  3, 217, :_reduce_243,
  0, 218, :_reduce_244,
  1, 218, :_reduce_none,
  0, 168, :_reduce_246,
  1, 168, :_reduce_none,
  2, 168, :_reduce_none,
  4, 168, :_reduce_249,
  2, 168, :_reduce_250,
  1, 190, :_reduce_251,
  2, 190, :_reduce_252,
  2, 190, :_reduce_253,
  4, 190, :_reduce_254,
  1, 190, :_reduce_255,
  0, 221, :_reduce_256,
  2, 184, :_reduce_257,
  2, 220, :_reduce_258,
  2, 219, :_reduce_259,
  0, 219, :_reduce_260,
  1, 214, :_reduce_261,
  2, 214, :_reduce_262,
  3, 214, :_reduce_263,
  4, 214, :_reduce_264,
  1, 174, :_reduce_265,
  1, 174, :_reduce_none,
  3, 173, :_reduce_267,
  4, 173, :_reduce_268,
  2, 173, :_reduce_269,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_280,
  0, 244, :_reduce_281,
  4, 210, :_reduce_282,
  0, 245, :_reduce_283,
  0, 246, :_reduce_284,
  6, 210, :_reduce_285,
  0, 247, :_reduce_286,
  4, 210, :_reduce_287,
  3, 210, :_reduce_288,
  3, 210, :_reduce_289,
  2, 210, :_reduce_290,
  3, 210, :_reduce_291,
  3, 210, :_reduce_292,
  1, 210, :_reduce_293,
  4, 210, :_reduce_294,
  3, 210, :_reduce_295,
  1, 210, :_reduce_296,
  5, 210, :_reduce_297,
  4, 210, :_reduce_298,
  3, 210, :_reduce_299,
  2, 210, :_reduce_300,
  1, 210, :_reduce_none,
  2, 210, :_reduce_302,
  2, 210, :_reduce_303,
  6, 210, :_reduce_304,
  6, 210, :_reduce_305,
  0, 248, :_reduce_306,
  0, 249, :_reduce_307,
  7, 210, :_reduce_308,
  0, 250, :_reduce_309,
  0, 251, :_reduce_310,
  7, 210, :_reduce_311,
  5, 210, :_reduce_312,
  4, 210, :_reduce_313,
  0, 252, :_reduce_314,
  0, 253, :_reduce_315,
  9, 210, :_reduce_316,
  0, 254, :_reduce_317,
  6, 210, :_reduce_318,
  0, 255, :_reduce_319,
  7, 210, :_reduce_320,
  0, 256, :_reduce_321,
  5, 210, :_reduce_322,
  0, 257, :_reduce_323,
  6, 210, :_reduce_324,
  0, 258, :_reduce_325,
  0, 259, :_reduce_326,
  9, 210, :_reduce_327,
  1, 210, :_reduce_328,
  1, 210, :_reduce_329,
  1, 210, :_reduce_330,
  1, 210, :_reduce_331,
  1, 167, :_reduce_none,
  1, 235, :_reduce_none,
  1, 235, :_reduce_none,
  2, 235, :_reduce_335,
  1, 237, :_reduce_none,
  1, 237, :_reduce_none,
  1, 236, :_reduce_none,
  5, 236, :_reduce_339,
  1, 156, :_reduce_none,
  2, 156, :_reduce_341,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 260, :_reduce_344,
  3, 260, :_reduce_345,
  1, 263, :_reduce_346,
  3, 263, :_reduce_347,
  1, 262, :_reduce_none,
  4, 262, :_reduce_349,
  6, 262, :_reduce_350,
  3, 262, :_reduce_351,
  5, 262, :_reduce_352,
  2, 262, :_reduce_353,
  4, 262, :_reduce_354,
  1, 262, :_reduce_355,
  3, 262, :_reduce_356,
  4, 264, :_reduce_357,
  2, 264, :_reduce_358,
  2, 264, :_reduce_359,
  1, 264, :_reduce_360,
  2, 269, :_reduce_361,
  0, 269, :_reduce_362,
  6, 270, :_reduce_363,
  8, 270, :_reduce_364,
  4, 270, :_reduce_365,
  6, 270, :_reduce_366,
  4, 270, :_reduce_367,
  2, 270, :_reduce_none,
  6, 270, :_reduce_369,
  2, 270, :_reduce_370,
  4, 270, :_reduce_371,
  6, 270, :_reduce_372,
  2, 270, :_reduce_373,
  4, 270, :_reduce_374,
  2, 270, :_reduce_375,
  4, 270, :_reduce_376,
  1, 270, :_reduce_none,
  0, 186, :_reduce_378,
  1, 186, :_reduce_379,
  3, 274, :_reduce_380,
  1, 274, :_reduce_381,
  4, 274, :_reduce_382,
  1, 275, :_reduce_383,
  4, 275, :_reduce_384,
  1, 276, :_reduce_385,
  3, 276, :_reduce_386,
  1, 277, :_reduce_387,
  1, 277, :_reduce_none,
  0, 281, :_reduce_389,
  0, 282, :_reduce_390,
  4, 234, :_reduce_391,
  4, 279, :_reduce_392,
  1, 279, :_reduce_393,
  3, 280, :_reduce_394,
  3, 280, :_reduce_395,
  0, 285, :_reduce_396,
  5, 284, :_reduce_397,
  2, 181, :_reduce_398,
  4, 181, :_reduce_399,
  5, 181, :_reduce_400,
  5, 181, :_reduce_401,
  2, 233, :_reduce_402,
  4, 233, :_reduce_403,
  4, 233, :_reduce_404,
  3, 233, :_reduce_405,
  3, 233, :_reduce_406,
  3, 233, :_reduce_407,
  2, 233, :_reduce_408,
  1, 233, :_reduce_409,
  4, 233, :_reduce_410,
  0, 287, :_reduce_411,
  5, 232, :_reduce_412,
  0, 288, :_reduce_413,
  5, 232, :_reduce_414,
  5, 238, :_reduce_415,
  1, 289, :_reduce_416,
  1, 289, :_reduce_none,
  6, 155, :_reduce_418,
  0, 155, :_reduce_419,
  1, 290, :_reduce_420,
  1, 290, :_reduce_none,
  1, 290, :_reduce_none,
  2, 291, :_reduce_423,
  1, 291, :_reduce_none,
  2, 157, :_reduce_425,
  1, 157, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 222, :_reduce_none,
  1, 223, :_reduce_430,
  1, 293, :_reduce_431,
  2, 293, :_reduce_432,
  3, 294, :_reduce_433,
  1, 294, :_reduce_434,
  1, 294, :_reduce_435,
  3, 224, :_reduce_436,
  4, 225, :_reduce_437,
  3, 226, :_reduce_438,
  0, 298, :_reduce_439,
  3, 298, :_reduce_440,
  1, 299, :_reduce_441,
  2, 299, :_reduce_442,
  3, 228, :_reduce_443,
  0, 301, :_reduce_444,
  3, 301, :_reduce_445,
  3, 227, :_reduce_446,
  3, 229, :_reduce_447,
  0, 302, :_reduce_448,
  3, 302, :_reduce_449,
  0, 303, :_reduce_450,
  3, 303, :_reduce_451,
  0, 295, :_reduce_452,
  2, 295, :_reduce_453,
  0, 296, :_reduce_454,
  2, 296, :_reduce_455,
  0, 297, :_reduce_456,
  2, 297, :_reduce_457,
  1, 300, :_reduce_458,
  2, 300, :_reduce_459,
  0, 305, :_reduce_460,
  4, 300, :_reduce_461,
  1, 304, :_reduce_462,
  1, 304, :_reduce_463,
  1, 304, :_reduce_464,
  1, 304, :_reduce_none,
  1, 206, :_reduce_466,
  3, 207, :_reduce_467,
  1, 292, :_reduce_468,
  2, 292, :_reduce_469,
  1, 209, :_reduce_470,
  1, 209, :_reduce_471,
  1, 209, :_reduce_472,
  1, 209, :_reduce_473,
  1, 198, :_reduce_474,
  1, 198, :_reduce_475,
  1, 198, :_reduce_476,
  1, 198, :_reduce_477,
  1, 198, :_reduce_478,
  1, 199, :_reduce_479,
  1, 199, :_reduce_480,
  1, 199, :_reduce_481,
  1, 199, :_reduce_482,
  1, 199, :_reduce_483,
  1, 199, :_reduce_484,
  1, 199, :_reduce_485,
  1, 230, :_reduce_486,
  1, 230, :_reduce_487,
  1, 166, :_reduce_488,
  1, 166, :_reduce_489,
  1, 171, :_reduce_490,
  1, 171, :_reduce_491,
  0, 306, :_reduce_492,
  4, 240, :_reduce_493,
  0, 240, :_reduce_494,
  3, 242, :_reduce_495,
  0, 308, :_reduce_496,
  3, 242, :_reduce_497,
  4, 307, :_reduce_498,
  2, 307, :_reduce_499,
  2, 307, :_reduce_500,
  1, 307, :_reduce_501,
  2, 310, :_reduce_502,
  0, 310, :_reduce_503,
  6, 283, :_reduce_504,
  8, 283, :_reduce_505,
  4, 283, :_reduce_506,
  6, 283, :_reduce_507,
  4, 283, :_reduce_508,
  6, 283, :_reduce_509,
  2, 283, :_reduce_510,
  4, 283, :_reduce_511,
  6, 283, :_reduce_512,
  2, 283, :_reduce_513,
  4, 283, :_reduce_514,
  2, 283, :_reduce_515,
  4, 283, :_reduce_516,
  1, 283, :_reduce_517,
  0, 283, :_reduce_518,
  1, 278, :_reduce_519,
  1, 278, :_reduce_520,
  1, 278, :_reduce_521,
  1, 278, :_reduce_522,
  1, 261, :_reduce_none,
  1, 261, :_reduce_524,
  1, 312, :_reduce_525,
  1, 313, :_reduce_526,
  3, 313, :_reduce_527,
  1, 271, :_reduce_528,
  3, 271, :_reduce_529,
  1, 314, :_reduce_530,
  2, 315, :_reduce_531,
  1, 315, :_reduce_532,
  2, 316, :_reduce_533,
  1, 316, :_reduce_534,
  1, 265, :_reduce_535,
  3, 265, :_reduce_536,
  1, 309, :_reduce_537,
  3, 309, :_reduce_538,
  1, 317, :_reduce_none,
  1, 317, :_reduce_none,
  2, 266, :_reduce_541,
  1, 266, :_reduce_542,
  3, 318, :_reduce_543,
  3, 319, :_reduce_544,
  1, 272, :_reduce_545,
  3, 272, :_reduce_546,
  1, 311, :_reduce_547,
  3, 311, :_reduce_548,
  1, 320, :_reduce_none,
  1, 320, :_reduce_none,
  2, 273, :_reduce_551,
  1, 273, :_reduce_552,
  1, 321, :_reduce_none,
  1, 321, :_reduce_none,
  2, 268, :_reduce_555,
  2, 267, :_reduce_556,
  0, 267, :_reduce_557,
  1, 243, :_reduce_none,
  3, 243, :_reduce_559,
  0, 231, :_reduce_560,
  2, 231, :_reduce_none,
  1, 216, :_reduce_562,
  3, 216, :_reduce_563,
  3, 322, :_reduce_564,
  2, 322, :_reduce_565,
  4, 322, :_reduce_566,
  2, 322, :_reduce_567,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 286, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 170, :_reduce_580,
  1, 170, :_reduce_581,
  0, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 177, :_reduce_none,
  1, 177, :_reduce_none,
  2, 193, :_reduce_586,
  2, 169, :_reduce_587,
  0, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 215, :_reduce_none,
  1, 241, :_reduce_591,
  1, 241, :_reduce_none,
  1, 151, :_reduce_none,
  2, 151, :_reduce_none,
  0, 213, :_reduce_595 ]

racc_reduce_n = 596

racc_shift_n = 1021

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kDO_LAMBDA => 28,
  :kRETURN => 29,
  :kYIELD => 30,
  :kSUPER => 31,
  :kSELF => 32,
  :kNIL => 33,
  :kTRUE => 34,
  :kFALSE => 35,
  :kAND => 36,
  :kOR => 37,
  :kNOT => 38,
  :kIF_MOD => 39,
  :kUNLESS_MOD => 40,
  :kWHILE_MOD => 41,
  :kUNTIL_MOD => 42,
  :kRESCUE_MOD => 43,
  :kALIAS => 44,
  :kDEFINED => 45,
  :klBEGIN => 46,
  :klEND => 47,
  :k__LINE__ => 48,
  :k__FILE__ => 49,
  :k__ENCODING__ => 50,
  :tIDENTIFIER => 51,
  :tFID => 52,
  :tGVAR => 53,
  :tIVAR => 54,
  :tCONSTANT => 55,
  :tLABEL => 56,
  :tCVAR => 57,
  :tNTH_REF => 58,
  :tBACK_REF => 59,
  :tSTRING_CONTENT => 60,
  :tINTEGER => 61,
  :tFLOAT => 62,
  :tUPLUS => 63,
  :tUMINUS => 64,
  :tUMINUS_NUM => 65,
  :tPOW => 66,
  :tCMP => 67,
  :tEQ => 68,
  :tEQQ => 69,
  :tNEQ => 70,
  :tGEQ => 71,
  :tLEQ => 72,
  :tANDOP => 73,
  :tOROP => 74,
  :tMATCH => 75,
  :tNMATCH => 76,
  :tDOT => 77,
  :tDOT2 => 78,
  :tDOT3 => 79,
  :tAREF => 80,
  :tASET => 81,
  :tLSHFT => 82,
  :tRSHFT => 83,
  :tCOLON2 => 84,
  :tCOLON3 => 85,
  :tOP_ASGN => 86,
  :tASSOC => 87,
  :tLPAREN => 88,
  :tLPAREN2 => 89,
  :tRPAREN => 90,
  :tLPAREN_ARG => 91,
  :tLBRACK => 92,
  :tLBRACK2 => 93,
  :tRBRACK => 94,
  :tLBRACE => 95,
  :tLBRACE_ARG => 96,
  :tSTAR => 97,
  :tSTAR2 => 98,
  :tAMPER => 99,
  :tAMPER2 => 100,
  :tTILDE => 101,
  :tPERCENT => 102,
  :tDIVIDE => 103,
  :tDSTAR => 104,
  :tPLUS => 105,
  :tMINUS => 106,
  :tLT => 107,
  :tGT => 108,
  :tPIPE => 109,
  :tBANG => 110,
  :tCARET => 111,
  :tLCURLY => 112,
  :tRCURLY => 113,
  :tBACK_REF2 => 114,
  :tSYMBEG => 115,
  :tSTRING_BEG => 116,
  :tXSTRING_BEG => 117,
  :tREGEXP_BEG => 118,
  :tREGEXP_OPT => 119,
  :tWORDS_BEG => 120,
  :tQWORDS_BEG => 121,
  :tSYMBOLS_BEG => 122,
  :tQSYMBOLS_BEG => 123,
  :tSTRING_DBEG => 124,
  :tSTRING_DVAR => 125,
  :tSTRING_END => 126,
  :tSTRING_DEND => 127,
  :tSTRING => 128,
  :tSYMBOL => 129,
  :tNL => 130,
  :tEH => 131,
  :tCOLON => 132,
  :tCOMMA => 133,
  :tSPACE => 134,
  :tSEMI => 135,
  :tLAMBDA => 136,
  :tLAMBEG => 137,
  :tCHARACTER => 138,
  :tRATIONAL => 139,
  :tIMAGINARY => 140,
  :tLABEL_END => 141,
  :tANDDOT => 142,
  :tEQL => 143,
  :tLOWEST => 144 }

racc_nt_base = 145

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kDO_LAMBDA",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "k__ENCODING__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tLABEL",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tLBRACK2",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tDSTAR",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tREGEXP_OPT",
  "tWORDS_BEG",
  "tQWORDS_BEG",
  "tSYMBOLS_BEG",
  "tQSYMBOLS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING_DEND",
  "tSTRING",
  "tSYMBOL",
  "tNL",
  "tEH",
  "tCOLON",
  "tCOMMA",
  "tSPACE",
  "tSEMI",
  "tLAMBDA",
  "tLAMBEG",
  "tCHARACTER",
  "tRATIONAL",
  "tIMAGINARY",
  "tLABEL_END",
  "tANDDOT",
  "tEQL",
  "tLOWEST",
  "$start",
  "program",
  "top_compstmt",
  "top_stmts",
  "opt_terms",
  "top_stmt",
  "terms",
  "stmt",
  "bodystmt",
  "compstmt",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "stmt_or_begin",
  "fitem",
  "undef_list",
  "expr_value",
  "command_asgn",
  "mlhs",
  "command_call",
  "var_lhs",
  "primary_value",
  "opt_call_args",
  "rbracket",
  "call_op",
  "backref",
  "lhs",
  "mrhs",
  "mrhs_arg",
  "expr",
  "@1",
  "opt_nl",
  "arg",
  "command",
  "block_command",
  "block_call",
  "dot_or_colon",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_param",
  "fcall",
  "@2",
  "operation",
  "call_args",
  "mlhs_basic",
  "mlhs_inner",
  "rparen",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "mlhs_post",
  "user_variable",
  "keyword_variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "fsym",
  "symbol",
  "dsym",
  "@3",
  "simple_numeric",
  "primary",
  "arg_value",
  "aref_args",
  "none",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "@4",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "qwords",
  "symbols",
  "qsymbols",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "lambda",
  "then",
  "if_tail",
  "do",
  "case_body",
  "for_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "@5",
  "@6",
  "@7",
  "@8",
  "@9",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "f_marg",
  "f_norm_arg",
  "f_margs",
  "f_marg_list",
  "block_args_tail",
  "f_block_kwarg",
  "f_kwrest",
  "opt_f_block_arg",
  "f_block_arg",
  "opt_block_args_tail",
  "block_param",
  "f_arg",
  "f_block_optarg",
  "f_rest_arg",
  "block_param_def",
  "opt_bv_decl",
  "bv_decls",
  "bvar",
  "f_bad_arg",
  "f_larglist",
  "lambda_body",
  "@21",
  "@22",
  "f_args",
  "do_block",
  "@23",
  "operation3",
  "@24",
  "@25",
  "cases",
  "exc_list",
  "exc_var",
  "numeric",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "regexp_contents",
  "word_list",
  "word",
  "string_content",
  "symbol_list",
  "qword_list",
  "qsym_list",
  "string_dvar",
  "@26",
  "@27",
  "args_tail",
  "@28",
  "f_kwarg",
  "opt_args_tail",
  "f_optarg",
  "f_arg_asgn",
  "f_arg_item",
  "f_label",
  "f_kw",
  "f_block_kw",
  "kwrest_mark",
  "f_opt",
  "f_block_opt",
  "restarg_mark",
  "blkarg_mark",
  "assoc" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'ruby23.y', 52)
  def _reduce_2(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 57)
  def _reduce_3(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 61)
  def _reduce_4(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 65)
  def _reduce_5(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 69)
  def _reduce_6(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

# reduce 7 omitted

module_eval(<<'.,.,', 'ruby23.y', 75)
  def _reduce_8(val, _values, result)
                          result = @builder.preexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 80)
  def _reduce_9(val, _values, result)
                          rescue_bodies     = val[1]
                      else_t,   else_   = val[2]
                      ensure_t, ensure_ = val[3]

                      if rescue_bodies.empty? && !else_.nil?
                        diagnostic :warning, :useless_else, nil, else_t
                      end

                      result = @builder.begin_body(val[0],
                                  rescue_bodies,
                                  else_t,   else_,
                                  ensure_t, ensure_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 96)
  def _reduce_10(val, _values, result)
                          result = @builder.compstmt(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 101)
  def _reduce_11(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 105)
  def _reduce_12(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 109)
  def _reduce_13(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 113)
  def _reduce_14(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'ruby23.y', 119)
  def _reduce_16(val, _values, result)
                          diagnostic :error, :begin_in_method, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 124)
  def _reduce_17(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 128)
  def _reduce_18(val, _values, result)
                          result = @builder.alias(val[0], val[1], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 132)
  def _reduce_19(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.gvar(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 138)
  def _reduce_20(val, _values, result)
                          result = @builder.alias(val[0],
                                  @builder.gvar(val[1]),
                                  @builder.back_ref(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 144)
  def _reduce_21(val, _values, result)
                          diagnostic :error, :nth_ref_alias, nil, val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 148)
  def _reduce_22(val, _values, result)
                          result = @builder.undef_method(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 152)
  def _reduce_23(val, _values, result)
                          result = @builder.condition_mod(val[0], nil,
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 157)
  def _reduce_24(val, _values, result)
                          result = @builder.condition_mod(nil, val[0],
                                                      val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 162)
  def _reduce_25(val, _values, result)
                          result = @builder.loop_mod(:while, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 166)
  def _reduce_26(val, _values, result)
                          result = @builder.loop_mod(:until, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 170)
  def _reduce_27(val, _values, result)
                          rescue_body = @builder.rescue_body(val[1],
                                        nil, nil, nil,
                                        nil, val[2])

                      result = @builder.begin_body(val[0], [ rescue_body ])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 178)
  def _reduce_28(val, _values, result)
                          result = @builder.postexe(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

# reduce 29 omitted

module_eval(<<'.,.,', 'ruby23.y', 183)
  def _reduce_30(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 187)
  def _reduce_31(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 191)
  def _reduce_32(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 198)
  def _reduce_33(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 205)
  def _reduce_34(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 212)
  def _reduce_35(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 219)
  def _reduce_36(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 226)
  def _reduce_37(val, _values, result)
                          @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 230)
  def _reduce_38(val, _values, result)
                          result = @builder.assign(val[0], val[1],
                                  @builder.array(nil, val[2], nil))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 235)
  def _reduce_39(val, _values, result)
                          result = @builder.multi_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'ruby23.y', 241)
  def _reduce_41(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 245)
  def _reduce_42(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'ruby23.y', 251)
  def _reduce_44(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 255)
  def _reduce_45(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 259)
  def _reduce_46(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 263)
  def _reduce_47(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'ruby23.y', 275)
  def _reduce_53(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 281)
  def _reduce_54(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 285)
  def _reduce_55(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

# reduce 56 omitted

module_eval(<<'.,.,', 'ruby23.y', 294)
  def _reduce_57(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 299)
  def _reduce_58(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0],
                                        nil, val[1], nil)

                      begin_t, args, body, end_t = val[2]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 308)
  def _reduce_59(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 313)
  def _reduce_60(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 322)
  def _reduce_61(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2],
                                  nil, val[3], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 327)
  def _reduce_62(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                        nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 336)
  def _reduce_63(val, _values, result)
                          result = @builder.keyword_cmd(:super, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 341)
  def _reduce_64(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 346)
  def _reduce_65(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 351)
  def _reduce_66(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 356)
  def _reduce_67(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0],
                                  nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 362)
  def _reduce_68(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 366)
  def _reduce_69(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 371)
  def _reduce_70(val, _values, result)
                          result = @builder.multi_lhs(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 375)
  def _reduce_71(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'ruby23.y', 381)
  def _reduce_73(val, _values, result)
                          result = val[0].
                                  push(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 386)
  def _reduce_74(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 391)
  def _reduce_75(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1], val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 397)
  def _reduce_76(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 402)
  def _reduce_77(val, _values, result)
                          result = val[0].
                                  push(@builder.splat(val[1])).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 408)
  def _reduce_78(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 412)
  def _reduce_79(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 417)
  def _reduce_80(val, _values, result)
                          result = [ @builder.splat(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 421)
  def _reduce_81(val, _values, result)
                          result = [ @builder.splat(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'ruby23.y', 428)
  def _reduce_83(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 433)
  def _reduce_84(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 437)
  def _reduce_85(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 442)
  def _reduce_86(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 446)
  def _reduce_87(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 451)
  def _reduce_88(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 455)
  def _reduce_89(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 459)
  def _reduce_90(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 463)
  def _reduce_91(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 467)
  def _reduce_92(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 471)
  def _reduce_93(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 475)
  def _reduce_94(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 480)
  def _reduce_95(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 485)
  def _reduce_96(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 490)
  def _reduce_97(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 494)
  def _reduce_98(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 498)
  def _reduce_99(val, _values, result)
                          result = @builder.index_asgn(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 502)
  def _reduce_100(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 506)
  def _reduce_101(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 510)
  def _reduce_102(val, _values, result)
                          result = @builder.attr_asgn(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 514)
  def _reduce_103(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 519)
  def _reduce_104(val, _values, result)
                          result = @builder.assignable(
                                  @builder.const_global(val[0], val[1]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 524)
  def _reduce_105(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 529)
  def _reduce_106(val, _values, result)
                          diagnostic :error, :module_name_const, nil, val[0]
                    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'ruby23.y', 535)
  def _reduce_108(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 539)
  def _reduce_109(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 543)
  def _reduce_110(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'ruby23.y', 552)
  def _reduce_116(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'ruby23.y', 561)
  def _reduce_120(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 565)
  def _reduce_121(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 569)
  def _reduce_122(val, _values, result)
                          result = val[0] << val[3]
                    
    result
  end
.,.,

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

module_eval(<<'.,.,', 'ruby23.y', 590)
  def _reduce_194(val, _values, result)
                          result = @builder.assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 594)
  def _reduce_195(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result  = @builder.assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 604)
  def _reduce_196(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 608)
  def _reduce_197(val, _values, result)
                          rescue_body = @builder.rescue_body(val[3],
                                        nil, nil, nil,
                                        nil, val[4])

                      rescue_ = @builder.begin_body(val[2], [ rescue_body ])

                      result = @builder.op_assign(val[0], val[1], rescue_)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 618)
  def _reduce_198(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.index(
                                    val[0], val[1], val[2], val[3]),
                                  val[4], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 625)
  def _reduce_199(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 632)
  def _reduce_200(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 639)
  def _reduce_201(val, _values, result)
                          result = @builder.op_assign(
                                  @builder.call_method(
                                    val[0], val[1], val[2]),
                                  val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 646)
  def _reduce_202(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_fetch(val[0], val[1], val[2]))
                      result = @builder.op_assign(const, val[3], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 652)
  def _reduce_203(val, _values, result)
                          const  = @builder.const_op_assignable(
                                  @builder.const_global(val[0], val[1]))
                      result = @builder.op_assign(const, val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 658)
  def _reduce_204(val, _values, result)
                          result = @builder.op_assign(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 662)
  def _reduce_205(val, _values, result)
                          result = @builder.range_inclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 666)
  def _reduce_206(val, _values, result)
                          result = @builder.range_exclusive(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 670)
  def _reduce_207(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 674)
  def _reduce_208(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 678)
  def _reduce_209(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 682)
  def _reduce_210(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 686)
  def _reduce_211(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 690)
  def _reduce_212(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 694)
  def _reduce_213(val, _values, result)
                          result = @builder.unary_op(val[0],
                                  @builder.binary_op(
                                    val[1], val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 700)
  def _reduce_214(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 704)
  def _reduce_215(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 708)
  def _reduce_216(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 712)
  def _reduce_217(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 716)
  def _reduce_218(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 720)
  def _reduce_219(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 724)
  def _reduce_220(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 728)
  def _reduce_221(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 732)
  def _reduce_222(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 736)
  def _reduce_223(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 740)
  def _reduce_224(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 744)
  def _reduce_225(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 748)
  def _reduce_226(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 752)
  def _reduce_227(val, _values, result)
                          result = @builder.match_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 756)
  def _reduce_228(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 760)
  def _reduce_229(val, _values, result)
                          result = @builder.not_op(val[0], nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 764)
  def _reduce_230(val, _values, result)
                          result = @builder.unary_op(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 768)
  def _reduce_231(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 772)
  def _reduce_232(val, _values, result)
                          result = @builder.binary_op(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 776)
  def _reduce_233(val, _values, result)
                          result = @builder.logical_op(:and, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 780)
  def _reduce_234(val, _values, result)
                          result = @builder.logical_op(:or, val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 784)
  def _reduce_235(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0], nil, [ val[2] ], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 788)
  def _reduce_236(val, _values, result)
                          result = @builder.ternary(val[0], val[1],
                                                val[2], val[4], val[5])
                    
    result
  end
.,.,

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'ruby23.y', 799)
  def _reduce_241(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 803)
  def _reduce_242(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 808)
  def _reduce_243(val, _values, result)
                          result = val
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 813)
  def _reduce_244(val, _values, result)
                          result = [ nil, [], nil ]
                    
    result
  end
.,.,

# reduce 245 omitted

module_eval(<<'.,.,', 'ruby23.y', 819)
  def _reduce_246(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'ruby23.y', 825)
  def _reduce_249(val, _values, result)
                          result = val[0] << @builder.associate(nil, val[2], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 829)
  def _reduce_250(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 834)
  def _reduce_251(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 838)
  def _reduce_252(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 842)
  def _reduce_253(val, _values, result)
                          result = [ @builder.associate(nil, val[0], nil) ]
                      result.concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 847)
  def _reduce_254(val, _values, result)
                          assocs = @builder.associate(nil, val[2], nil)
                      result = val[0] << assocs
                      result.concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 853)
  def _reduce_255(val, _values, result)
                          result =  [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 857)
  def _reduce_256(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 862)
  def _reduce_257(val, _values, result)
                          @lexer.cmdarg = val[0]

                      result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 869)
  def _reduce_258(val, _values, result)
                          result = @builder.block_pass(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 874)
  def _reduce_259(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 878)
  def _reduce_260(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 883)
  def _reduce_261(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 887)
  def _reduce_262(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 891)
  def _reduce_263(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 895)
  def _reduce_264(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 900)
  def _reduce_265(val, _values, result)
                          result = @builder.array(nil, val[0], nil)
                    
    result
  end
.,.,

# reduce 266 omitted

module_eval(<<'.,.,', 'ruby23.y', 906)
  def _reduce_267(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 910)
  def _reduce_268(val, _values, result)
                          result = val[0] << @builder.splat(val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 914)
  def _reduce_269(val, _values, result)
                          result = [ @builder.splat(val[0], val[1]) ]
                    
    result
  end
.,.,

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

module_eval(<<'.,.,', 'ruby23.y', 929)
  def _reduce_280(val, _values, result)
                          result = @builder.call_method(nil, nil, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 933)
  def _reduce_281(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 938)
  def _reduce_282(val, _values, result)
                          @lexer.cmdarg = val[1]

                      result = @builder.begin_keyword(val[0], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 944)
  def _reduce_283(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 949)
  def _reduce_284(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 953)
  def _reduce_285(val, _values, result)
                          @lexer.cmdarg = val[1]

                      result = @builder.begin(val[0], val[2], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 959)
  def _reduce_286(val, _values, result)
                          @lexer.state = :expr_endarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 963)
  def _reduce_287(val, _values, result)
                          result = @builder.begin(val[0], nil, val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 967)
  def _reduce_288(val, _values, result)
                          result = @builder.begin(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 971)
  def _reduce_289(val, _values, result)
                          result = @builder.const_fetch(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 975)
  def _reduce_290(val, _values, result)
                          result = @builder.const_global(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 979)
  def _reduce_291(val, _values, result)
                          result = @builder.array(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 983)
  def _reduce_292(val, _values, result)
                          result = @builder.associate(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 987)
  def _reduce_293(val, _values, result)
                          result = @builder.keyword_cmd(:return, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 991)
  def _reduce_294(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 995)
  def _reduce_295(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0], val[1], [], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 999)
  def _reduce_296(val, _values, result)
                          result = @builder.keyword_cmd(:yield, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1003)
  def _reduce_297(val, _values, result)
                          result = @builder.keyword_cmd(:defined?, val[0],
                                                    val[2], [ val[3] ], val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1008)
  def _reduce_298(val, _values, result)
                          result = @builder.not_op(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1012)
  def _reduce_299(val, _values, result)
                          result = @builder.not_op(val[0], val[1], nil, val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1016)
  def _reduce_300(val, _values, result)
                          method_call = @builder.call_method(nil, nil, val[0])

                      begin_t, args, body, end_t = val[1]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

# reduce 301 omitted

module_eval(<<'.,.,', 'ruby23.y', 1025)
  def _reduce_302(val, _values, result)
                          begin_t, args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1031)
  def _reduce_303(val, _values, result)
                          lambda_call = @builder.call_lambda(val[0])

                      args, (begin_t, body, end_t) = val[1]
                      result      = @builder.block(lambda_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1039)
  def _reduce_304(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  val[3], else_t,
                                                  else_,  val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1046)
  def _reduce_305(val, _values, result)
                          else_t, else_ = val[4]
                      result = @builder.condition(val[0], val[1], val[2],
                                                  else_,  else_t,
                                                  val[3], val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1053)
  def _reduce_306(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1057)
  def _reduce_307(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1061)
  def _reduce_308(val, _values, result)
                          result = @builder.loop(:while, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1066)
  def _reduce_309(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1070)
  def _reduce_310(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1074)
  def _reduce_311(val, _values, result)
                          result = @builder.loop(:until, val[0], val[2], val[3],
                                             val[5], val[6])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1079)
  def _reduce_312(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[3]

                      result = @builder.case(val[0], val[1],
                                             when_bodies, else_t, else_body,
                                             val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1087)
  def _reduce_313(val, _values, result)
                          *when_bodies, (else_t, else_body) = *val[2]

                      result = @builder.case(val[0], nil,
                                             when_bodies, else_t, else_body,
                                             val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1095)
  def _reduce_314(val, _values, result)
                          @lexer.cond.push(true)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1099)
  def _reduce_315(val, _values, result)
                          @lexer.cond.pop
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1103)
  def _reduce_316(val, _values, result)
                          result = @builder.for(val[0], val[1],
                                            val[2], val[4],
                                            val[5], val[7], val[8])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1109)
  def _reduce_317(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1114)
  def _reduce_318(val, _values, result)
                          if in_def?
                        diagnostic :error, :class_in_def, nil, val[0]
                      end

                      lt_t, superclass = val[2]
                      result = @builder.def_class(val[0], val[1],
                                                  lt_t, superclass,
                                                  val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1128)
  def _reduce_319(val, _values, result)
                          result = @def_level
                      @def_level = 0

                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1136)
  def _reduce_320(val, _values, result)
                          result = @builder.def_sclass(val[0], val[1], val[2],
                                                   val[5], val[6])

                      @lexer.pop_cmdarg
                      @static_env.unextend

                      @def_level = val[4]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1146)
  def _reduce_321(val, _values, result)
                          @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1151)
  def _reduce_322(val, _values, result)
                          if in_def?
                        diagnostic :error, :module_in_def, nil, val[0]
                      end

                      result = @builder.def_module(val[0], val[1],
                                                   val[3], val[4])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1163)
  def _reduce_323(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1169)
  def _reduce_324(val, _values, result)
                          result = @builder.def_method(val[0], val[1],
                                  val[3], val[4], val[5])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1178)
  def _reduce_325(val, _values, result)
                          @lexer.state = :expr_fname
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1182)
  def _reduce_326(val, _values, result)
                          @def_level += 1
                      @static_env.extend_static
                      @lexer.push_cmdarg
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1188)
  def _reduce_327(val, _values, result)
                          result = @builder.def_singleton(val[0], val[1], val[2],
                                  val[4], val[6], val[7], val[8])

                      @lexer.pop_cmdarg
                      @static_env.unextend
                      @def_level -= 1
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1197)
  def _reduce_328(val, _values, result)
                          result = @builder.keyword_cmd(:break, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1201)
  def _reduce_329(val, _values, result)
                          result = @builder.keyword_cmd(:next, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1205)
  def _reduce_330(val, _values, result)
                          result = @builder.keyword_cmd(:redo, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1209)
  def _reduce_331(val, _values, result)
                          result = @builder.keyword_cmd(:retry, val[0])
                    
    result
  end
.,.,

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

module_eval(<<'.,.,', 'ruby23.y', 1218)
  def _reduce_335(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 336 omitted

# reduce 337 omitted

# reduce 338 omitted

module_eval(<<'.,.,', 'ruby23.y', 1227)
  def _reduce_339(val, _values, result)
                          else_t, else_ = val[4]
                      result = [ val[0],
                                 @builder.condition(val[0], val[1], val[2],
                                                    val[3], else_t,
                                                    else_,  nil),
                               ]
                    
    result
  end
.,.,

# reduce 340 omitted

module_eval(<<'.,.,', 'ruby23.y', 1238)
  def _reduce_341(val, _values, result)
                          result = val
                    
    result
  end
.,.,

# reduce 342 omitted

# reduce 343 omitted

module_eval(<<'.,.,', 'ruby23.y', 1246)
  def _reduce_344(val, _values, result)
                          result = @builder.arg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1250)
  def _reduce_345(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1255)
  def _reduce_346(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1259)
  def _reduce_347(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 348 omitted

module_eval(<<'.,.,', 'ruby23.y', 1265)
  def _reduce_349(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2], val[3]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1270)
  def _reduce_350(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2], val[3])).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1276)
  def _reduce_351(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2]))
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1281)
  def _reduce_352(val, _values, result)
                          result = val[0].
                                  push(@builder.restarg(val[2])).
                                  concat(val[4])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1287)
  def _reduce_353(val, _values, result)
                          result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1291)
  def _reduce_354(val, _values, result)
                          result = [ @builder.restarg(val[0], val[1]),
                                 *val[3] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1296)
  def _reduce_355(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1300)
  def _reduce_356(val, _values, result)
                          result = [ @builder.restarg(val[0]),
                                 *val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1306)
  def _reduce_357(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1310)
  def _reduce_358(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1314)
  def _reduce_359(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1318)
  def _reduce_360(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1324)
  def _reduce_361(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1328)
  def _reduce_362(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1333)
  def _reduce_363(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1340)
  def _reduce_364(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1348)
  def _reduce_365(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1354)
  def _reduce_366(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1361)
  def _reduce_367(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

# reduce 368 omitted

module_eval(<<'.,.,', 'ruby23.y', 1368)
  def _reduce_369(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1375)
  def _reduce_370(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1379)
  def _reduce_371(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1385)
  def _reduce_372(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1392)
  def _reduce_373(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1397)
  def _reduce_374(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1403)
  def _reduce_375(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1408)
  def _reduce_376(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

# reduce 377 omitted

module_eval(<<'.,.,', 'ruby23.y', 1416)
  def _reduce_378(val, _values, result)
                          result = @builder.args(nil, [], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1420)
  def _reduce_379(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1425)
  def _reduce_380(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1429)
  def _reduce_381(val, _values, result)
                          result = @builder.args(val[0], [], val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1433)
  def _reduce_382(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1438)
  def _reduce_383(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1442)
  def _reduce_384(val, _values, result)
                          result = val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1447)
  def _reduce_385(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1451)
  def _reduce_386(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1456)
  def _reduce_387(val, _values, result)
                          result = @builder.shadowarg(val[0])
                    
    result
  end
.,.,

# reduce 388 omitted

module_eval(<<'.,.,', 'ruby23.y', 1461)
  def _reduce_389(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1465)
  def _reduce_390(val, _values, result)
                          result = @lexer.cmdarg.dup
                      @lexer.cmdarg.clear
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1470)
  def _reduce_391(val, _values, result)
                          @lexer.cmdarg = val[2]
                      @lexer.cmdarg.lexpop

                      result = [ val[1], val[3] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1480)
  def _reduce_392(val, _values, result)
                          result = @builder.args(val[0], val[1].concat(val[2]), val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1484)
  def _reduce_393(val, _values, result)
                          result = @builder.args(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1489)
  def _reduce_394(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1493)
  def _reduce_395(val, _values, result)
                          result = [ val[0], val[1], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1498)
  def _reduce_396(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1502)
  def _reduce_397(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1509)
  def _reduce_398(val, _values, result)
                          begin_t, block_args, body, end_t = val[1]
                      result      = @builder.block(val[0],
                                      begin_t, block_args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1515)
  def _reduce_399(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1521)
  def _reduce_400(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      method_call = @builder.call_method(val[0], val[1], val[2],
                                      lparen_t, args, rparen_t)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1531)
  def _reduce_401(val, _values, result)
                          method_call = @builder.call_method(val[0], val[1], val[2],
                                      nil, val[3], nil)

                      begin_t, args, body, end_t = val[4]
                      result      = @builder.block(method_call,
                                      begin_t, args, body, end_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1541)
  def _reduce_402(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.call_method(nil, nil, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1547)
  def _reduce_403(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1553)
  def _reduce_404(val, _values, result)
                          lparen_t, args, rparen_t = val[3]
                      result = @builder.call_method(val[0], val[1], val[2],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1559)
  def _reduce_405(val, _values, result)
                          result = @builder.call_method(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1563)
  def _reduce_406(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1569)
  def _reduce_407(val, _values, result)
                          lparen_t, args, rparen_t = val[2]
                      result = @builder.call_method(val[0], val[1], nil,
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1575)
  def _reduce_408(val, _values, result)
                          lparen_t, args, rparen_t = val[1]
                      result = @builder.keyword_cmd(:super, val[0],
                                  lparen_t, args, rparen_t)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1581)
  def _reduce_409(val, _values, result)
                          result = @builder.keyword_cmd(:zsuper, val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1585)
  def _reduce_410(val, _values, result)
                          result = @builder.index(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1590)
  def _reduce_411(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1594)
  def _reduce_412(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1600)
  def _reduce_413(val, _values, result)
                          @static_env.extend_dynamic
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1604)
  def _reduce_414(val, _values, result)
                          result = [ val[0], val[2], val[3], val[4] ]

                      @static_env.unextend
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1611)
  def _reduce_415(val, _values, result)
                          result = [ @builder.when(val[0], val[1], val[2], val[3]),
                                 *val[4] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1617)
  def _reduce_416(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 417 omitted

module_eval(<<'.,.,', 'ruby23.y', 1623)
  def _reduce_418(val, _values, result)
                          assoc_t, exc_var = val[2]

                      if val[1]
                        exc_list = @builder.array(nil, val[1], nil)
                      end

                      result = [ @builder.rescue_body(val[0],
                                      exc_list, assoc_t, exc_var,
                                      val[3], val[4]),
                                 *val[5] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1636)
  def _reduce_419(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1641)
  def _reduce_420(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

# reduce 421 omitted

# reduce 422 omitted

module_eval(<<'.,.,', 'ruby23.y', 1648)
  def _reduce_423(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 424 omitted

module_eval(<<'.,.,', 'ruby23.y', 1654)
  def _reduce_425(val, _values, result)
                          result = [ val[0], val[1] ]
                    
    result
  end
.,.,

# reduce 426 omitted

# reduce 427 omitted

# reduce 428 omitted

# reduce 429 omitted

module_eval(<<'.,.,', 'ruby23.y', 1664)
  def _reduce_430(val, _values, result)
                          result = @builder.string_compose(nil, val[0], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1669)
  def _reduce_431(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1673)
  def _reduce_432(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1678)
  def _reduce_433(val, _values, result)
                          string = @builder.string_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1683)
  def _reduce_434(val, _values, result)
                          string = @builder.string(val[0])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1688)
  def _reduce_435(val, _values, result)
                          result = @builder.character(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1693)
  def _reduce_436(val, _values, result)
                          string = @builder.xstring_compose(val[0], val[1], val[2])
                      result = @builder.dedent_string(string, @lexer.dedent_level)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1699)
  def _reduce_437(val, _values, result)
                          opts   = @builder.regexp_options(val[3])
                      result = @builder.regexp_compose(val[0], val[1], val[2], opts)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1705)
  def _reduce_438(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1710)
  def _reduce_439(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1714)
  def _reduce_440(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1719)
  def _reduce_441(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1723)
  def _reduce_442(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1728)
  def _reduce_443(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1733)
  def _reduce_444(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1737)
  def _reduce_445(val, _values, result)
                          result = val[0] << @builder.word(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1742)
  def _reduce_446(val, _values, result)
                          result = @builder.words_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1747)
  def _reduce_447(val, _values, result)
                          result = @builder.symbols_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1752)
  def _reduce_448(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1756)
  def _reduce_449(val, _values, result)
                          result = val[0] << @builder.string_internal(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1761)
  def _reduce_450(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1765)
  def _reduce_451(val, _values, result)
                          result = val[0] << @builder.symbol_internal(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1770)
  def _reduce_452(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1774)
  def _reduce_453(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1779)
  def _reduce_454(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1783)
  def _reduce_455(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1788)
  def _reduce_456(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1792)
  def _reduce_457(val, _values, result)
                          result = val[0] << val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1797)
  def _reduce_458(val, _values, result)
                          result = @builder.string_internal(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1801)
  def _reduce_459(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1805)
  def _reduce_460(val, _values, result)
                          @lexer.cond.push(false)
                      @lexer.cmdarg.push(false)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1810)
  def _reduce_461(val, _values, result)
                          @lexer.cond.lexpop
                      @lexer.cmdarg.lexpop

                      result = @builder.begin(val[0], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1818)
  def _reduce_462(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1822)
  def _reduce_463(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1826)
  def _reduce_464(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

# reduce 465 omitted

module_eval(<<'.,.,', 'ruby23.y', 1833)
  def _reduce_466(val, _values, result)
                          result = @builder.symbol(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1838)
  def _reduce_467(val, _values, result)
                          result = @builder.symbol_compose(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1843)
  def _reduce_468(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1847)
  def _reduce_469(val, _values, result)
                          result = @builder.negate(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1852)
  def _reduce_470(val, _values, result)
                          result = @builder.integer(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1856)
  def _reduce_471(val, _values, result)
                          result = @builder.float(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1860)
  def _reduce_472(val, _values, result)
                          result = @builder.rational(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1864)
  def _reduce_473(val, _values, result)
                          result = @builder.complex(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1869)
  def _reduce_474(val, _values, result)
                          result = @builder.ident(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1873)
  def _reduce_475(val, _values, result)
                          result = @builder.ivar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1877)
  def _reduce_476(val, _values, result)
                          result = @builder.gvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1881)
  def _reduce_477(val, _values, result)
                          result = @builder.const(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1885)
  def _reduce_478(val, _values, result)
                          result = @builder.cvar(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1890)
  def _reduce_479(val, _values, result)
                          result = @builder.nil(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1894)
  def _reduce_480(val, _values, result)
                          result = @builder.self(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1898)
  def _reduce_481(val, _values, result)
                          result = @builder.true(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1902)
  def _reduce_482(val, _values, result)
                          result = @builder.false(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1906)
  def _reduce_483(val, _values, result)
                          result = @builder.__FILE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1910)
  def _reduce_484(val, _values, result)
                          result = @builder.__LINE__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1914)
  def _reduce_485(val, _values, result)
                          result = @builder.__ENCODING__(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1919)
  def _reduce_486(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1923)
  def _reduce_487(val, _values, result)
                          result = @builder.accessible(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1928)
  def _reduce_488(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1932)
  def _reduce_489(val, _values, result)
                          result = @builder.assignable(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1937)
  def _reduce_490(val, _values, result)
                          result = @builder.nth_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1941)
  def _reduce_491(val, _values, result)
                          result = @builder.back_ref(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1946)
  def _reduce_492(val, _values, result)
                          @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1950)
  def _reduce_493(val, _values, result)
                          result = [ val[0], val[2] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1954)
  def _reduce_494(val, _values, result)
                          result = nil
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1959)
  def _reduce_495(val, _values, result)
                          result = @builder.args(val[0], val[1], val[2])

                      @lexer.state = :expr_value
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1964)
  def _reduce_496(val, _values, result)
                          result = @lexer.in_kwarg
                      @lexer.in_kwarg = true
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1969)
  def _reduce_497(val, _values, result)
                          @lexer.in_kwarg = val[0]
                      result = @builder.args(nil, val[1], nil)
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1975)
  def _reduce_498(val, _values, result)
                          result = val[0].concat(val[2]).concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1979)
  def _reduce_499(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1983)
  def _reduce_500(val, _values, result)
                          result = val[0].concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1987)
  def _reduce_501(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1992)
  def _reduce_502(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 1996)
  def _reduce_503(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2001)
  def _reduce_504(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2008)
  def _reduce_505(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[6]).
                                  concat(val[7])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2016)
  def _reduce_506(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2022)
  def _reduce_507(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2029)
  def _reduce_508(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2035)
  def _reduce_509(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2042)
  def _reduce_510(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2047)
  def _reduce_511(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2053)
  def _reduce_512(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[4]).
                                  concat(val[5])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2060)
  def _reduce_513(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2065)
  def _reduce_514(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2071)
  def _reduce_515(val, _values, result)
                          result = val[0].
                                  concat(val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2076)
  def _reduce_516(val, _values, result)
                          result = val[0].
                                  concat(val[2]).
                                  concat(val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2082)
  def _reduce_517(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2086)
  def _reduce_518(val, _values, result)
                          result = []
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2091)
  def _reduce_519(val, _values, result)
                          diagnostic :error, :argument_const, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2095)
  def _reduce_520(val, _values, result)
                          diagnostic :error, :argument_ivar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2099)
  def _reduce_521(val, _values, result)
                          diagnostic :error, :argument_gvar, nil, val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2103)
  def _reduce_522(val, _values, result)
                          diagnostic :error, :argument_cvar, nil, val[0]
                    
    result
  end
.,.,

# reduce 523 omitted

module_eval(<<'.,.,', 'ruby23.y', 2109)
  def _reduce_524(val, _values, result)
                          @static_env.declare val[0][0]

                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2116)
  def _reduce_525(val, _values, result)
                          result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2121)
  def _reduce_526(val, _values, result)
                          result = @builder.arg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2125)
  def _reduce_527(val, _values, result)
                          result = @builder.multi_lhs(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2130)
  def _reduce_528(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2134)
  def _reduce_529(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2139)
  def _reduce_530(val, _values, result)
                          check_kwarg_name(val[0])

                      @static_env.declare val[0][0]

                      result = val[0]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2148)
  def _reduce_531(val, _values, result)
                          result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2152)
  def _reduce_532(val, _values, result)
                          result = @builder.kwarg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2157)
  def _reduce_533(val, _values, result)
                          result = @builder.kwoptarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2161)
  def _reduce_534(val, _values, result)
                          result = @builder.kwarg(val[0])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2166)
  def _reduce_535(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2170)
  def _reduce_536(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2175)
  def _reduce_537(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2179)
  def _reduce_538(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 539 omitted

# reduce 540 omitted

module_eval(<<'.,.,', 'ruby23.y', 2186)
  def _reduce_541(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.kwrestarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2192)
  def _reduce_542(val, _values, result)
                          result = [ @builder.kwrestarg(val[0]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2197)
  def _reduce_543(val, _values, result)
                          result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2202)
  def _reduce_544(val, _values, result)
                          result = @builder.optarg(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2207)
  def _reduce_545(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2211)
  def _reduce_546(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2216)
  def _reduce_547(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2220)
  def _reduce_548(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

# reduce 549 omitted

# reduce 550 omitted

module_eval(<<'.,.,', 'ruby23.y', 2227)
  def _reduce_551(val, _values, result)
                          @static_env.declare val[1][0]

                      result = [ @builder.restarg(val[0], val[1]) ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2233)
  def _reduce_552(val, _values, result)
                          result = [ @builder.restarg(val[0]) ]
                    
    result
  end
.,.,

# reduce 553 omitted

# reduce 554 omitted

module_eval(<<'.,.,', 'ruby23.y', 2240)
  def _reduce_555(val, _values, result)
                          @static_env.declare val[1][0]

                      result = @builder.blockarg(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2247)
  def _reduce_556(val, _values, result)
                          result = [ val[1] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2251)
  def _reduce_557(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 558 omitted

module_eval(<<'.,.,', 'ruby23.y', 2257)
  def _reduce_559(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2262)
  def _reduce_560(val, _values, result)
                          result = []
                    
    result
  end
.,.,

# reduce 561 omitted

module_eval(<<'.,.,', 'ruby23.y', 2268)
  def _reduce_562(val, _values, result)
                          result = [ val[0] ]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2272)
  def _reduce_563(val, _values, result)
                          result = val[0] << val[2]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2277)
  def _reduce_564(val, _values, result)
                          result = @builder.pair(val[0], val[1], val[2])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2281)
  def _reduce_565(val, _values, result)
                          result = @builder.pair_keyword(val[0], val[1])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2285)
  def _reduce_566(val, _values, result)
                          result = @builder.pair_quoted(val[0], val[1], val[2], val[3])
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2289)
  def _reduce_567(val, _values, result)
                          result = @builder.kwsplat(val[0], val[1])
                    
    result
  end
.,.,

# reduce 568 omitted

# reduce 569 omitted

# reduce 570 omitted

# reduce 571 omitted

# reduce 572 omitted

# reduce 573 omitted

# reduce 574 omitted

# reduce 575 omitted

# reduce 576 omitted

# reduce 577 omitted

# reduce 578 omitted

# reduce 579 omitted

module_eval(<<'.,.,', 'ruby23.y', 2298)
  def _reduce_580(val, _values, result)
                          result = [:dot, val[0][1]]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2302)
  def _reduce_581(val, _values, result)
                          result = [:anddot, val[0][1]]
                    
    result
  end
.,.,

# reduce 582 omitted

# reduce 583 omitted

# reduce 584 omitted

# reduce 585 omitted

module_eval(<<'.,.,', 'ruby23.y', 2308)
  def _reduce_586(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

module_eval(<<'.,.,', 'ruby23.y', 2312)
  def _reduce_587(val, _values, result)
                          result = val[1]
                    
    result
  end
.,.,

# reduce 588 omitted

# reduce 589 omitted

# reduce 590 omitted

module_eval(<<'.,.,', 'ruby23.y', 2318)
  def _reduce_591(val, _values, result)
                        yyerrok
                  
    result
  end
.,.,

# reduce 592 omitted

# reduce 593 omitted

# reduce 594 omitted

module_eval(<<'.,.,', 'ruby23.y', 2327)
  def _reduce_595(val, _values, result)
                        result = nil
                  
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Ruby23
  end   # module Parser
